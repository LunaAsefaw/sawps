{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"SANBI WPS","text":"<p>Welcome to SANBI WPS. The SANBI Wildlife Protection System is a platform to track the population levels of endangered wildlife.</p> <p></p>"},{"location":"#introduction-to-and-aim-of-the-sawps","title":"Introduction to and AIM of the SAWPS","text":"<p>Welcome to the SAWPS platform Documentation site. SAWPS is a Global Environment Facility (GEF)-funded project. SAWPS is a coordinated system of wildlife trade monitoring with centralised/shared information for priority species (rhino, lion, leopard, cheetah, and elephant). The system will eventually be able to house information for other species as well. Currently, permits for legal trade, information about illegal trade seizures, and other law enforcement processes, and provincial-level monitoring data for key species (e.g., population counts and population information such as births, deaths, translocations, etc.) are captured at a provincial and sometimes national level. In addition, private wildlife owners maintain their own information systems about wildlife on their land, and some non-governmental organisations maintain their own information systems for specific species, SAWPS is expected to provide valuable data and information on a national level about the impacts of legal and illegal trade in the species and the current status of the distribution and abundance of the species. The data will then be interrogated and analysed by users of the system to inform national and international permitting and listing or reporting processes (e.g., the Threatened or Protected Species list under NEMBA, the CITES listings, hunting quotas, etc.).</p> <p>The aim of SAWPS is to have a system for centralised population-level monitoring of traded wildlife where information from provinces and private landowners is made available to key users (primarily to the Scientific Authority and other relevant decision makers) under strict access and security controls.</p>"},{"location":"#sanbi-the-scientific-authority","title":"SANBI the Scientific authority","text":"<p>SANBI is the body mandated by the National Environmental Management Biodiversity Act of 2004 (No. 10 of 2004) to champion the exploration, conservation, sustainable use, appreciation, and enjoyment of South Africa\u2019s exceptionally rich biodiversity for all South Africans. This includes giving effect to international agreements, and cooperative governance arrangements directed at ensuring the country\u2019s rich and varied biodiversity is conserved for future generations. SANBI also manages the technical unit for the Scientific Authority of South Africa (SAoSA).</p> <p>The SANBI technical unit, which provides advice and analysis on various species, recognises that is consumes a significant amount of its time and effort trying to obtain data from a variety of sector stakeholders \u2013 which could be better spent on more strategic, value-adding activities, and that it would be more efficient if they could access the required data from a central location. This has led SANBI to initiate the SAWPS project to develop a national digital platform for population-level monitoring of traded wildlife as part of its responsibility for Component 1 of the Global Environmental Facility-funded project titled \u2018Strengthening institutions, information management and monitoring to reduce the rate of illegal wildlife trade in South Africa.</p>"},{"location":"#scope-of-project","title":"Scope of Project","text":"<p>The focus of the project is therefore on monitoring population levels for charismatic species such as the lion, elephant, leopard, and rhino. The system is designed with scalability in mind such that alter iterations will be able to cater for data pertaining to other fauna and flora species as and when these become required. Part of this is to create a robust, information rich platform for visualisation of data at the level of administrative units.</p> <p></p>"},{"location":"#overview-to-the-sawps-platform-functionality","title":"Overview to the SAWPS platform functionality","text":""},{"location":"#project-roadmap","title":"Project Roadmap","text":""},{"location":"#contributing","title":"Contributing","text":"<p>We would love to collaborate with you! But first, please read our contributor guidelines which describe how to report issues, plan and contribute feature additions etc.</p>"},{"location":"#code-of-conduct","title":"Code of Conduct","text":"<p>Our community in this project is aligned with our Code of Conduct - please be sure to read and abide by that document in all interactions with out community.</p>"},{"location":"#diversity-statement","title":"Diversity Statement","text":"<p>This project welcomes and encourages participation by everyone.</p> <p>No matter how you identify yourself or how others perceive you: we welcome you. We welcome contributions from everyone as long as they interact constructively with our community.</p> <p>While much of the work for our project is technical in nature, we value and encourage contributions from those with expertise in other areas, and welcome them into our community.</p>"},{"location":"#project-partners","title":"Project Partners","text":"<p>The work is funded by the South African National Biodiversity Institute</p> <p>This project is implemented by Kartoza under contract to IDS.</p> Project Badges"},{"location":"about/","title":"About","text":""},{"location":"about/#license","title":"License","text":"<p>Published under AGPL-3. See the full license text.</p>"},{"location":"about/#contributors","title":"Contributors","text":"Contributor GitHub Handle Tim Sutton timlinux Dimas Ciputra dimasciput Leon Greyling lgkgh Faneva Andriamiadantsoa Fanevanjanahary Danang Massandy danangmassandy Tinashe Chiraya tinashechiraya Ketan Bamniya ketankartoza Amy Ternent amyburness Luna Asefaw LunaAsefaw Jeremy Prior Jeremy-Prior"},{"location":"about/#project-fundersbackers","title":"Project Funders/Backers","text":"<p>This project was conceptualized and initially funded by South African National Biodiversity Institute.</p>"},{"location":"about/#logos","title":"Logos","text":"<p>Another fine project contributed to by: Kartoza under contract to IDS.</p>"},{"location":"about/code-of-conduct/","title":"Contributor Covenant Code of Conduct","text":""},{"location":"about/code-of-conduct/#our-pledge","title":"Our Pledge","text":"<p>In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation.</p>"},{"location":"about/code-of-conduct/#our-standards","title":"Our Standards","text":"<p>Examples of behaviour that contributes to creating a positive environment include:</p> <ul> <li>Using welcoming and inclusive language</li> <li>Being respectful of differing viewpoints and experiences</li> <li>Gracefully accepting constructive criticism</li> <li>Focusing on what is best for the community</li> <li>Showing empathy towards other community members</li> </ul> <p>Examples of unacceptable behaviour by participants include:</p> <ul> <li>The use of sexualized language or imagery and unwelcome sexual attention or   advances</li> <li>Trolling, insulting/derogatory comments, and personal or political attacks</li> <li>Public or private harassment</li> <li>Publishing others' private information, such as a physical or electronic   address, without explicit permission</li> <li>Other conduct which could reasonably be considered inappropriate in a   professional setting</li> </ul>"},{"location":"about/code-of-conduct/#our-responsibilities","title":"Our Responsibilities","text":"<p>Project maintainers are responsible for clarifying the standards of acceptable behaviour and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behaviour.</p> <p>Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.</p>"},{"location":"about/code-of-conduct/#scope","title":"Scope","text":"<p>This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.</p>"},{"location":"about/code-of-conduct/#enforcement","title":"Enforcement","text":"<p>Instances of abusive, harassing, or otherwise unacceptable behaviour may be reported by contacting the project team. All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident.  Further details of specific enforcement policies may be posted separately.</p> <p>Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.</p>"},{"location":"about/code-of-conduct/#attribution","title":"Attribution","text":"<p>This Code of Conduct is adapted from the Contributor Covenant, version 1.4, available at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html</p>"},{"location":"about/contributing/","title":"Contributing to SANBI WPS","text":"<p>First off, thanks for taking the time to contribute! \ud83c\udf89 \ud83d\ude18 \u2728</p> <p>The following is a set of guidelines for contributing to this project. These are mostly guidelines, not rules. Use your best judgment, and feel free to propose changes to this document in a pull request.</p>"},{"location":"about/contributing/#reporting-bugs","title":"Reporting Bugs","text":"<p>Bugs are tracked as GitHub issues. Search the list and try reproduce on your local machine with a clean profile before you create an issue.  When you create an issue, please provide the following information by filling in the template.</p> <p>Explain the problem and include additional details to help maintainers reproduce the problem:</p> <ul> <li>Use a clear and descriptive title for the issue to identify the problem.</li> <li>Describe the exact steps which reproduce the problem in as many details   as possible. Don't just say what you did, but explain how you did it. For   example, if you moved the cursor to the end of a line, explain if you used a   mouse or a keyboard.</li> <li>Provide specific examples to demonstrate the steps. Include links to   files or GitHub projects, or copy/pasteable snippets, which you use in those   examples. If you're providing snippets on the issue, use Markdown code blocks.</li> <li>Describe the behavior you observed after following the steps and point   out what exactly is the problem with that behavior.</li> <li>Explain which behavior you expected to see instead and why.</li> <li>Include screenshots and animated GIFs which show you following the   described steps and clearly demonstrate the problem.</li> </ul>"},{"location":"about/contributing/#suggesting-enhancements","title":"Suggesting Enhancements","text":"<p>In case you want to suggest an enhancement, please follow this guideline to help maintainers and the community understand your suggestion. Before creating suggestions, please check issue list if there's already a request.</p> <p>Create an issue and provide the following information:</p> <ul> <li>Use a clear and descriptive title for the issue to identify the   suggestion.</li> <li>Provide a step-by-step description of the suggested enhancement in as   many details as possible.</li> <li>Provide specific examples to demonstrate the steps. Include   copy/pasteable snippets which you use in those examples, as Markdown code   blocks.</li> <li>Include screenshots and animated GIFs which helps demonstrate the steps   or point out the part of SANBI WPS which the suggestion is related to.</li> <li>Explain why this enhancement would be useful to most SANBI WPS users.</li> <li>List some other text editors or applications where this enhancement   exists.</li> </ul>"},{"location":"about/contributing/#first-code-contribution","title":"First Code Contribution","text":"<p>Unsure where to begin contributing? You can start by looking through these <code>document</code>, <code>good first issue</code> and <code>help wanted</code> issues:</p> <ul> <li>document issues: issues which should be reviewed or improved.</li> <li>good first issues: issues which should only require a few lines of code,   and a test or two.</li> <li>help wanted issues: issues which should be a bit more involved than   beginner issues.</li> </ul>"},{"location":"about/contributing/#pull-requests","title":"Pull Requests","text":""},{"location":"about/contributing/#development-workflow","title":"Development workFlow","text":"<ul> <li>Set up your development environment</li> <li>Make change from a right branch</li> <li>Be sure the code passes tests</li> <li>Make a pull request</li> </ul>"},{"location":"about/contributing/#development-environment","title":"Development environment","text":"<ul> <li>Prepare your machine and it's packages installed.</li> <li>Checkout our repository</li> <li>Install dependencies by <code>pip install -r REQUIREMENTS-dev.txt</code></li> </ul>"},{"location":"about/contributing/#make-changes","title":"Make changes","text":""},{"location":"about/contributing/#checkout-a-branch","title":"Checkout a branch","text":"<ul> <li>master: PR Base branch.</li> <li>production: lastest release branch with distribution files. Never make a PR on this.</li> <li>gh-pages: API docs, examples and demo</li> </ul>"},{"location":"about/contributing/#check-code-style","title":"Check Code Style","text":"<p>Run the pylance extension and make sure all the tests pass.</p>"},{"location":"about/contributing/#test","title":"Test","text":"<p>Run <code>TODO</code> and verify all the tests pass. If you are adding new commands or features, they must include tests. If you are changing functionality, update the tests if you need to.</p>"},{"location":"about/contributing/#commit","title":"Commit","text":"<p>Follow our commit message conventions.</p>"},{"location":"about/contributing/#yes-pull-request","title":"Yes! Pull request","text":"<p>Make your pull request, then describe your changes.</p>"},{"location":"about/contributing/#title","title":"Title","text":"<p>Follow other PR title format on below. <pre><code>    &lt;Type&gt;: Short Description (fix #111)\n    &lt;Type&gt;: Short Description (fix #123, #111, #122)\n    &lt;Type&gt;: Short Description (ref #111)\n</code></pre></p> <ul> <li>capitalize first letter of Type</li> <li>use present tense: 'change' not 'changed' or 'changes'</li> </ul>"},{"location":"about/contributing/#description","title":"Description","text":"<p>If it has related issues, add links to the issues(like <code>#123</code>) in the description. Fill in the Pull Request Template by check your case.</p>"},{"location":"about/contributing/#code-of-conduct","title":"Code of Conduct","text":"<p>This project and everyone participating in it is governed by the Code of Conduct. By participating, you are expected to uphold this code. Please report unacceptable behaviour to tim@kartoza.com.</p> <p>This guide is based on atom contributing guide, CocoaPods and ESLint</p>"},{"location":"about/license/","title":"License","text":"<pre><code>                GNU AFFERO GENERAL PUBLIC LICENSE\n                   Version 3, 19 November 2007\n</code></pre> <p>Copyright (C) 2007 Free Software Foundation, Inc. https://fsf.org/  Everyone is permitted to copy and distribute verbatim copies  of this license document, but changing it is not allowed.</p> <pre><code>                        Preamble\n</code></pre> <p>The GNU Affero General Public License is a free, copyleft license for software and other kinds of works, specifically designed to ensure cooperation with the community in the case of network server software.</p> <p>The licenses for most software and other practical works are designed to take away your freedom to share and change the works.  By contrast, our General Public Licenses are intended to guarantee your freedom to share and change all versions of a program--to make sure it remains free software for all its users.</p> <p>When we speak of free software, we are referring to freedom, not price.  Our General Public Licenses are designed to make sure that you have the freedom to distribute copies of free software (and charge for them if you wish), that you receive source code or can get it if you want it, that you can change the software or use pieces of it in new free programs, and that you know you can do these things.</p> <p>Developers that use our General Public Licenses protect your rights with two steps: (1) assert copyright on the software, and (2) offer you this License which gives you legal permission to copy, distribute and/or modify the software.</p> <p>A secondary benefit of defending all users' freedom is that improvements made in alternate versions of the program, if they receive widespread use, become available for other developers to incorporate.  Many developers of free software are heartened and encouraged by the resulting cooperation.  However, in the case of software used on network servers, this result may fail to come about. The GNU General Public License permits making a modified version and letting the public access it on a server without ever releasing its source code to the public.</p> <p>The GNU Affero General Public License is designed specifically to ensure that, in such cases, the modified source code becomes available to the community.  It requires the operator of a network server to provide the source code of the modified version running there to the users of that server.  Therefore, public use of a modified version, on a publicly accessible server, gives the public access to the source code of the modified version.</p> <p>An older license, called the Affero General Public License and published by Affero, was designed to accomplish similar goals.  This is a different license, not a version of the Affero GPL, but Affero has released a new version of the Affero GPL which permits relicensing under this license.</p> <p>The precise terms and conditions for copying, distribution and modification follow.</p> <pre><code>                   TERMS AND CONDITIONS\n</code></pre> <ol> <li>Definitions.</li> </ol> <p>\"This License\" refers to version 3 of the GNU Affero General Public License.</p> <p>\"Copyright\" also means copyright-like laws that apply to other kinds of works, such as semiconductor masks.</p> <p>\"The Program\" refers to any copyrightable work licensed under this License.  Each licensee is addressed as \"you\".  \"Licensees\" and \"recipients\" may be individuals or organizations.</p> <p>To \"modify\" a work means to copy from or adapt all or part of the work in a fashion requiring copyright permission, other than the making of an exact copy.  The resulting work is called a \"modified version\" of the earlier work or a work \"based on\" the earlier work.</p> <p>A \"covered work\" means either the unmodified Program or a work based on the Program.</p> <p>To \"propagate\" a work means to do anything with it that, without permission, would make you directly or secondarily liable for infringement under applicable copyright law, except executing it on a computer or modifying a private copy.  Propagation includes copying, distribution (with or without modification), making available to the public, and in some countries other activities as well.</p> <p>To \"convey\" a work means any kind of propagation that enables other parties to make or receive copies.  Mere interaction with a user through a computer network, with no transfer of a copy, is not conveying.</p> <p>An interactive user interface displays \"Appropriate Legal Notices\" to the extent that it includes a convenient and prominently visible feature that (1) displays an appropriate copyright notice, and (2) tells the user that there is no warranty for the work (except to the extent that warranties are provided), that licensees may convey the work under this License, and how to view a copy of this License.  If the interface presents a list of user commands or options, such as a menu, a prominent item in the list meets this criterion.</p> <ol> <li>Source Code.</li> </ol> <p>The \"source code\" for a work means the preferred form of the work for making modifications to it.  \"Object code\" means any non-source form of a work.</p> <p>A \"Standard Interface\" means an interface that either is an official standard defined by a recognized standards body, or, in the case of interfaces specified for a particular programming language, one that is widely used among developers working in that language.</p> <p>The \"System Libraries\" of an executable work include anything, other than the work as a whole, that (a) is included in the normal form of packaging a Major Component, but which is not part of that Major Component, and (b) serves only to enable use of the work with that Major Component, or to implement a Standard Interface for which an implementation is available to the public in source code form.  A \"Major Component\", in this context, means a major essential component (kernel, window system, and so on) of the specific operating system (if any) on which the executable work runs, or a compiler used to produce the work, or an object code interpreter used to run it.</p> <p>The \"Corresponding Source\" for a work in object code form means all the source code needed to generate, install, and (for an executable work) run the object code and to modify the work, including scripts to control those activities.  However, it does not include the work's System Libraries, or general-purpose tools or generally available free programs which are used unmodified in performing those activities but which are not part of the work.  For example, Corresponding Source includes interface definition files associated with source files for the work, and the source code for shared libraries and dynamically linked subprograms that the work is specifically designed to require, such as by intimate data communication or control flow between those subprograms and other parts of the work.</p> <p>The Corresponding Source need not include anything that users can regenerate automatically from other parts of the Corresponding Source.</p> <p>The Corresponding Source for a work in source code form is that same work.</p> <ol> <li>Basic Permissions.</li> </ol> <p>All rights granted under this License are granted for the term of copyright on the Program, and are irrevocable provided the stated conditions are met.  This License explicitly affirms your unlimited permission to run the unmodified Program.  The output from running a covered work is covered by this License only if the output, given its content, constitutes a covered work.  This License acknowledges your rights of fair use or other equivalent, as provided by copyright law.</p> <p>You may make, run and propagate covered works that you do not convey, without conditions so long as your license otherwise remains in force.  You may convey covered works to others for the sole purpose of having them make modifications exclusively for you, or provide you with facilities for running those works, provided that you comply with the terms of this License in conveying all material for which you do not control copyright.  Those thus making or running the covered works for you must do so exclusively on your behalf, under your direction and control, on terms that prohibit them from making any copies of your copyrighted material outside their relationship with you.</p> <p>Conveying under any other circumstances is permitted solely under the conditions stated below.  Sublicensing is not allowed; section 10 makes it unnecessary.</p> <ol> <li>Protecting Users' Legal Rights From Anti-Circumvention Law.</li> </ol> <p>No covered work shall be deemed part of an effective technological measure under any applicable law fulfilling obligations under article 11 of the WIPO copyright treaty adopted on 20 December 1996, or similar laws prohibiting or restricting circumvention of such measures.</p> <p>When you convey a covered work, you waive any legal power to forbid circumvention of technological measures to the extent such circumvention is effected by exercising rights under this License with respect to the covered work, and you disclaim any intention to limit operation or modification of the work as a means of enforcing, against the work's users, your or third parties' legal rights to forbid circumvention of technological measures.</p> <ol> <li>Conveying Verbatim Copies.</li> </ol> <p>You may convey verbatim copies of the Program's source code as you receive it, in any medium, provided that you conspicuously and appropriately publish on each copy an appropriate copyright notice; keep intact all notices stating that this License and any non-permissive terms added in accord with section 7 apply to the code; keep intact all notices of the absence of any warranty; and give all recipients a copy of this License along with the Program.</p> <p>You may charge any price or no price for each copy that you convey, and you may offer support or warranty protection for a fee.</p> <ol> <li>Conveying Modified Source Versions.</li> </ol> <p>You may convey a work based on the Program, or the modifications to produce it from the Program, in the form of source code under the terms of section 4, provided that you also meet all of these conditions:</p> <pre><code>a) The work must carry prominent notices stating that you modified\nit, and giving a relevant date.\n\nb) The work must carry prominent notices stating that it is\nreleased under this License and any conditions added under section\n7.  This requirement modifies the requirement in section 4 to\n\"keep intact all notices\".\n\nc) You must license the entire work, as a whole, under this\nLicense to anyone who comes into possession of a copy.  This\nLicense will therefore apply, along with any applicable section 7\nadditional terms, to the whole of the work, and all its parts,\nregardless of how they are packaged.  This License gives no\npermission to license the work in any other way, but it does not\ninvalidate such permission if you have separately received it.\n\nd) If the work has interactive user interfaces, each must display\nAppropriate Legal Notices; however, if the Program has interactive\ninterfaces that do not display Appropriate Legal Notices, your\nwork need not make them do so.\n</code></pre> <p>A compilation of a covered work with other separate and independent works, which are not by their nature extensions of the covered work, and which are not combined with it such as to form a larger program, in or on a volume of a storage or distribution medium, is called an \"aggregate\" if the compilation and its resulting copyright are not used to limit the access or legal rights of the compilation's users beyond what the individual works permit.  Inclusion of a covered work in an aggregate does not cause this License to apply to the other parts of the aggregate.</p> <ol> <li>Conveying Non-Source Forms.</li> </ol> <p>You may convey a covered work in object code form under the terms of sections 4 and 5, provided that you also convey the machine-readable Corresponding Source under the terms of this License, in one of these ways:</p> <pre><code>a) Convey the object code in, or embodied in, a physical product\n(including a physical distribution medium), accompanied by the\nCorresponding Source fixed on a durable physical medium\ncustomarily used for software interchange.\n\nb) Convey the object code in, or embodied in, a physical product\n(including a physical distribution medium), accompanied by a\nwritten offer, valid for at least three years and valid for as\nlong as you offer spare parts or customer support for that product\nmodel, to give anyone who possesses the object code either (1) a\ncopy of the Corresponding Source for all the software in the\nproduct that is covered by this License, on a durable physical\nmedium customarily used for software interchange, for a price no\nmore than your reasonable cost of physically performing this\nconveying of source, or (2) access to copy the\nCorresponding Source from a network server at no charge.\n\nc) Convey individual copies of the object code with a copy of the\nwritten offer to provide the Corresponding Source.  This\nalternative is allowed only occasionally and noncommercially, and\nonly if you received the object code with such an offer, in accord\nwith subsection 6b.\n\nd) Convey the object code by offering access from a designated\nplace (gratis or for a charge), and offer equivalent access to the\nCorresponding Source in the same way through the same place at no\nfurther charge.  You need not require recipients to copy the\nCorresponding Source along with the object code.  If the place to\ncopy the object code is a network server, the Corresponding Source\nmay be on a different server (operated by you or a third party)\nthat supports equivalent copying facilities, provided you maintain\nclear directions next to the object code saying where to find the\nCorresponding Source.  Regardless of what server hosts the\nCorresponding Source, you remain obligated to ensure that it is\navailable for as long as needed to satisfy these requirements.\n\ne) Convey the object code using peer-to-peer transmission, provided\nyou inform other peers where the object code and Corresponding\nSource of the work are being offered to the general public at no\ncharge under subsection 6d.\n</code></pre> <p>A separable portion of the object code, whose source code is excluded from the Corresponding Source as a System Library, need not be included in conveying the object code work.</p> <p>A \"User Product\" is either (1) a \"consumer product\", which means any tangible personal property which is normally used for personal, family, or household purposes, or (2) anything designed or sold for incorporation into a dwelling.  In determining whether a product is a consumer product, doubtful cases shall be resolved in favor of coverage.  For a particular product received by a particular user, \"normally used\" refers to a typical or common use of that class of product, regardless of the status of the particular user or of the way in which the particular user actually uses, or expects or is expected to use, the product.  A product is a consumer product regardless of whether the product has substantial commercial, industrial or non-consumer uses, unless such uses represent the only significant mode of use of the product.</p> <p>\"Installation Information\" for a User Product means any methods, procedures, authorization keys, or other information required to install and execute modified versions of a covered work in that User Product from a modified version of its Corresponding Source.  The information must suffice to ensure that the continued functioning of the modified object code is in no case prevented or interfered with solely because modification has been made.</p> <p>If you convey an object code work under this section in, or with, or specifically for use in, a User Product, and the conveying occurs as part of a transaction in which the right of possession and use of the User Product is transferred to the recipient in perpetuity or for a fixed term (regardless of how the transaction is characterized), the Corresponding Source conveyed under this section must be accompanied by the Installation Information.  But this requirement does not apply if neither you nor any third party retains the ability to install modified object code on the User Product (for example, the work has been installed in ROM).</p> <p>The requirement to provide Installation Information does not include a requirement to continue to provide support service, warranty, or updates for a work that has been modified or installed by the recipient, or for the User Product in which it has been modified or installed.  Access to a network may be denied when the modification itself materially and adversely affects the operation of the network or violates the rules and protocols for communication across the network.</p> <p>Corresponding Source conveyed, and Installation Information provided, in accord with this section must be in a format that is publicly documented (and with an implementation available to the public in source code form), and must require no special password or key for unpacking, reading or copying.</p> <ol> <li>Additional Terms.</li> </ol> <p>\"Additional permissions\" are terms that supplement the terms of this License by making exceptions from one or more of its conditions. Additional permissions that are applicable to the entire Program shall be treated as though they were included in this License, to the extent that they are valid under applicable law.  If additional permissions apply only to part of the Program, that part may be used separately under those permissions, but the entire Program remains governed by this License without regard to the additional permissions.</p> <p>When you convey a copy of a covered work, you may at your option remove any additional permissions from that copy, or from any part of it.  (Additional permissions may be written to require their own removal in certain cases when you modify the work.)  You may place additional permissions on material, added by you to a covered work, for which you have or can give appropriate copyright permission.</p> <p>Notwithstanding any other provision of this License, for material you add to a covered work, you may (if authorized by the copyright holders of that material) supplement the terms of this License with terms:</p> <pre><code>a) Disclaiming warranty or limiting liability differently from the\nterms of sections 15 and 16 of this License; or\n\nb) Requiring preservation of specified reasonable legal notices or\nauthor attributions in that material or in the Appropriate Legal\nNotices displayed by works containing it; or\n\nc) Prohibiting misrepresentation of the origin of that material, or\nrequiring that modified versions of such material be marked in\nreasonable ways as different from the original version; or\n\nd) Limiting the use for publicity purposes of names of licensors or\nauthors of the material; or\n\ne) Declining to grant rights under trademark law for use of some\ntrade names, trademarks, or service marks; or\n\nf) Requiring indemnification of licensors and authors of that\nmaterial by anyone who conveys the material (or modified versions of\nit) with contractual assumptions of liability to the recipient, for\nany liability that these contractual assumptions directly impose on\nthose licensors and authors.\n</code></pre> <p>All other non-permissive additional terms are considered \"further restrictions\" within the meaning of section 10.  If the Program as you received it, or any part of it, contains a notice stating that it is governed by this License along with a term that is a further restriction, you may remove that term.  If a license document contains a further restriction but permits relicensing or conveying under this License, you may add to a covered work material governed by the terms of that license document, provided that the further restriction does not survive such relicensing or conveying.</p> <p>If you add terms to a covered work in accord with this section, you must place, in the relevant source files, a statement of the additional terms that apply to those files, or a notice indicating where to find the applicable terms.</p> <p>Additional terms, permissive or non-permissive, may be stated in the form of a separately written license, or stated as exceptions; the above requirements apply either way.</p> <ol> <li>Termination.</li> </ol> <p>You may not propagate or modify a covered work except as expressly provided under this License.  Any attempt otherwise to propagate or modify it is void, and will automatically terminate your rights under this License (including any patent licenses granted under the third paragraph of section 11).</p> <p>However, if you cease all violation of this License, then your license from a particular copyright holder is reinstated (a) provisionally, unless and until the copyright holder explicitly and finally terminates your license, and (b) permanently, if the copyright holder fails to notify you of the violation by some reasonable means prior to 60 days after the cessation.</p> <p>Moreover, your license from a particular copyright holder is reinstated permanently if the copyright holder notifies you of the violation by some reasonable means, this is the first time you have received notice of violation of this License (for any work) from that copyright holder, and you cure the violation prior to 30 days after your receipt of the notice.</p> <p>Termination of your rights under this section does not terminate the licenses of parties who have received copies or rights from you under this License.  If your rights have been terminated and not permanently reinstated, you do not qualify to receive new licenses for the same material under section 10.</p> <ol> <li>Acceptance Not Required for Having Copies.</li> </ol> <p>You are not required to accept this License in order to receive or run a copy of the Program.  Ancillary propagation of a covered work occurring solely as a consequence of using peer-to-peer transmission to receive a copy likewise does not require acceptance.  However, nothing other than this License grants you permission to propagate or modify any covered work.  These actions infringe copyright if you do not accept this License.  Therefore, by modifying or propagating a covered work, you indicate your acceptance of this License to do so.</p> <ol> <li>Automatic Licensing of Downstream Recipients.</li> </ol> <p>Each time you convey a covered work, the recipient automatically receives a license from the original licensors, to run, modify and propagate that work, subject to this License.  You are not responsible for enforcing compliance by third parties with this License.</p> <p>An \"entity transaction\" is a transaction transferring control of an organization, or substantially all assets of one, or subdividing an organization, or merging organizations.  If propagation of a covered work results from an entity transaction, each party to that transaction who receives a copy of the work also receives whatever licenses to the work the party's predecessor in interest had or could give under the previous paragraph, plus a right to possession of the Corresponding Source of the work from the predecessor in interest, if the predecessor has it or can get it with reasonable efforts.</p> <p>You may not impose any further restrictions on the exercise of the rights granted or affirmed under this License.  For example, you may not impose a license fee, royalty, or other charge for exercise of rights granted under this License, and you may not initiate litigation (including a cross-claim or counterclaim in a lawsuit) alleging that any patent claim is infringed by making, using, selling, offering for sale, or importing the Program or any portion of it.</p> <ol> <li>Patents.</li> </ol> <p>A \"contributor\" is a copyright holder who authorizes use under this License of the Program or a work on which the Program is based.  The work thus licensed is called the contributor's \"contributor version\".</p> <p>A contributor's \"essential patent claims\" are all patent claims owned or controlled by the contributor, whether already acquired or hereafter acquired, that would be infringed by some manner, permitted by this License, of making, using, or selling its contributor version, but do not include claims that would be infringed only as a consequence of further modification of the contributor version.  For purposes of this definition, \"control\" includes the right to grant patent sublicenses in a manner consistent with the requirements of this License.</p> <p>Each contributor grants you a non-exclusive, worldwide, royalty-free patent license under the contributor's essential patent claims, to make, use, sell, offer for sale, import and otherwise run, modify and propagate the contents of its contributor version.</p> <p>In the following three paragraphs, a \"patent license\" is any express agreement or commitment, however denominated, not to enforce a patent (such as an express permission to practice a patent or covenant not to sue for patent infringement).  To \"grant\" such a patent license to a party means to make such an agreement or commitment not to enforce a patent against the party.</p> <p>If you convey a covered work, knowingly relying on a patent license, and the Corresponding Source of the work is not available for anyone to copy, free of charge and under the terms of this License, through a publicly available network server or other readily accessible means, then you must either (1) cause the Corresponding Source to be so available, or (2) arrange to deprive yourself of the benefit of the patent license for this particular work, or (3) arrange, in a manner consistent with the requirements of this License, to extend the patent license to downstream recipients.  \"Knowingly relying\" means you have actual knowledge that, but for the patent license, your conveying the covered work in a country, or your recipient's use of the covered work in a country, would infringe one or more identifiable patents in that country that you have reason to believe are valid.</p> <p>If, pursuant to or in connection with a single transaction or arrangement, you convey, or propagate by procuring conveyance of, a covered work, and grant a patent license to some of the parties receiving the covered work authorizing them to use, propagate, modify or convey a specific copy of the covered work, then the patent license you grant is automatically extended to all recipients of the covered work and works based on it.</p> <p>A patent license is \"discriminatory\" if it does not include within the scope of its coverage, prohibits the exercise of, or is conditioned on the non-exercise of one or more of the rights that are specifically granted under this License.  You may not convey a covered work if you are a party to an arrangement with a third party that is in the business of distributing software, under which you make payment to the third party based on the extent of your activity of conveying the work, and under which the third party grants, to any of the parties who would receive the covered work from you, a discriminatory patent license (a) in connection with copies of the covered work conveyed by you (or copies made from those copies), or (b) primarily for and in connection with specific products or compilations that contain the covered work, unless you entered into that arrangement, or that patent license was granted, prior to 28 March 2007.</p> <p>Nothing in this License shall be construed as excluding or limiting any implied license or other defenses to infringement that may otherwise be available to you under applicable patent law.</p> <ol> <li>No Surrender of Others' Freedom.</li> </ol> <p>If conditions are imposed on you (whether by court order, agreement or otherwise) that contradict the conditions of this License, they do not excuse you from the conditions of this License.  If you cannot convey a covered work so as to satisfy simultaneously your obligations under this License and any other pertinent obligations, then as a consequence you may not convey it at all.  For example, if you agree to terms that obligate you to collect a royalty for further conveying from those to whom you convey the Program, the only way you could satisfy both those terms and this License would be to refrain entirely from conveying the Program.</p> <ol> <li>Remote Network Interaction; Use with the GNU General Public License.</li> </ol> <p>Notwithstanding any other provision of this License, if you modify the Program, your modified version must prominently offer all users interacting with it remotely through a computer network (if your version supports such interaction) an opportunity to receive the Corresponding Source of your version by providing access to the Corresponding Source from a network server at no charge, through some standard or customary means of facilitating copying of software.  This Corresponding Source shall include the Corresponding Source for any work covered by version 3 of the GNU General Public License that is incorporated pursuant to the following paragraph.</p> <p>Notwithstanding any other provision of this License, you have permission to link or combine any covered work with a work licensed under version 3 of the GNU General Public License into a single combined work, and to convey the resulting work.  The terms of this License will continue to apply to the part which is the covered work, but the work with which it is combined will remain governed by version 3 of the GNU General Public License.</p> <ol> <li>Revised Versions of this License.</li> </ol> <p>The Free Software Foundation may publish revised and/or new versions of the GNU Affero General Public License from time to time.  Such new versions will be similar in spirit to the present version, but may differ in detail to address new problems or concerns.</p> <p>Each version is given a distinguishing version number.  If the Program specifies that a certain numbered version of the GNU Affero General Public License \"or any later version\" applies to it, you have the option of following the terms and conditions either of that numbered version or of any later version published by the Free Software Foundation.  If the Program does not specify a version number of the GNU Affero General Public License, you may choose any version ever published by the Free Software Foundation.</p> <p>If the Program specifies that a proxy can decide which future versions of the GNU Affero General Public License can be used, that proxy's public statement of acceptance of a version permanently authorizes you to choose that version for the Program.</p> <p>Later license versions may give you additional or different permissions.  However, no additional obligations are imposed on any author or copyright holder as a result of your choosing to follow a later version.</p> <ol> <li>Disclaimer of Warranty.</li> </ol> <p>THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION.</p> <ol> <li>Limitation of Liability.</li> </ol> <p>IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.</p> <ol> <li>Interpretation of Sections 15 and 16.</li> </ol> <p>If the disclaimer of warranty and limitation of liability provided above cannot be given local legal effect according to their terms, reviewing courts shall apply local law that most closely approximates an absolute waiver of all civil liability in connection with the Program, unless a warranty or assumption of liability accompanies a copy of the Program in return for a fee.</p> <pre><code>                 END OF TERMS AND CONDITIONS\n\n        How to Apply These Terms to Your New Programs\n</code></pre> <p>If you develop a new program, and you want it to be of the greatest possible use to the public, the best way to achieve this is to make it free software which everyone can redistribute and change under these terms.</p> <p>To do so, attach the following notices to the program.  It is safest to attach them to the start of each source file to most effectively state the exclusion of warranty; and each file should have at least the \"copyright\" line and a pointer to where the full notice is found.</p> <pre><code>&lt;one line to give the program's name and a brief idea of what it does.&gt;\nCopyright (C) &lt;year&gt;  &lt;name of author&gt;\n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU Affero General Public License as published\nby the Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Affero General Public License for more details.\n\nYou should have received a copy of the GNU Affero General Public License\nalong with this program.  If not, see &lt;https://www.gnu.org/licenses/&gt;.\n</code></pre> <p>Also add information on how to contact you by electronic and paper mail.</p> <p>If your software can interact with users remotely through a computer network, you should also make sure that it provides a way for users to get its source.  For example, if your program is a web application, its interface could display a \"Source\" link that leads users to an archive of the code.  There are many ways you could offer source, and different solutions will be better for different programs; see section 13 for the specific requirements.</p> <p>You should also get your employer (if you work as a programmer) or school, if any, to sign a \"copyright disclaimer\" for the program, if necessary. For more information on this, and how to apply and follow the GNU AGPL, see https://www.gnu.org/licenses/.</p>"},{"location":"administrator/","title":"For Administrators","text":"<p>This is the homepage for all administrator related documentation.</p> <p>The content is divided into two sections:</p> <ul> <li>The administrator guide, which describes common workflows for system administrators in a tutorial format.</li> <li>The administrator manual, which describes each page of the admin user interface and what the various options on that page do.</li> </ul>"},{"location":"administrator/guide/","title":"Administrator Guide","text":""},{"location":"administrator/manual/","title":"Administrator Reference Manual","text":""},{"location":"developer/","title":"For Developers","text":"<p>This is the homepage for all developer related documentation.</p> <ul> <li>The developer guide, which describes common workflows for developers in a tutorial format. This includes instructions on how to set up your developer environment, check out the code, run it locally etc.</li> <li>The developer manual, which describes each python module and its classes, functions etc. This section is autogenerated.</li> <li>The api guide, which describes common workflows for using the restful API.</li> <li>The api manual, which describes each API endpoint and its parameters, return values etc. This section is autogenerated.</li> </ul>"},{"location":"developer/api/","title":"API Documentation","text":"<p>This is the homepage for all API related documentation.</p> <ul> <li>The api guide, which describes common workflows for using the restful API.</li> <li>The api manual, which describes each API endpoint and its parameters, return values etc. This section is autogenerated.</li> </ul>"},{"location":"developer/api/guide/","title":"API Guide","text":""},{"location":"developer/api/manual/","title":"API Reference","text":""},{"location":"developer/documentation/","title":"Documentation","text":""},{"location":"developer/documentation/#overview","title":"Overview","text":"<p>Welcome to the instructions for those wishing to contribute to our documentation!</p> <p>Our documentation system is based on the popular mkdocs system. We encourage you to read the upstream documentation from mkdocs for the finer details of how mkdocs works. In particular, read this page before you get to work. Mkdocs is not hard, but it may feel initially a little different if you are used to creating your documentation in word.</p> <p>We use mkdocs because it has some great and useful features. Most especially:</p> <ul> <li>The code and the documentation are versioned together. This means that for whatever version of the code we have in our production release, we can be sure the documentation matches that release. We can also look back at changes over time through the version history when needed.</li> <li>It can render beautiful static (not needing a backend server) web sites with great features like search, styling, intuitive navigation etc.</li> <li>It can optionally render PDF documents from the same source markdown.</li> <li>An ecosystem of plugins and themes makes mkdocs really flexible and extensible.</li> </ul>"},{"location":"developer/documentation/#some-terminology","title":"Some terminology","text":"<p>In our documentation, we have organised the information using a specific nomenclature:</p> <ul> <li>guide: A guide is a multi-step workflow / tutorial that leads you through common activities.</li> <li>manual: A collection of documents that describe each part of the project in a matter of fact way without presupposing any specific workflow is being undertaken.</li> </ul> <p>For each of the main topic areas (user, admin, developer, devops, api user) we provide guides and manuals as is appropriate.</p>"},{"location":"developer/documentation/#organisation","title":"Organisation","text":"<p>The documentation is organised in the following structure:</p> <pre><code>src\n\u251c\u2500\u2500 about\n\u2502   \u251c\u2500\u2500 code-of-conduct.md\n\u2502   \u251c\u2500\u2500 contributing.md\n\u2502   \u251c\u2500\u2500 funders.md\n\u2502   \u251c\u2500\u2500 index.md\n\u2502   \u2514\u2500\u2500 license.md\n\u251c\u2500\u2500 administrator\n\u2502   \u251c\u2500\u2500 guide\n\u2502   \u2502   \u2514\u2500\u2500 index.md\n\u2502   \u251c\u2500\u2500 index.md\n\u2502   \u2514\u2500\u2500 manual\n\u2502       \u251c\u2500\u2500 img\n\u2502       \u2502   \u2514\u2500\u2500 naming-convention.README\n\u2502       \u2514\u2500\u2500 index.md\n\u251c\u2500\u2500 developer\n\u2502   \u251c\u2500\u2500 api\n\u2502   \u2502   \u251c\u2500\u2500 guide\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 index.md\n\u2502   \u2502   \u251c\u2500\u2500 index.md\n\u2502   \u2502   \u2514\u2500\u2500 manual\n\u2502   \u2502       \u2514\u2500\u2500 index.md\n\u2502   \u251c\u2500\u2500 documentation\n\u2502   \u2502   \u251c\u2500\u2500 img\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 naming-convention.README\n\u2502   \u2502   \u2514\u2500\u2500 index.md\n\u2502   \u251c\u2500\u2500 guide\n\u2502   \u2502   \u251c\u2500\u2500 architecture.md\n\u2502   \u2502   \u251c\u2500\u2500 building.md\n\u2502   \u2502   \u251c\u2500\u2500 cloning.md\n\u2502   \u2502   \u251c\u2500\u2500 configuration.md\n\u2502   \u2502   \u251c\u2500\u2500 design.md\n\u2502   \u2502   \u251c\u2500\u2500 ide-setup.md\n\u2502   \u2502   \u251c\u2500\u2500 index.md\n\u2502   \u2502   \u251c\u2500\u2500 prerequisites.md\n\u2502   \u2502   \u251c\u2500\u2500 templates\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 commit-message-convention.md\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 pull-request-template.md\n\u2502   \u2502   \u2514\u2500\u2500 workflows.md\n\u2502   \u251c\u2500\u2500 index.md\n\u2502   \u2514\u2500\u2500 manual\n\u2502       \u251c\u2500\u2500 activity.md\n\u2502       \u251c\u2500\u2500 core.md\n\u2502       \u251c\u2500\u2500 fixtures.md\n\u2502       \u251c\u2500\u2500 frontend.md\n\u2502       \u251c\u2500\u2500 index.md\n\u2502       \u251c\u2500\u2500 notification.md\n\u2502       \u251c\u2500\u2500 occurrence.md\n\u2502       \u251c\u2500\u2500 population_data.md\n\u2502       \u251c\u2500\u2500 property.md\n\u2502       \u251c\u2500\u2500 regulator_permit.md\n\u2502       \u251c\u2500\u2500 sawps.md\n\u2502       \u251c\u2500\u2500 species.md\n\u2502       \u2514\u2500\u2500 stakeholder.md\n\u251c\u2500\u2500 devops\n\u2502   \u251c\u2500\u2500 guide\n\u2502   \u2502   \u2514\u2500\u2500 index.md\n\u2502   \u251c\u2500\u2500 img\n\u2502   \u2502   \u2514\u2500\u2500 naming-convention.README\n\u2502   \u251c\u2500\u2500 index.md\n\u2502   \u2514\u2500\u2500 manual\n\u2502       \u2514\u2500\u2500 index.md\n\u251c\u2500\u2500 img\n\u2502   \u2514\u2500\u2500 naming-convention.README\n\u251c\u2500\u2500 index.md\n\u2514\u2500\u2500 user\n    \u251c\u2500\u2500 guide\n    \u2502   \u251c\u2500\u2500 data-upload.md\n    \u2502   \u251c\u2500\u2500 img\n    \u2502   \u2502   \u2514\u2500\u2500 naming_convention.readme\n    \u2502   \u251c\u2500\u2500 index.md\n    \u2502   \u2514\u2500\u2500 instructions.md\n    \u251c\u2500\u2500 index.md\n    \u251c\u2500\u2500 manual\n    \u2502   \u2514\u2500\u2500 index.md\n    \u2514\u2500\u2500 quickstart\n        \u2514\u2500\u2500 index.md\n</code></pre>"},{"location":"developer/documentation/#file-naming-conventions","title":"File naming conventions","text":"<p>Please follow these conventions when writing your documentation:</p> <ol> <li>Write file names in all lower case, with hyphens separating words (no spaces). e.g. <code>important-file.md</code> not <code>Important File.md</code> or other deviations.</li> <li>Place the image files in the <code>img</code> folder adjacent to your content.</li> <li>Do not abbreviate any words in file names - but try to use terse, descriptive names.</li> <li>Place your content into the appropriate place as outlined in the structure above.</li> <li>Each file should only contain one level-one heading e.g. <code># Page title</code></li> <li>Headings and subheadings should be written as a terse phrase starting with a capital letter and subsequent words in lower case unless they are proper nouns. Do not place a colon after the heading.</li> <li>Use unicode number markers to reference numbers in images e.g. 1\ufe0f\u20e3, 2\ufe0f\u20e3, 3\ufe0f\u20e3, 4\ufe0f\u20e3, 5\ufe0f\u20e3, 6\ufe0f\u20e3, 7\ufe0f\u20e3, 8\ufe0f\u20e3</li> <li>Every heading / subheading should have a single line underneath it summarising the content that will follow. This sentence will be used in the help center in the application to give the user a reference point for the text that will follow. It also makes the help text more consistent and readable.</li> <li>For every section that contains images, the first image will be used as the thumbnail if the heading is referenced from the application.</li> </ol> <p> Note: The repo name in the images below is blurred out, you should work against the GeoSight-OS repository when following these notes.</p> <p> Additionally read the text part of the instructions, do not just use the images as pictorial instructions!</p>"},{"location":"developer/documentation/#contributing-to-the-documentation","title":"Contributing to the documentation","text":"<p>To start adding to the documentation navigate to the home page of the repository.</p> <p>Once on the repository home page, click on Fork 1\ufe0f\u20e3</p> <p></p> <p>On the next page, make sure your github account is selected as the owner 1\ufe0f\u20e3 and make sure the \"Copy the <code>main</code> branch only\" option 2\ufe0f\u20e3 is ticked as you will only need the main branch.</p> <p></p> <p>Once you have forked the repository, ensure that you are working in the main branch.</p> <p></p> <p>Once you are in your fork of the repository, click on <code>.</code> on your keyboard. This will open a web editor where you can begin adding to, or editing, the documentation. The screen below should appear until the editor loads.</p> <p></p> <p>Once the editor loads, you will be greeted by a preview of the project's README.txt 1\ufe0f\u20e3. Click on the <code>docs</code> folder 2\ufe0f\u20e3 in the menu on the left, this will expand the folder. To confirm that you are working in the right branch it will say <code>main</code> 3\ufe0f\u20e3\ufe0f in the bottom left of the editor. Also ensure that you are in the <code>Explorer</code> tab 4\ufe0f\u20e3 of the web editor.</p> <p></p> <p>Once you have expanded the <code>docs</code> folder, click on the <code>src</code> folder 1\ufe0f\u20e3. All subfolders within the <code>src</code> folder contain the files that become the documentation. Each subfolder contains an <code>index.md</code> file that is required for the building of the documentation and static site. If you add a new subfolder into any folder it must also contain a populated <code>index.md</code> file, this will be further explained in the Creating new files section.</p> <p></p> <p>Once you have chosen which section of documentation you would like to edit (e.g. user/guide/index.md), click on the file and it will open in the web editor.</p> <p></p> <p>Once you have the file open, you can start adding to the documentation using Markdown syntax. If you need to add images to your documentation, add them to the relative <code>img</code> subfolders following the naming conventions set out in the <code>naming-convention.README</code> within the <code>img</code> subfolders (e.g. images for the User Guide would be added to the <code>user/guide/img/</code> subfolder 1\ufe0f\u20e3). Adding images is explained further in the Uploading images / media section further down the page.</p> <p></p> <p>Hint: You can click on the <code>naming-convention.README</code> file to view it and, in turn, read the image naming conventions. Just remember to switch back to the document that you are working on!</p> <p>When you have completed making additions to (or editing) the documentation, click on the source control tab 1\ufe0f\u20e3, then click on the <code>plus</code> symbol 2\ufe0f\u20e3 next to the changes you are finished with to stage them, add a commit message 3\ufe0f\u20e3\ufe0f that is associated with the work you have done, and then click on <code>Commit &amp; Push</code> 4\ufe0f\u20e3.</p> <p></p> <p>Once you have committed your changes, Click on the burger menu 1\ufe0f\u20e3 and then click on <code>Go To Repository</code> 2\ufe0f\u20e3.</p> <p></p> <p>Your fork of the repository will be opened in a new tab within your browser, navigate to that tab (your browser might block pop ups, so you might need to manually open the pop up to get back to your fork of the repository). Once there, ensure you are on the <code>main</code> branch 1\ufe0f\u20e3 (you should see how many commits ahead of the upstream branch you are), then click on <code>Contribute</code> 2\ufe0f\u20e3 -&gt; <code>Open pull request</code> 3\ufe0f\u20e3\ufe0f.</p> <p></p> <p>On the next screen, give your pull request a meaningful title 1\ufe0f\u20e3, give additional details regarding changes made in the larger text box 2\ufe0f\u20e3, then click on <code>Create pull request</code> 3\ufe0f\u20e3\ufe0f. Also ensure you are creating a pull request to the upstream <code>main</code> branch from your <code>main</code> branch.</p> <p></p> <p>Once your pull request is opened you need to wait for it to be merged before you can open a new one.</p>"},{"location":"developer/documentation/#creating-new-files","title":"Creating new files","text":"<p>Open the Web Editor by clicking on <code>.</code> on your keyboard when you are on your fork of the repository. The screen below should appear until the editor loads.</p> <p></p> <p>Navigate to the relative subfolder within the <code>src</code> folder to which you would like to add a new file. (e.g. <code>src</code> -&gt; <code>user</code> -&gt; <code>manual</code>). Also ensure that you are in the <code>Explorer</code> tab 1\ufe0f\u20e3 of the web editor.</p> <p></p> <p>Once you have selected a subfolder, click on the <code>New File...</code> button 1\ufe0f\u20e3 to the right of the repository name.</p> <p></p> <p>Give your file a meaningful name (following the File naming conventions from above) and end the file name with <code>.md</code> to ensure that the file is saved as a markdown file. Once you have given your file a name, click <code>Enter</code> on your keyboard to finish creating it.</p> <p></p> <p>Once you have created a new file, you can start adding to the documentation using Markdown syntax. You must add a header section to each new file! Please read the Page metadata section below regarding adding the standard header to new files.</p> <p></p> <p>If you need to add images to your documentation, add them to the relative <code>img</code> subfolders following the naming conventions set out in the <code>naming-convention.README</code> within the <code>img</code> subfolders (e.g. images for the User Guide would be added to the <code>user/guide/img/</code> subfolder 1\ufe0f\u20e3). Adding images is explained further in the Uploading images / media section further down the page.</p> <p></p> <p>Hint: You can click on the <code>naming-convention.README</code> file to view it and, in turn, read the image naming conventions. Just remember to switch back to the document that you are working on.</p> <p>When you have completed making additions to (or editing) the documentation, click on the source control tab 1\ufe0f\u20e3, then click on the <code>plus</code> symbol 2\ufe0f\u20e3 next to the changes you are finished with to stage them, add a commit message 3\ufe0f\u20e3\ufe0f that is associated with the work you have done, and the click on <code>Commit &amp; Push</code> 4\ufe0f\u20e3.</p> <p></p> <p>Once you have committed your changes, Click on the burger menu 1\ufe0f\u20e3 and then click on <code>Go To Repository</code> 2\ufe0f\u20e3.</p> <p></p> <p>Your fork of the repository will be opened in a new tab within your browser, navigate to that tab (your browser might block pop ups, so you might need to manually open the pop up to get back to your fork of the repository). Once there, ensure you are on the <code>main</code> branch 1\ufe0f\u20e3 (you should see how many commits ahead of the upstream branch you are), then click on <code>Contribute</code> 2\ufe0f\u20e3 -&gt; <code>Open pull request</code> 3\ufe0f\u20e3\ufe0f.</p> <p></p> <p>On the next screen, give your pull request a meaningful title 1\ufe0f\u20e3, give additional details regarding changes made in the larger text box 2\ufe0f\u20e3, then click on <code>Create pull request</code> 3\ufe0f\u20e3\ufe0f. Also ensure you are creating a pull request to the upstream <code>main</code> branch from your <code>main</code> branch.</p> <p></p> <p>Once your pull request is opened you need to wait for it to be merged before you can open a new one.</p>"},{"location":"developer/documentation/#page-metadata","title":"Page metadata","text":"<p>Whenever you create a new file, you should add the standard header (below) to the top of the file: Note: You need to copy the entire header including the <code>---</code> at the top and bottom of the header</p> <pre><code>---\ntitle: IDS SAWPS\nsummary: The SANBI Wildlife Protection System is a platform to track the population levels of endangered wildlife.\n    - Tim Sutton\n    - Amy Ternent\ndate: 30-08-2023\nsome_url: https://github.com/kartoza/sawps/\ncopyright: Copyright 2023, SANBI\ncontact: PROJECT_CONTACT\nlicense: This program is free software; you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation; either version 3 of the License, or (at your option) any later version.\n#context_id: 1234\n---\n</code></pre> <p>The easiest way to add the standard header to your file is to highlight the entire header (above), and then press <code>ctrl</code> and <code>c</code> on your keyboard. Navigate to your file in the web editor, then click in the top of your file and press <code>ctrl</code> and <code>v</code> on your keyboard.</p> <p>The summary can be updated to include your name for documents you contribute to.</p> <p>The context_id is used to create a unique permalink to this document, and is optional. See further down in this document for more details.</p>"},{"location":"developer/documentation/#navigation","title":"Navigation","text":"<p> You need to have read through the mkdocs documentation to understand this section entirely.</p> <p>All pages need to be added to the <code>nav</code> section of the <code>mkdocs-base.yml</code> file. This will ensure that it is available in the menus and that mkdocs renders without errors. For example, if you wish to add a new page to the User Guide area, in <code>nav</code> you would add a line like this:</p> <p><code>- Navigating the map: user/guide/map-navigation.md</code></p> <p>Sometimes you may not wish to have the new page displayed in the menu system this can be useful when, for example, it is accessed via a link in another page. In these cases, leave the menu entry part blank e.g.</p> <p><code>- \"\": user/guide/map-navigation.md</code></p> <p>Mkdocs will still generate the page but it will not be added to the menu.</p>"},{"location":"developer/documentation/#editing-the-nav-section","title":"Editing the 'nav' section","text":"<p>Once you have created a new file (e.g. <code>user/manual/example-file.md</code> 1\ufe0f\u20e3), you will need to add it to the site navigation.</p> <p></p> <p>To edit the site navigation, click on <code>docs/mkdocs-base.yml</code> 1\ufe0f\u20e3.</p> <p></p> <p>In the <code>mkdocs-base.yml</code>, scroll down to the <code>nav</code> section and add the file path to the relevant section. E.g. <code>user/manual/example-file.md</code> would be added to Users -&gt; Manual as <code>- Example file: user/manual/example-file.md</code> 1\ufe0f\u20e3. Ensure your added page has the correction indentation in the <code>nav</code> section, otherwise the site will not build.</p> <p></p> <p>If you have added a page but do not want it to show up in the site navigation, then instead of a page name just put <code>\"\"</code>. E.g. <code>- \"\": user/manual/example-file.md</code> 1\ufe0f\u20e3.</p> <p></p>"},{"location":"developer/documentation/#uploading-images-media","title":"Uploading images / media","text":"<p>Note: If you wish to upload a gif, or a small video, you can follow the same steps as below (GitHub does limit the upload size to 10 MB).</p> <p>All folders and subfolders should contain an <code>img</code> subfolder (e.g. <code>user/guide/img/</code>) containing a <code>naming-convention.README</code>. If you add a new folder, then you should add a new <code>img</code> subfolder and copy a <code>naming-convention.README</code> from another existing <code>img</code> subfolder into your newly created folder.</p> <p></p> <p>To upload an image, right-click on the relative <code>img</code> subfolder and select <code>upload</code> from the menu that appears.</p> <p></p> <p>Select an image from your computer, using the file explore that opens, and then click on the <code>Open</code> Button 1\ufe0f\u20e3 (The attached screenshot is from a Linux machine however, Windows also has an open button).</p> <p></p> <p>If your image does not follow the naming conventions, right-click on the image, click on <code>Rename...</code> on the menu that appears, and then give your image an appropriate name.</p> <p></p> <p>Useful tools for capturing images and screencasts are: Peek (For screencasts), Flameshot (For images), Shutter (For images), and Lightshot (For images)</p>"},{"location":"developer/documentation/#technical-notes","title":"Technical notes","text":""},{"location":"developer/documentation/#working-locally","title":"Working locally","text":"<p>If you want to work with the documentation locally (i.e. directly on your PC), you need to follow this general process:</p> <ol> <li>Install python</li> <li>Install pip</li> <li>Install the python modules listed in docs/requirements.txt</li> <li>If you are on Linux or macOS, open the docs directory in a shell and run <code>build-docs-html.sh</code></li> <li>In the docs directory, run <code>mkdocs serve</code></li> <li>Open your web browser at https://localhost:8000 to view the rendered docs.</li> </ol> <p>Note that <code>mkdocs serve</code> will dynamically re-render the docs any time you make a change. The process above is illustrated in the diagram below:</p> <p></p>"},{"location":"developer/documentation/#hooks","title":"Hooks","text":"<p>We implement two hooks (plugins for mkdocs that are invoked during the docs rendering process).</p> <ul> <li>uuid_redirects_hook.py - this is used to handle page redirects from a uuid - see below for more details</li> <li>python_manual_hook.py - this is used to auto-generate the reference guide for the python modules, classes and functions that make up the code base for this project.</li> </ul>"},{"location":"developer/documentation/#permalinks-for-user-and-admin-docs","title":"Permalinks for user and admin docs","text":"<p>If you are a developer, you should be aware of the workflow for creating user and administrator documentation for each page you create.</p> <p>Every page should have a help link on it that leads to the appropriate manual page. The workflow for doing this is:</p> <ol> <li>Generate a new page UUID using the provided python utility e.g. <code>./create-uuid.py</code></li> <li>Create a new page in the appropriate manual section e.g. <code>docs/src/user/manual/login.md</code></li> <li>In the metadata section at the top of the page, add the context id e.g. <code>context_id: V4cVEFd2TmwYJVb5HvWRwa</code></li> <li>In your django view, set up your help button to point to the site url and your context id. e.g. <code>https://siteurl/V4cVEFd2TmwYJVb5HvWRwa</code></li> </ol> <p>Whenever the user visits the page using the UUID URL, they will be redirected to the correct page e.g. <code>https://siteurl/login/</code>. This system protects us from file renaming and reorganising on the site, and ensures that the help link will always remain valid.</p>"},{"location":"developer/documentation/#generating-pdfs","title":"Generating PDFS","text":"<p>To generate PDFS, <code>cd</code> into <code>GEOSIGHT-OS/docs</code> and then run the <code>build-docs-pdf</code> in a local terminal</p>"},{"location":"developer/documentation/#generating-static-site","title":"Generating static site","text":"<p>To generate HTML, <code>cd</code> into <code>GEOSIGHT-OS/docs</code> and then run the <code>build-docs-html</code> in a local terminal. You can then run <code>mkdocs serve</code> to generate the static site on your local host, if there is a port conflict you can specify the port using the <code>-a</code> flag e.g <code>mkdocs serve -a 127.0.0.1:8001</code>.</p>"},{"location":"developer/guide/","title":"SAWPS","text":""},{"location":"developer/guide/architecture/","title":"System Architecture","text":""},{"location":"developer/guide/architecture/#frameworks-used","title":"Frameworks Used","text":""},{"location":"developer/guide/architecture/#high-level-system-architecture","title":"High-level System Architecture","text":""},{"location":"developer/guide/architecture/#data-model","title":"Data Model","text":"<p>The project's ERD can be found here</p>"},{"location":"developer/guide/building/","title":"Building/Compiling the Code","text":""},{"location":"developer/guide/cloning/","title":"Checking out the Code","text":""},{"location":"developer/guide/cloning/#getting-source-code","title":"\ud83d\udc69\u200d\ud83d\udcbb Getting source code","text":"<pre><code>git clone https://github.com/kartoza/sawps.git\n</code></pre>"},{"location":"developer/guide/configuration/","title":"Project Setup","text":""},{"location":"developer/guide/configuration/#clone-geosight-repository","title":"Clone GeoSight repository","text":"<p>This will clone the SAWPS repository to your machine</p> <pre><code>git clone https://github.com/kartoza/sawps.git\n</code></pre>"},{"location":"developer/guide/design/","title":"Design","text":""},{"location":"developer/guide/design/#design-sheet","title":"Design Sheet","text":""},{"location":"developer/guide/design/#wire-frame-model","title":"Wire-frame Model","text":"<p>The wire frame model for the project can be found on the Figma Board.</p>"},{"location":"developer/guide/ide-setup/","title":"IDE Setup","text":""},{"location":"developer/guide/ide-setup/#setting-up-a-dev-env","title":"Setting up a dev env","text":"<p>Please follow the Kartoza coding standards.</p>"},{"location":"developer/guide/ide-setup/#how-to-run-project-with-visual-studio-code","title":"\ud83c\udfc3\u200d\u2642\ufe0f How To Run Project with Visual Studio Code","text":"<p>Copy and customize environnment file: Create a copy of the <code>deployment/.template.env</code> file and name it <code>deployment/.env</code>. Update the <code>deployment/.env</code> file with your project-specific settings. </p> <p>Ensure Dev Containers extension is installed </p> <p>Build and open project in devcontainer: press <code>Cmd+Shift+P</code> (macOS) or <code>Ctrl+Shift+P</code> (Windows/Linux) to open the Command Palette. Type <code>Dev Containers: Rebuild and Reopen in Container</code> and select it to reopen the folder inside the devcontainer. </p> <p>Change the permissions of the django_project folder:</p> <pre><code>chmod -R a+rw django_project\n</code></pre> <p>Install dependencies inside the container: Press <code>Cmd+Shift+P</code> (macOS) or <code>Ctrl+Shift+P</code> (Windows/Linux), type <code>Tasks: Run Tasks</code> and select it. Choose <code>React: Install dependencies</code> to install the necessary dependencies.</p> <p></p> <p></p> <p>Run the migrations inside the container: Press <code>Cmd+Shift+P</code> (macOS) or <code>Ctrl+Shift+P</code> (Windows/Linux), type <code>Tasks: Run Tasks</code> and select it. Choose <code>Django: Migrate</code>.</p> <p></p> <p></p>"},{"location":"developer/guide/ide-setup/#open-the-developer-site","title":"\ud83d\udc69\u200d\ud83d\udcbb Open the developer site","text":"<p>Run the project inside the container: Press <code>Cmd+Shift+D</code> (macOS) or <code>Ctrl+Shift+D</code> (Windows/Linux), choose <code>Django+React</code> in the RUN AND DEBUG dropdown.</p> <p></p> <p>Review the list of forwarded ports from the container to your local host:</p> <p></p> <p>Open your web browser and go to localhost:8000 to view the running application.</p>"},{"location":"developer/guide/ide-setup/#create-a-super-user","title":"\ud83d\udc69\u200d\ud83c\udfed Create a super user","text":""},{"location":"developer/guide/ide-setup/#restoring-layer-schema-for-map","title":"\ud83d\udcbd Restoring layer schema for map","text":"<p>The full dump file for layer schema is ~5.3GB, meanwhile compact dump file is only 24MB.</p> <p>Download Full Dump File for Layer.</p> <p>Download Compact Dump File for Layer.</p> <p>Preview for compact dump file: </p> <p>Copy the dump file to db container. Then run pg_restore from inside db container to restore the dump file.</p> <pre><code>docker cp sanbi_layer_db_compact.dump deployment-db-1:/home/sanbi_layer_db_compact.dump\ndocker exec -it deployment-db-1 /bin/bash\ncd /home\npg_restore -h 127.0.0.1 -U docker -d django -n layer sanbi_layer_db_compact.dump\n</code></pre>"},{"location":"developer/guide/prerequisites/","title":"Project Prerequisites","text":"<ul> <li>This Project utilises VSCode as the preferred IDE. Please refer to the IDE Setup documentation for more information.</li> <li>Ensure you have cloned the code from the repository. Please refer to the Cloning documentation for more information.</li> </ul>"},{"location":"developer/guide/workflows/","title":"Developer Workflows","text":""},{"location":"developer/guide/workflows/#adding-a-feature","title":"Adding a Feature","text":"<ul> <li>Create an Issue</li> <li>Wait for it to be added to a Sprint</li> <li>Functional Tests</li> <li>Playwright Tests</li> <li>Write end user documentation</li> </ul>"},{"location":"developer/guide/workflows/#fixing-a-bug","title":"Fixing a Bug","text":"<ul> <li>Claim an Issue</li> <li>Wait for it to be added to a Sprint</li> <li>Regression Test</li> <li>Implement Fix</li> </ul>"},{"location":"developer/guide/workflows/#make-pr-for-featurebug-fix","title":"Make PR for Feature/Bug Fix","text":""},{"location":"developer/guide/workflows/#committing-to-project","title":"Committing To Project","text":"<p>Follow our commit message conventions.</p>"},{"location":"developer/guide/workflows/#pull-request-template","title":"Pull Request Template","text":"<p>If it has related issues, add links to the issues(like <code>#123</code>) in the description. Fill in the Pull Request Template by check your case.</p>"},{"location":"developer/guide/templates/commit-message-convention/","title":"Commit Message Convention","text":""},{"location":"developer/guide/templates/pull-request-template/","title":"Pull Request Template","text":""},{"location":"developer/manual/","title":"Developer Manual","text":""},{"location":"developer/manual/activity/","title":"Admin","text":"<p>Admin for activity package.</p>"},{"location":"developer/manual/activity/#factories","title":"Factories","text":"<p>Test factories for activity package.</p>"},{"location":"developer/manual/activity/#django_project.activity.factories.ActivityTypeFactory","title":"ActivityTypeFactory","text":"<p>             Bases: <code>DjangoModelFactory</code></p> <p>Factory class for activity type models.</p>"},{"location":"developer/manual/activity/#django_project.activity.factories.generate_unique_name","title":"generate_unique_name","text":"<pre><code>generate_unique_name(activity_list)\n</code></pre> <p>Return activity name</p> Source code in <code>django_project/activity/factories.py</code> <pre><code>def generate_unique_name(activity_list) -&gt; str:\n\"\"\"Return activity name\"\"\"\nwhile True:\nname = random.choice(activity_list)\nif not ActivityType.objects.filter(name=name).exists():\nreturn name\n</code></pre>"},{"location":"developer/manual/activity/#models","title":"Models","text":"<p>Models for activity package.</p>"},{"location":"developer/manual/activity/#django_project.activity.models.ActivityType","title":"ActivityType","text":"<p>             Bases: <code>Model</code></p> <p>activity type model</p>"},{"location":"developer/manual/activity/#serializers","title":"Serializers","text":"<p>Serializers for activity package.</p>"},{"location":"developer/manual/activity/#django_project.activity.serializers.ActivityTypeSerializer","title":"ActivityTypeSerializer","text":"<pre><code>ActivityTypeSerializer(*args, **kwargs)\n</code></pre> <p>             Bases: <code>ModelSerializer</code></p> <p>Survey Method Serializer</p> Source code in <code>django_project/activity/serializers.py</code> <pre><code>def __init__(self, *args, **kwargs):\nremove_fields = kwargs.pop('remove_fields', None)\nsuper(ActivityTypeSerializer, self).__init__(*args, **kwargs)\nif remove_fields:\nfor field_name in remove_fields:\nself.fields.pop(field_name)\n</code></pre>"},{"location":"developer/manual/activity/#test-case","title":"Test Case","text":"<p>Test case for activity models.</p>"},{"location":"developer/manual/activity/#django_project.activity.tests.ActivityTypeTestCase","title":"ActivityTypeTestCase","text":"<p>             Bases: <code>TestCase</code></p> <p>unit tests for ActivityType model</p>"},{"location":"developer/manual/activity/#django_project.activity.tests.ActivityTypeTestCase.setUp","title":"setUp","text":"<pre><code>setUp()\n</code></pre> <p>setup test data</p> Source code in <code>django_project/activity/tests.py</code> <pre><code>def setUp(self) -&gt; None:\n\"\"\"setup test data\"\"\"\nself.activity_type = ActivityTypeFactory()\n</code></pre>"},{"location":"developer/manual/activity/#django_project.activity.tests.ActivityTypeTestCase.test_activity_type_create","title":"test_activity_type_create","text":"<pre><code>test_activity_type_create()\n</code></pre> <p>test activity type create</p> Source code in <code>django_project/activity/tests.py</code> <pre><code>def test_activity_type_create(self):\n\"\"\"test activity type create\"\"\"\nself.assertEqual(self.activity_type.recruitment, True)\nself.assertEqual(ActivityType.objects.count(), 1)\n</code></pre>"},{"location":"developer/manual/activity/#django_project.activity.tests.ActivityTypeTestCase.test_activity_type_delete","title":"test_activity_type_delete","text":"<pre><code>test_activity_type_delete()\n</code></pre> <p>test activity type delete</p> Source code in <code>django_project/activity/tests.py</code> <pre><code>def test_activity_type_delete(self):\n\"\"\"test activity type delete\"\"\"\nself.activity_type.delete()\nself.assertEqual(ActivityType.objects.count(), 0)\n</code></pre>"},{"location":"developer/manual/activity/#django_project.activity.tests.ActivityTypeTestCase.test_activity_type_update","title":"test_activity_type_update","text":"<pre><code>test_activity_type_update()\n</code></pre> <p>test activity type update</p> Source code in <code>django_project/activity/tests.py</code> <pre><code>def test_activity_type_update(self):\n\"\"\"test activity type update\"\"\"\nself.activity_type.name = 'Planned euthanasia'\nself.activity_type.recruitment = False\nself.activity_type.save()\nself.assertEqual(self.activity_type.name, 'Planned euthanasia')\nself.assertEqual(self.activity_type.recruitment, False)\n</code></pre>"},{"location":"developer/manual/core/","title":"Core","text":""},{"location":"developer/manual/core/#settings","title":"Settings","text":"<p>Django settings for kartoza django project.</p>"},{"location":"developer/manual/core/#asgi","title":"ASGI","text":"<p>ASGI config for core project.</p> <p>It exposes the ASGI callable as a module-level variable named <code>application</code>.</p> <p>For more information on this file, see https://docs.djangoproject.com/en/4.1/howto/deployment/asgi/</p>"},{"location":"developer/manual/core/#celery","title":"CELERY","text":"<p>A celery config for the project.</p>"},{"location":"developer/manual/core/#urls","title":"URLS","text":"<p>Core URL Configuration.</p> <p>The <code>urlpatterns</code> list routes URLs to views. For more information please see:     https://docs.djangoproject.com/en/4.1/topics/http/urls/</p> <p>Examples:</p> <p>Function views</p> <pre><code>1. Add an import:  from my_app import views\n2. Add a URL to urlpatterns:  path('', views.home, name='home')\n</code></pre> <p>Class-based views</p> <pre><code>1. Add an import:  from other_app.views import Home\n2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')\n</code></pre> <p>Including another URLconf</p> <pre><code>1. Import the include() function: from django.urls import include, path\n2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))\n</code></pre>"},{"location":"developer/manual/core/#wsgi","title":"WSGI","text":"<p>WSGI config for core project.</p> <p>It exposes the WSGI callable as a module-level variable named <code>application</code>.</p> <p>For more information on this file, see https://docs.djangoproject.com/en/4.1/howto/deployment/wsgi/</p>"},{"location":"developer/manual/frontend/","title":"API Views","text":"<p>API Views related to data table.</p> <p>API Views related to map.</p> <p>API Views related to metrics.</p> <p>API Views related to uploading population data.</p> <p>API Views related to property.</p> <p>API Views for uploading file.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.api_views.data_table.DataTableAPIView","title":"DataTableAPIView","text":"<p>             Bases: <code>APIView</code></p> <p>API view for retrieving data table reports.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.api_views.data_table.DataTableAPIView.get","title":"get","text":"<pre><code>get(request)\n</code></pre> <p>Handle GET request to retrieve data table reports. Params: request (Request) The HTTP request object.</p> Source code in <code>django_project/frontend/api_views/data_table.py</code> <pre><code>def get(self, request) -&gt; Response:\n\"\"\"\n    Handle GET request to retrieve data table reports.\n    Params: request (Request) The HTTP request object.\n    \"\"\"\nqueryset = self.get_queryset()\nid = self.request.user.id\nuser_role = UserProfile.objects.get(user__id=id).user_role_type_id\nif user_role.name in DATA_CONTRIBUTORS:\nreturn Response(data_table_reports(queryset, request))\nelse:\nreturn Response(\"\")\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.api_views.data_table.DataTableAPIView.get_queryset","title":"get_queryset","text":"<pre><code>get_queryset()\n</code></pre> <p>Get the filtered queryset based on user filters.</p> Source code in <code>django_project/frontend/api_views/data_table.py</code> <pre><code>def get_queryset(self) -&gt; QuerySet:\n\"\"\"\n    Get the filtered queryset based on user filters.\n    \"\"\"\norganisation_id = get_current_organisation_id(self.request.user)\nqueryset = Property.objects.filter(\norganisation_id=organisation_id,\nownedspecies__taxon__taxon_rank__name = \"Species\"\n).order_by(\"name\")\nfiltered_queryset = DataContributorsFilter(\nself.request.GET, queryset=queryset\n).qs\nreturn filtered_queryset\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.api_views.map.AerialTile","title":"AerialTile","text":"<p>             Bases: <code>APIView</code></p> <p>Proxy for aerial map.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.api_views.map.AerialTile.get","title":"get","text":"<pre><code>get(*args, **kwargs)\n</code></pre> <p>Retrieve aerial by x, y, z.</p> Source code in <code>django_project/frontend/api_views/map.py</code> <pre><code>def get(self, *args, **kwargs):\n\"\"\"Retrieve aerial by x, y, z.\"\"\"\n# Note: we can cache the tile to storage\nx = kwargs.get('x')\ny = kwargs.get('y')\nz = kwargs.get('z')\nresponse = requests.get(\nf'http://aerial.openstreetmap.org.za/ngi-aerial/{z}/{x}/{y}.jpg'\n)\nif response.status_code != 200:\nraise Http404()\nreturn HttpResponse(\nresponse.content,\ncontent_type=response.headers['Content-Type'])\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.api_views.map.ContextLayerList","title":"ContextLayerList","text":"<p>             Bases: <code>APIView</code></p> <p>Fetch context layers.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.api_views.map.ContextLayerList.get","title":"get","text":"<pre><code>get(*args, **kwargs)\n</code></pre> <p>Retrieve all context layers.</p> Source code in <code>django_project/frontend/api_views/map.py</code> <pre><code>def get(self, *args, **kwargs):\n\"\"\"Retrieve all context layers.\"\"\"\nlayers = ContextLayer.objects.all().order_by('id')\nreturn Response(\nstatus=200,\ndata=ContextLayerSerializer(layers, many=True).data\n)\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.api_views.map.FindParcelByCoord","title":"FindParcelByCoord","text":"<p>             Bases: <code>APIView</code></p> <p>Find parcel that contains coordinate.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.api_views.map.FindParcelByCoord.find_erf","title":"find_erf","text":"<pre><code>find_erf(point)\n</code></pre> <p>Find Erf parcel by point.</p> Source code in <code>django_project/frontend/api_views/map.py</code> <pre><code>def find_erf(self, point: Point):\n\"\"\"Find Erf parcel by point.\"\"\"\nparcel = Erf.objects.filter(geom__contains=point)\nif parcel:\nreturn ErfParcelSerializer(\nparcel.first()\n).data\nreturn None\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.api_views.map.FindParcelByCoord.find_farm_portion","title":"find_farm_portion","text":"<pre><code>find_farm_portion(point)\n</code></pre> <p>Find FarmPortion parcel by point.</p> Source code in <code>django_project/frontend/api_views/map.py</code> <pre><code>def find_farm_portion(self, point: Point):\n\"\"\"Find FarmPortion parcel by point.\"\"\"\nparcel = FarmPortion.objects.filter(geom__contains=point)\nif parcel:\nreturn FarmPortionParcelSerializer(\nparcel.first()\n).data\nreturn None\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.api_views.map.FindParcelByCoord.find_holding","title":"find_holding","text":"<pre><code>find_holding(point)\n</code></pre> <p>Find Holding parcel by point.</p> Source code in <code>django_project/frontend/api_views/map.py</code> <pre><code>def find_holding(self, point: Point):\n\"\"\"Find Holding parcel by point.\"\"\"\nparcel = Holding.objects.filter(geom__contains=point)\nif parcel:\nreturn HoldingParcelSerializer(\nparcel.first()\n).data\nreturn None\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.api_views.map.FindParcelByCoord.find_parent_farm","title":"find_parent_farm","text":"<pre><code>find_parent_farm(point)\n</code></pre> <p>Find ParentFarm parcel by point.</p> Source code in <code>django_project/frontend/api_views/map.py</code> <pre><code>def find_parent_farm(self, point: Point):\n\"\"\"Find ParentFarm parcel by point.\"\"\"\nparcel = ParentFarm.objects.filter(geom__contains=point)\nif parcel:\nreturn ParentFarmParcelSerializer(\nparcel.first()\n).data\nreturn None\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.api_views.map.FindPropertyByCoord","title":"FindPropertyByCoord","text":"<p>             Bases: <code>APIView</code></p> <p>Find property that contains coordinate.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.api_views.map.MapAuthenticate","title":"MapAuthenticate","text":"<p>             Bases: <code>APIView</code></p> <p>Check against the token of user.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.api_views.map.MapAuthenticate.get","title":"get","text":"<pre><code>get(*args, **kwargs)\n</code></pre> <p>Return success 200, so nginx can cache the auth result.</p> Source code in <code>django_project/frontend/api_views/map.py</code> <pre><code>def get(self, *args, **kwargs):\n\"\"\"Return success 200, so nginx can cache the auth result.\"\"\"\ntoken = self.request.query_params.get(\"token\", None)\nif token is None:\nreturn HttpResponseForbidden()\ncache_key = f'map-auth-{token}'\nallowed = cache.get(cache_key)\nif allowed is not None:\nif allowed:\nreturn HttpResponse('OK')\nreturn HttpResponseForbidden()\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.api_views.map.MapStyles","title":"MapStyles","text":"<p>             Bases: <code>APIView</code></p> <p>Fetch map styles.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.api_views.map.MapStyles.get","title":"get","text":"<pre><code>get(*args, **kwargs)\n</code></pre> <p>Retrieve map styles.</p> Source code in <code>django_project/frontend/api_views/map.py</code> <pre><code>def get(self, *args, **kwargs):\n\"\"\"Retrieve map styles.\"\"\"\ntheme = self.request.GET.get('theme', 'light')\nstyles = get_map_template_style(\nself.request,\ntheme_choice=(\n0 if theme == 'light' else 1\n),\ntoken=self.get_token_for_map()\n)\nreturn Response(\nstatus=200,\ndata=styles,\ncontent_type=\"application/json\"\n)\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.api_views.map.PropertiesLayerMVTTiles","title":"PropertiesLayerMVTTiles","text":"<p>             Bases: <code>APIView</code></p> <p>Dynamic Vector Tile for properties layer.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.api_views.metrics.ActivityPercentageAPIView","title":"ActivityPercentageAPIView","text":"<p>             Bases: <code>APIView</code></p> <p>API view to retrieve activity percentage data for species.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.api_views.metrics.ActivityPercentageAPIView.get","title":"get","text":"<pre><code>get(request, *args, **kwargs)\n</code></pre> <p>Handle the GET request to retrieve activity percentage data. Params: request (Request): The HTTP request object.</p> Source code in <code>django_project/frontend/api_views/metrics.py</code> <pre><code>def get(self, request, *args, **kwargs) -&gt; Response:\n\"\"\"\n    Handle the GET request to retrieve activity percentage data.\n    Params: request (Request): The HTTP request object.\n    \"\"\"\nqueryset = self.get_queryset()\nserializer = ActivityMatrixSerializer(\nqueryset, many=True, context={\"request\": request}\n)\nreturn Response(calculate_base_population_of_species(serializer.data))\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.api_views.metrics.ActivityPercentageAPIView.get_queryset","title":"get_queryset","text":"<pre><code>get_queryset()\n</code></pre> <p>Returns a filtered queryset of Taxon objects representing species within the specified organization.</p> Source code in <code>django_project/frontend/api_views/metrics.py</code> <pre><code>def get_queryset(self) -&gt; List[Taxon]:\n\"\"\"\n    Returns a filtered queryset of Taxon objects representing\n    species within the specified organization.\n    \"\"\"\norganisation_id = get_current_organisation_id(self.request.user)\nqueryset = Taxon.objects.filter(\nownedspecies__property__organisation_id=organisation_id,\ntaxon_rank__name='Species'\n).distinct()\nfiltered_queryset = ActivityBaseMetricsFilter(\nself.request.GET, queryset=queryset\n).qs\nreturn filtered_queryset\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.api_views.metrics.PopulationPerAgeGroupAPIView","title":"PopulationPerAgeGroupAPIView","text":"<p>             Bases: <code>APIView</code></p> <p>API endpoint to retrieve population of age group.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.api_views.metrics.PopulationPerAgeGroupAPIView.get","title":"get","text":"<pre><code>get(request, *args, **kwargs)\n</code></pre> <p>Handle the GET request to retrieve population of age groups. Params:request (Request): The HTTP request object.</p> Source code in <code>django_project/frontend/api_views/metrics.py</code> <pre><code>def get(self, request, *args, **kwargs) -&gt; Response:\n\"\"\"\n    Handle the GET request to retrieve population of age groups.\n    Params:request (Request): The HTTP request object.\n    \"\"\"\nqueryset = self.get_queryset()\nserializer = PopulationPerAgeGroupSerialiser(\nqueryset, many=True, context={\"request\": request}\n)\nreturn Response(serializer.data)\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.api_views.metrics.PopulationPerAgeGroupAPIView.get_queryset","title":"get_queryset","text":"<pre><code>get_queryset()\n</code></pre> <p>Get the filtered queryset taxon owned by the organization.</p> Source code in <code>django_project/frontend/api_views/metrics.py</code> <pre><code>def get_queryset(self) -&gt; QuerySet[Taxon]:\n\"\"\"\n    Get the filtered queryset taxon owned by the organization.\n    \"\"\"\norganisation_id = get_current_organisation_id(self.request.user)\nqueryset = Taxon.objects.filter(\nownedspecies__property__organisation_id=organisation_id,\ntaxon_rank__name='Species'\n).distinct()\nfiltered_queryset = BaseMetricsFilter(\nself.request.GET, queryset=queryset\n).qs\nreturn filtered_queryset\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.api_views.metrics.PropertiesPerPopulationCategoryAPIView","title":"PropertiesPerPopulationCategoryAPIView","text":"<p>             Bases: <code>APIView</code></p> <p>API endpoint to retrieve population categories for properties within an organization.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.api_views.metrics.PropertiesPerPopulationCategoryAPIView.get","title":"get","text":"<pre><code>get(request, *args, **kwargs)\n</code></pre> <p>Handle GET request to retrieve population categories for properties.</p> Source code in <code>django_project/frontend/api_views/metrics.py</code> <pre><code>def get(self, request, *args, **kwargs) -&gt; Response:\n\"\"\"\n    Handle GET request to retrieve population categories for properties.\n    \"\"\"\nqueryset = self.get_queryset()\nreturn Response(calculate_population_categories(queryset))\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.api_views.metrics.PropertiesPerPopulationCategoryAPIView.get_queryset","title":"get_queryset","text":"<pre><code>get_queryset()\n</code></pre> <p>Get the filtered queryset of properties owned by the organization.</p> Source code in <code>django_project/frontend/api_views/metrics.py</code> <pre><code>def get_queryset(self) -&gt; QuerySet[Property]:\n\"\"\"\n    Get the filtered queryset of properties owned by the organization.\n    \"\"\"\norganisation_id = get_current_organisation_id(self.request.user)\nqueryset = Property.objects.filter(organisation_id=organisation_id)\nfiltered_queryset = PropertyFilter(\nself.request.GET, queryset=queryset\n).qs\nreturn filtered_queryset\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.api_views.metrics.SpeciesPopuationCountPerYearAPIView","title":"SpeciesPopuationCountPerYearAPIView","text":"<p>             Bases: <code>APIView</code></p> <p>An API view to retrieve species population count per year.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.api_views.metrics.SpeciesPopuationCountPerYearAPIView.get","title":"get","text":"<pre><code>get(request, *args, **kwargs)\n</code></pre> <p>Handles HTTP GET requests and returns a serialized JSON response. Params: The HTTP request object containing the user's request data.</p> Source code in <code>django_project/frontend/api_views/metrics.py</code> <pre><code>def get(self, request: HttpRequest, *args, **kwargs) -&gt; Response:\n\"\"\"\n    Handles HTTP GET requests and returns a serialized JSON response.\n    Params: The HTTP request object containing the user's request data.\n    \"\"\"\nqueryset = self.get_queryset()\nserializer = SpeciesPopuationCountPerYearSerializer(\nqueryset, many=True, context={'request': request}\n)\nreturn Response(serializer.data)\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.api_views.metrics.SpeciesPopuationCountPerYearAPIView.get_queryset","title":"get_queryset","text":"<pre><code>get_queryset()\n</code></pre> <p>Returns a filtered queryset of Taxon objects representing species within the specified organization.</p> Source code in <code>django_project/frontend/api_views/metrics.py</code> <pre><code>def get_queryset(self) -&gt; List[Taxon]:\n\"\"\"\n    Returns a filtered queryset of Taxon objects representing\n    species within the specified organization.\n    \"\"\"\norganisation_id = get_current_organisation_id(self.request.user)\nqueryset = Taxon.objects.filter(\nownedspecies__property__organisation_id=organisation_id,\ntaxon_rank__name='Species'\n).distinct()\nfiltered_queryset = BaseMetricsFilter(\nself.request.GET, queryset=queryset\n).qs\nreturn filtered_queryset\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.api_views.metrics.SpeciesPopulationDensityPerPropertyAPIView","title":"SpeciesPopulationDensityPerPropertyAPIView","text":"<p>             Bases: <code>APIView</code></p> <p>API view to retrieve species population density per property.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.api_views.metrics.SpeciesPopulationDensityPerPropertyAPIView.get","title":"get","text":"<pre><code>get(request, *args, **kwargs)\n</code></pre> <p>Handle the GET request to retrieve species population density per property. Params:request (Request): The HTTP request object.</p> Source code in <code>django_project/frontend/api_views/metrics.py</code> <pre><code>def get(self, request, *args, **kwargs) -&gt; Response:\n\"\"\"\n    Handle the GET request to retrieve species\n    population density per property.\n    Params:request (Request): The HTTP request object.\n    \"\"\"\nqueryset = self.get_queryset()\nserializer = SpeciesPopulationDensityPerPropertySerializer(\nqueryset, many=True, context={\"request\": request}\n)\nreturn Response(serializer.data)\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.api_views.metrics.SpeciesPopulationDensityPerPropertyAPIView.get_queryset","title":"get_queryset","text":"<pre><code>get_queryset()\n</code></pre> <p>Returns a filtered queryset of property objects within the specified organization.</p> Source code in <code>django_project/frontend/api_views/metrics.py</code> <pre><code>def get_queryset(self) -&gt; QuerySet[Property]:\n\"\"\"\n    Returns a filtered queryset of property objects\n    within the specified organization.\n    \"\"\"\norganisation_id = get_current_organisation_id(self.request.user)\nqueryset = Property.objects.filter(organisation_id=organisation_id)\nfiltered_queryset = PropertyFilter(\nself.request.GET, queryset=queryset\n).qs\nreturn filtered_queryset.distinct('name')\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.api_views.metrics.TotalAreaAvailableToSpeciesAPIView","title":"TotalAreaAvailableToSpeciesAPIView","text":"<p>             Bases: <code>APIView</code></p> <p>An API view to retrieve total area available to species.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.api_views.metrics.TotalAreaAvailableToSpeciesAPIView.get","title":"get","text":"<pre><code>get(request, *args, **kwargs)\n</code></pre> <p>Retrieve the calculated total area available to species and return it as a Response.</p> Source code in <code>django_project/frontend/api_views/metrics.py</code> <pre><code>def get(self, request: HttpRequest, *args, **kwargs) -&gt; Response:\n\"\"\"\n    Retrieve the calculated total area available to species and\n    return it as a Response.\n    \"\"\"\nqueryset = self.get_queryset()\nreturn Response(calculate_total_area_available_to_species(queryset))\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.api_views.metrics.TotalAreaAvailableToSpeciesAPIView.get_queryset","title":"get_queryset","text":"<pre><code>get_queryset()\n</code></pre> <p>Get the filtered queryset of properties for the current organization.</p> Source code in <code>django_project/frontend/api_views/metrics.py</code> <pre><code>def get_queryset(self) -&gt; QuerySet[Property]:\n\"\"\"\n    Get the filtered queryset of properties for the current organization.\n        \"\"\"\norganisation_id = get_current_organisation_id(self.request.user)\nqueryset = Property.objects.filter(organisation_id=organisation_id)\nfiltered_queryset = PropertyFilter(\nself.request.GET, queryset=queryset\n).qs\nreturn filtered_queryset.distinct('name')\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.api_views.metrics.TotalAreaPerPropertyTypeAPIView","title":"TotalAreaPerPropertyTypeAPIView","text":"<p>             Bases: <code>APIView</code></p> <p>API endpoint to retrieve total area per property type for properties within an organization.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.api_views.metrics.TotalAreaPerPropertyTypeAPIView.get","title":"get","text":"<pre><code>get(request, *args, **kwargs)\n</code></pre> <p>Handle GET request to retrieve total area per property type.</p> Source code in <code>django_project/frontend/api_views/metrics.py</code> <pre><code>def get(self, request, *args, **kwargs) -&gt; Response:\n\"\"\"\n    Handle GET request to retrieve total area per property type.\n    \"\"\"\nqueryset = self.get_queryset()\nreturn Response(calculate_total_area_per_property_type(queryset))\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.api_views.metrics.TotalAreaPerPropertyTypeAPIView.get_queryset","title":"get_queryset","text":"<pre><code>get_queryset()\n</code></pre> <p>Get the filtered queryset of properties owned by the organization.</p> Source code in <code>django_project/frontend/api_views/metrics.py</code> <pre><code>def get_queryset(self) -&gt; QuerySet[Property]:\n\"\"\"\n    Get the filtered queryset of properties owned by the organization.\n    \"\"\"\norganisation_id = get_current_organisation_id(self.request.user)\nqueryset = Property.objects.filter(organisation_id=organisation_id)\nfiltered_queryset = PropertyFilter(\nself.request.GET, queryset=queryset\n).qs\nreturn filtered_queryset\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.api_views.metrics.TotalAreaVSAvailableAreaAPIView","title":"TotalAreaVSAvailableAreaAPIView","text":"<p>             Bases: <code>APIView</code></p> <p>API endpoint to retrieve total area and area available.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.api_views.metrics.TotalAreaVSAvailableAreaAPIView.get","title":"get","text":"<pre><code>get(request, *args, **kwargs)\n</code></pre> <p>Handle GET request to retrieve total area and available area.</p> Source code in <code>django_project/frontend/api_views/metrics.py</code> <pre><code>def get(self, request, *args, **kwargs) -&gt; Response:\n\"\"\"\n    Handle GET request to retrieve total area and available area.\n    \"\"\"\nqueryset = self.get_queryset()\nserializer = TotalAreaVSAvailableAreaSerializer(\nqueryset, many=True, context={\"request\": request}\n)\nreturn Response(serializer.data)\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.api_views.metrics.TotalAreaVSAvailableAreaAPIView.get_queryset","title":"get_queryset","text":"<pre><code>get_queryset()\n</code></pre> <p>Returns a filtered queryset of Taxon objects representing species within the specified organization.</p> Source code in <code>django_project/frontend/api_views/metrics.py</code> <pre><code>def get_queryset(self) -&gt; List[Taxon]:\n\"\"\"\n    Returns a filtered queryset of Taxon objects representing\n    species within the specified organization.\n    \"\"\"\norganisation_id = get_current_organisation_id(self.request.user)\nqueryset = Taxon.objects.filter(\nownedspecies__property__organisation_id=organisation_id,\ntaxon_rank__name='Species'\n).distinct()\nfiltered_queryset = BaseMetricsFilter(\nself.request.GET, queryset=queryset\n).qs\nreturn filtered_queryset\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.api_views.metrics.TotalCountPerActivityAPIView","title":"TotalCountPerActivityAPIView","text":"<p>             Bases: <code>APIView</code></p> <p>API view to retrieve total counts per activity for species.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.api_views.metrics.TotalCountPerActivityAPIView.get","title":"get","text":"<pre><code>get(request, *args, **kwargs)\n</code></pre> <p>Handle the GET request to retrieve total counts per activity data. Params:request (Request): The HTTP request object.</p> Source code in <code>django_project/frontend/api_views/metrics.py</code> <pre><code>def get(self, request, *args, **kwargs) -&gt; Response:\n\"\"\"\n    Handle the GET request to retrieve total counts per activity data.\n    Params:request (Request): The HTTP request object.\n    \"\"\"\nqueryset = self.get_queryset()\nserializer = TotalCountPerActivitySerializer(\nqueryset, many=True, context={\"request\": request}\n)\nreturn Response(serializer.data)\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.api_views.metrics.TotalCountPerActivityAPIView.get_queryset","title":"get_queryset","text":"<pre><code>get_queryset()\n</code></pre> <p>Returns a filtered queryset of Taxon objects representing species within the specified organization.</p> Source code in <code>django_project/frontend/api_views/metrics.py</code> <pre><code>def get_queryset(self) -&gt; List[Taxon]:\n\"\"\"\n    Returns a filtered queryset of Taxon objects representing\n    species within the specified organization.\n    \"\"\"\norganisation_id = get_current_organisation_id(self.request.user)\nqueryset = Taxon.objects.filter(\nownedspecies__property__organisation_id=organisation_id,\ntaxon_rank__name='Species'\n).distinct()\nfiltered_queryset = ActivityBaseMetricsFilter(\nself.request.GET, queryset=queryset\n).qs\nreturn filtered_queryset\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.api_views.population.DraftPopulationUpload","title":"DraftPopulationUpload","text":"<p>             Bases: <code>APIView</code></p> <p>API to fetch draft list and save as draft.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.api_views.population.FetchDraftPopulationUpload","title":"FetchDraftPopulationUpload","text":"<p>             Bases: <code>APIView</code></p> <p>API to fetch draft upload.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.api_views.population.PopulationMetadataList","title":"PopulationMetadataList","text":"<p>             Bases: <code>APIView</code></p> <p>Get metadata for uploading population.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.api_views.population.UploadPopulationAPIVIew","title":"UploadPopulationAPIVIew","text":"<p>             Bases: <code>APIView</code></p> <p>Save new upload of population data.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.api_views.property.CreateNewProperty","title":"CreateNewProperty","text":"<p>             Bases: <code>APIView</code></p> <p>Create new property API.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.api_views.property.PropertyDetail","title":"PropertyDetail","text":"<p>             Bases: <code>APIView</code></p> <p>Fetch property detail.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.api_views.property.PropertyList","title":"PropertyList","text":"<p>             Bases: <code>APIView</code></p> <p>Get properties that current user owns.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.api_views.property.PropertyMetadataList","title":"PropertyMetadataList","text":"<p>             Bases: <code>APIView</code></p> <p>Get metadata for property: type, organisation, province.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.api_views.property.UpdatePropertyBoundaries","title":"UpdatePropertyBoundaries","text":"<p>             Bases: <code>CreateNewProperty</code></p> <p>Update property parcels.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.api_views.property.UpdatePropertyInformation","title":"UpdatePropertyInformation","text":"<p>             Bases: <code>APIView</code></p> <p>Update property information.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.api_views.upload.BoundaryFileList","title":"BoundaryFileList","text":"<p>             Bases: <code>APIView</code></p> <p>Retrieve Uploaded Boundary Files.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.api_views.upload.BoundaryFileRemove","title":"BoundaryFileRemove","text":"<p>             Bases: <code>APIView</code></p> <p>Remove Boundary File.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.api_views.upload.BoundaryFileSearch","title":"BoundaryFileSearch","text":"<p>             Bases: <code>APIView</code></p> <p>Find parcel by boundary files.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.api_views.upload.BoundaryFileSearchStatus","title":"BoundaryFileSearchStatus","text":"<p>             Bases: <code>APIView</code></p> <p>Check status search parcel by boundary files.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.api_views.upload.BoundaryFileUpload","title":"BoundaryFileUpload","text":"<p>             Bases: <code>APIView</code></p> <p>Upload Boundary File.</p>"},{"location":"developer/manual/frontend/#filters","title":"Filters","text":"<p>Filters in Data table.</p> <p>Filters in metrics.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.filters.data_table.DataContributorsFilter","title":"DataContributorsFilter","text":"<p>             Bases: <code>FilterSet</code></p>"},{"location":"developer/manual/frontend/#django_project.frontend.filters.data_table.DataContributorsFilter.filter_property","title":"filter_property","text":"<pre><code>filter_property(queryset, name, value)\n</code></pre> <p>Filter queryset by given property Params:     queryset (QuerySet): The queryset to be filtered.     name (str): The name of the property to filter by.     value (str): A comma-separated list of property IDs.</p> Source code in <code>django_project/frontend/filters/data_table.py</code> <pre><code>def filter_property(self, queryset: QuerySet, name: str, value: str) \\\n    -&gt; QuerySet:\n\"\"\"\n    Filter queryset by given property\n    Params:\n        queryset (QuerySet): The queryset to be filtered.\n        name (str): The name of the property to filter by.\n        value (str): A comma-separated list of property IDs.\n    \"\"\"\nproperty_list = value.split(',')\nreturn queryset.filter(id__in=property_list)\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.filters.metrics.ActivityBaseMetricsFilter","title":"ActivityBaseMetricsFilter","text":"<p>             Bases: <code>BaseMetricsFilter</code></p> <p>Filter the queryset based on the start year and end year of activity data. Params:         queryset (QuerySet): The base queryset of Taxon model.         value (str): The start year of the annual population.         name (str): The name of the field to be filtered (property).</p>"},{"location":"developer/manual/frontend/#django_project.frontend.filters.metrics.BaseMetricsFilter","title":"BaseMetricsFilter","text":"<p>             Bases: <code>FilterSet</code></p> <p>Filter class for metrics based on species, start year, and property.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.filters.metrics.BaseMetricsFilter.filter_property","title":"filter_property","text":"<pre><code>filter_property(queryset, name, value)\n</code></pre> <p>Filter properties based on owned species.</p> <p>Params:     queryset (QuerySet): The base queryset of Taxon model.     value (str): Comma-separated property IDs.     name (str): The name of the field to be filtered (property).</p> Source code in <code>django_project/frontend/filters/metrics.py</code> <pre><code>def filter_property(self, queryset: QuerySet, name: str, value: str) \\\n    -&gt; QuerySet:\n\"\"\"\n    Filter properties based on owned species.\n    Params:\n        queryset (QuerySet): The base queryset of Taxon model.\n        value (str): Comma-separated property IDs.\n        name (str): The name of the field to be filtered (property).\n    \"\"\"\nproperties_list = value.split(',')\nreturn queryset.filter(\nownedspecies__property__id__in=properties_list\n)\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.filters.metrics.BaseMetricsFilter.filter_species","title":"filter_species","text":"<pre><code>filter_species(queryset, name, value)\n</code></pre> <p>Filter species based on common_name_varbatim.</p> <p>Params:     queryset (QuerySet): The base queryset of Taxon model.     value (str): Comma-separated species names.     name (str): The name of the field to be filtered (property).</p> Source code in <code>django_project/frontend/filters/metrics.py</code> <pre><code>def filter_species(self, queryset: QuerySet, name: str, value: str) \\\n    -&gt; QuerySet:\n\"\"\"\n    Filter species based on common_name_varbatim.\n    Params:\n        queryset (QuerySet): The base queryset of Taxon model.\n        value (str): Comma-separated species names.\n        name (str): The name of the field to be filtered (property).\n    \"\"\"\nspecies_list = value.split(',')\nreturn queryset.filter(common_name_varbatim__in=species_list)\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.filters.metrics.BaseMetricsFilter.filter_start_year","title":"filter_start_year","text":"<pre><code>filter_start_year(queryset, name, value)\n</code></pre> <p>Filter annual populations based on range from start_year to end_year.</p> <p>Params:     queryset (QuerySet): The base queryset of Taxon model.     value (str): The start year of the annual population.     name (str): The name of the field to be filtered (property).</p> Source code in <code>django_project/frontend/filters/metrics.py</code> <pre><code>def filter_start_year(self, queryset: QuerySet, name: str, value: str) \\\n    -&gt; QuerySet:\n\"\"\"\n    Filter annual populations based on range from start_year to end_year.\n    Params:\n        queryset (QuerySet): The base queryset of Taxon model.\n        value (str): The start year of the annual population.\n        name (str): The name of the field to be filtered (property).\n    \"\"\"\nstart_year = int(value)\nend_year = int(self.data.get('end_year'))\nreturn queryset.filter(\nownedspecies__annualpopulation__year__range=(\nstart_year,\nend_year\n)\n)\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.filters.metrics.PropertyFilter","title":"PropertyFilter","text":"<p>             Bases: <code>FilterSet</code></p> <p>A custom filter for filtering Property objects based on a comma-separated list of property IDs.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.filters.metrics.PropertyFilter.filter_property","title":"filter_property","text":"<pre><code>filter_property(queryset, name, value)\n</code></pre> <p>Custom filter method to filter properties by their IDs. params:     queryset (QuerySet): The initial queryset of Property objects.     name (str): The name of the field to be filtered (property).     value (str): A comma-separated list of property IDs.</p> Source code in <code>django_project/frontend/filters/metrics.py</code> <pre><code>def filter_property(self, queryset: QuerySet, name: str, value: str) \\\n    -&gt; QuerySet:\n\"\"\"\n    Custom filter method to filter properties by their IDs.\n    params:\n        queryset (QuerySet): The initial queryset of Property objects.\n        name (str): The name of the field to be filtered (property).\n        value (str): A comma-separated list of property IDs.\n    \"\"\"\nproperties_list = value.split(',')\nreturn queryset.filter(id__in=properties_list)\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.filters.metrics.PropertyFilter.filter_start_year","title":"filter_start_year","text":"<pre><code>filter_start_year(queryset, name, value)\n</code></pre> <p>Filter property based on range from start_year to end_year.</p> <p>Params:     queryset (QuerySet): The base queryset of Taxon model.     value (str): The start year of the annual population.     name (str): The name of the field to be filtered (property).</p> Source code in <code>django_project/frontend/filters/metrics.py</code> <pre><code>def filter_start_year(self, queryset: QuerySet, name: str, value: str) \\\n    -&gt; QuerySet:\n\"\"\"\n    Filter property based on range from start_year to end_year.\n    Params:\n        queryset (QuerySet): The base queryset of Taxon model.\n        value (str): The start year of the annual population.\n        name (str): The name of the field to be filtered (property).\n    \"\"\"\nstart_year = int(value)\nend_year = int(self.data.get('end_year'))\nreturn queryset.filter(\nownedspecies__annualpopulation__year__range=(\nstart_year,\nend_year\n)\n)\n</code></pre>"},{"location":"developer/manual/frontend/#models","title":"Models","text":"<p>Base model for task.</p> <p>Classes for searching parcels.</p> <p>Context Layers with mapping table to tegola layers.</p> <p>Cadastral Land Parcel tables.</p> <p>Classes for upload helper.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.models.base_task.BaseTaskRequest","title":"BaseTaskRequest","text":"<p>             Bases: <code>Model</code></p> <p>Abstract class for Base Task Request.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.models.base_task.BaseTaskRequest.Meta","title":"Meta","text":"<p>Meta class for abstract base task request.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.models.base_task.BaseTaskRequest.task_on_started","title":"task_on_started","text":"<pre><code>task_on_started()\n</code></pre> <p>Initialize properties when task is started.</p> Source code in <code>django_project/frontend/models/base_task.py</code> <pre><code>def task_on_started(self):\n\"\"\"Initialize properties when task is started.\"\"\"\nself.status = PROCESSING\nself.started_at = datetime.now()\nself.finished_at = None\nself.progress = 0\nself.progress_text = None\nself.save()\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.models.boundary_search.BoundaryFile","title":"BoundaryFile","text":"<p>             Bases: <code>Model</code></p> <p>Boundary uploaded file.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.models.boundary_search.BoundarySearchRequest","title":"BoundarySearchRequest","text":"<p>             Bases: <code>BaseTaskRequest</code>, <code>Model</code></p> <p>Boundary search request.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.models.context_layer.ContextLayer","title":"ContextLayer","text":"<p>             Bases: <code>Model</code></p> <p>A model for the context layer.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.models.context_layer.ContextLayerLegend","title":"ContextLayerLegend","text":"<p>             Bases: <code>Model</code></p> <p>Legend for context layer.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.models.context_layer.ContextLayerTilingTask","title":"ContextLayerTilingTask","text":"<p>             Bases: <code>Model</code></p> <p>Vector tile status for context layer.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.models.parcels.Erf","title":"Erf","text":"<p>             Bases: <code>ParcelBase</code></p> <p>Erf Urban Parcel.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.models.parcels.Erf.Meta","title":"Meta","text":"<p>Meta class for Erf.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.models.parcels.FarmPortion","title":"FarmPortion","text":"<p>             Bases: <code>ParcelBase</code></p> <p>Farm Portion Rural Parcel.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.models.parcels.FarmPortion.Meta","title":"Meta","text":"<p>Meta class for FarmPortion.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.models.parcels.Holding","title":"Holding","text":"<p>             Bases: <code>ParcelBase</code></p> <p>Holding Semi Urban Parcel.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.models.parcels.Holding.Meta","title":"Meta","text":"<p>Meta class for Holding.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.models.parcels.ParcelBase","title":"ParcelBase","text":"<p>             Bases: <code>Model</code></p> <p>Base Model for Parcel Tables.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.models.parcels.ParcelBase.Meta","title":"Meta","text":"<p>Meta class for ParcelBase.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.models.parcels.ParentFarm","title":"ParentFarm","text":"<p>             Bases: <code>ParcelBase</code></p> <p>ParentFarm Rural Parcel.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.models.parcels.ParentFarm.Meta","title":"Meta","text":"<p>Meta class for ParentFarm.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.models.upload.DraftSpeciesUpload","title":"DraftSpeciesUpload","text":"<p>             Bases: <code>Model</code></p> <p>Store draft of species upload data.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.models.upload.UploadSpeciesCSV","title":"UploadSpeciesCSV","text":"<p>             Bases: <code>Model</code></p> <p>Upload species csv model</p>"},{"location":"developer/manual/frontend/#django_project.frontend.models.upload.UploadSpeciesCSV.Meta","title":"Meta","text":"<p>Metaclass for project.</p>"},{"location":"developer/manual/frontend/#views","title":"Views","text":"<p>View to switch organisation.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.views.about.AboutView","title":"AboutView","text":"<p>             Bases: <code>RegisteredOrganisationBaseView</code></p> <p>AboutView displays the about page by rendering the 'about.html' template.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.views.base_view.RegisteredOrganisationBaseView","title":"RegisteredOrganisationBaseView","text":"<p>             Bases: <code>TemplateView</code></p> <p>Base view to provide organisation context for logged-in users.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.views.base_view.get_user_notifications","title":"get_user_notifications","text":"<pre><code>get_user_notifications(request)\n</code></pre> <p>Method checks if there are new notifications to send the user, these notifications are updated from stakeholder.tasks.</p> Source code in <code>django_project/frontend/views/base_view.py</code> <pre><code>def get_user_notifications(request):\n\"\"\"Method checks if there are new notifications\n    to send the user, these notifications are\n    updated from stakeholder.tasks.\"\"\"\ncurrent_date = datetime.now().date()\nreminders = Reminders.objects.filter(\nuser=request.user.id,  # Use the user ID instead of the object\nstatus=Reminders.PASSED,\nemail_sent=True,\ndate__date=current_date\n)\nnotifications = []\ntry:\nuser_profile = UserProfile.objects.get(user=request.user)\nif not user_profile.received_notif:\nfor reminder in reminders:\nmessages.success(\nrequest,\nreminder.title,\nextra_tags='notification'\n)\nnotifications.append(reminder.title)\nif len(notifications) &gt; 0:\nuser_profile.received_notif = True\nuser_profile.save()\nreturn JsonResponse(\n{\n'status': 'success',\n'user_notifications': notifications\n}\n)\nexcept Exception:\nreturn JsonResponse(\n{\n'status': 'error',\n'user_notifications': []\n}\n)\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.views.contact.ContactUsView","title":"ContactUsView","text":"<p>             Bases: <code>FormView</code></p> <p>ContactView</p>"},{"location":"developer/manual/frontend/#django_project.frontend.views.help.HelpView","title":"HelpView","text":"<p>             Bases: <code>RegisteredOrganisationBaseView</code></p> <p>HelpView displays the help page by rendering the 'help.html' template.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.views.home.HomeView","title":"HomeView","text":"<p>             Bases: <code>RegisteredOrganisationBaseView</code></p> <p>HomeView displays the home page by rendering the 'home.html' template.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.views.map.MapView","title":"MapView","text":"<p>             Bases: <code>LoginRequiredMixin</code>, <code>RegisteredOrganisationBaseView</code></p> <p>MapView displays the map page by rendering the 'map.html' template.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.views.online_form.OnlineFormView","title":"OnlineFormView","text":"<p>             Bases: <code>LoginRequiredMixin</code>, <code>RegisteredOrganisationBaseView</code></p> <p>OnlineFormView displays the page to upload species data.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.views.switch_organisation.switch_organisation","title":"switch_organisation","text":"<pre><code>switch_organisation(request, organisation_id)\n</code></pre> <p>Switch organisation.</p> Source code in <code>django_project/frontend/views/switch_organisation.py</code> <pre><code>@login_required\ndef switch_organisation(request, organisation_id):\n\"\"\"Switch organisation.\"\"\"\norganisation = get_object_or_404(\nOrganisation,\nid=organisation_id\n)\n# Validate if the user can switch organizations\n# only if the user is not a superadmin\nif not request.user.is_superuser:\norganisation_user = OrganisationUser.objects.filter(\nuser=request.user,\norganisation__id=organisation_id\n)\nif not organisation_user.exists():\nreturn HttpResponseForbidden()\n# Update the current organisation in the user's profile\nuser_profile = request.user.user_profile\nuser_profile.current_organisation = organisation\nuser_profile.save()\n# Redirect to the specified 'next' URL\nnext_url = request.GET.get('next', '/')\nreturn HttpResponseRedirect(next_url)\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.views.users.OrganisationUsersView","title":"OrganisationUsersView","text":"<p>             Bases: <code>LoginRequiredMixin</code>, <code>RegisteredOrganisationBaseView</code>, <code>TemplateView</code></p> <p>OrganisationUsersView displays the organisations users page by rendering the 'users.html' template.</p>"},{"location":"developer/manual/frontend/#django_project.frontend.views.users.OrganisationUsersView.extract_substring","title":"extract_substring","text":"<pre><code>extract_substring(string)\n</code></pre> <p>extract search string from search box on frontend</p> Source code in <code>django_project/frontend/views/users.py</code> <pre><code>def extract_substring(self, string):\n'''extract search string from search box on frontend'''\nif len(string) &gt;= 2:\nif '=' in string:\nsubstring = string.split('=')[1]\nreturn substring\nreturn string\n</code></pre>"},{"location":"developer/manual/frontend/#django_project.frontend.views.users.OrganisationUsersView.is_new_invitation","title":"is_new_invitation","text":"<pre><code>is_new_invitation(email, organisation)\n</code></pre> <p>Check if an entry with the given email and organisation already exists. Returns True if exists, False otherwise.</p> Source code in <code>django_project/frontend/views/users.py</code> <pre><code>def is_new_invitation(self, email, organisation):\n\"\"\"\n    Check if an entry with the given email and\n    organisation already exists.\n    Returns True if exists, False otherwise.\n    \"\"\"\ninvitation = OrganisationInvites.objects.filter(\nemail=email,\norganisation_id=organisation\n).first()\nif invitation:\nreturn True\nreturn False\n</code></pre>"},{"location":"developer/manual/notification/","title":"API Views","text":""},{"location":"developer/manual/notification/#admin","title":"Admin","text":""},{"location":"developer/manual/notification/#models","title":"Models","text":""},{"location":"developer/manual/notification/#django_project.notification.models.reminder.Reminder","title":"Reminder","text":"<p>             Bases: <code>Model</code></p> <p>Reminder notification model</p>"},{"location":"developer/manual/notification/#test-case","title":"Test Case","text":""},{"location":"developer/manual/notification/#django_project.notification.tests.test_api_views.TestApiView","title":"TestApiView","text":"<p>             Bases: <code>TestCase</code></p> <p>Test all api view</p>"},{"location":"developer/manual/notification/#django_project.notification.tests.test_api_views.TestApiView.test_get_reminder_api","title":"test_get_reminder_api","text":"<pre><code>test_get_reminder_api()\n</code></pre> <p>Test reminder api</p> Source code in <code>django_project/notification/tests/test_api_views.py</code> <pre><code>@override_settings(DISABLE_2FA=True)\ndef test_get_reminder_api(self):\n\"\"\"Test reminder api\"\"\"\nReminderF.create(\nid=1,\ntitle='Title test 1',\ntext='Reminder text 1',\nstatus='active',\n)\nself.client.login(username=self.user.username, password='password')\npk = '1'\napi_url = '/api/reminder/?reminderId=' + pk\nresponse = self.client.get(api_url)\nself.assertEqual(response.status_code, status.HTTP_200_OK)\nself.assertTrue('id' in response.data)\n</code></pre>"},{"location":"developer/manual/notification/#django_project.notification.tests.test_api_views.TestApiView.test_list_reminders_api","title":"test_list_reminders_api","text":"<pre><code>test_list_reminders_api()\n</code></pre> <p>Test reminder aip</p> Source code in <code>django_project/notification/tests/test_api_views.py</code> <pre><code>@override_settings(DISABLE_2FA=True)\ndef test_list_reminders_api(self):\n\"\"\"Test reminder aip\"\"\"\nReminderF.create(\nid=1,\ntitle='Title test 1',\ntext='Reminder text 1',\nstatus='active',\n)\nReminderF.create(\ntitle='Title test 2',\ntext='Reminder text 2',\nstatus='active',\n)\nself.client.login(username=self.user.username, password='password')\nreminder_status = 'active'\napi_url = '/api/reminders/?status=' + reminder_status\nresponse = self.client.get(api_url)\nself.assertEqual(response.status_code, status.HTTP_200_OK)\nself.assertEqual(len(response.data), 2)\n</code></pre>"},{"location":"developer/manual/notification/#django_project.notification.tests.test_reminder.TestReminder","title":"TestReminder","text":"<p>             Bases: <code>TestCase</code></p> <p>Test for Reminder model</p>"},{"location":"developer/manual/notification/#django_project.notification.tests.test_reminder.TestReminder.setUp","title":"setUp","text":"<pre><code>setUp()\n</code></pre> <p>setup test data</p> Source code in <code>django_project/notification/tests/test_reminder.py</code> <pre><code>def setUp(self) -&gt; None:\n\"\"\"setup test data\"\"\"\nself.reminder = ReminderF(title='title0', text='text0')\n</code></pre>"},{"location":"developer/manual/notification/#django_project.notification.tests.test_reminder.TestReminder.test_create_reminder","title":"test_create_reminder","text":"<pre><code>test_create_reminder()\n</code></pre> <p>test create reminder</p> Source code in <code>django_project/notification/tests/test_reminder.py</code> <pre><code>def test_create_reminder(self):\n\"\"\"test create reminder\"\"\"\nself.assertEqual(self.reminder.title, 'title0')\nself.assertEqual(self.reminder.text, 'text0')\nself.assertEqual(Reminder.objects.count(), 1)\n</code></pre>"},{"location":"developer/manual/notification/#django_project.notification.tests.test_reminder.TestReminder.test_delete_reminder","title":"test_delete_reminder","text":"<pre><code>test_delete_reminder()\n</code></pre> <p>test delete reminder</p> Source code in <code>django_project/notification/tests/test_reminder.py</code> <pre><code>def test_delete_reminder(self):\n\"\"\"test delete reminder\"\"\"\nself.reminder.delete()\nself.assertEqual(Reminder.objects.count(), 0)\n</code></pre>"},{"location":"developer/manual/notification/#django_project.notification.tests.test_reminder.TestReminder.test_update_reminder","title":"test_update_reminder","text":"<pre><code>test_update_reminder()\n</code></pre> <p>test update reminder</p> Source code in <code>django_project/notification/tests/test_reminder.py</code> <pre><code>def test_update_reminder(self):\n\"\"\"test update reminder\"\"\"\nself.reminder.title = 'Test title'\nself.reminder.status = 'draft'\nself.reminder.save()\nself.assertEqual(self.reminder.title, 'Test title')\nself.assertEqual(self.reminder.status, 'draft')\n</code></pre>"},{"location":"developer/manual/occurrence/","title":"Admin","text":"<p>Admin page for Occurrence models.</p>"},{"location":"developer/manual/occurrence/#factories","title":"Factories","text":""},{"location":"developer/manual/occurrence/#django_project.occurrence.factories.SamplingSizeUnitFactory","title":"SamplingSizeUnitFactory","text":"<p>             Bases: <code>DjangoModelFactory</code></p> <p>Sampling size unit factory.</p>"},{"location":"developer/manual/occurrence/#django_project.occurrence.factories.SurveyMethodFactory","title":"SurveyMethodFactory","text":"<p>             Bases: <code>DjangoModelFactory</code></p> <p>Survey method factory.</p>"},{"location":"developer/manual/occurrence/#models","title":"Models","text":""},{"location":"developer/manual/occurrence/#django_project.occurrence.models.SamplingSizeUnit","title":"SamplingSizeUnit","text":"<p>             Bases: <code>Model</code></p> <p>Sampling size unit model.</p>"},{"location":"developer/manual/occurrence/#django_project.occurrence.models.SurveyMethod","title":"SurveyMethod","text":"<p>             Bases: <code>Model</code></p> <p>Survey method model.</p>"},{"location":"developer/manual/occurrence/#test-case","title":"Test Case","text":""},{"location":"developer/manual/occurrence/#django_project.occurrence.test_occurrence_models.SamplingSizeUnitTestCase","title":"SamplingSizeUnitTestCase","text":"<p>             Bases: <code>TestCase</code></p> <p>Sampling size unit testcase.</p>"},{"location":"developer/manual/occurrence/#django_project.occurrence.test_occurrence_models.SamplingSizeUnitTestCase.setUpTestData","title":"setUpTestData  <code>classmethod</code>","text":"<pre><code>setUpTestData()\n</code></pre> <p>Setup test data.</p> Source code in <code>django_project/occurrence/test_occurrence_models.py</code> <pre><code>@classmethod\ndef setUpTestData(cls):\n\"\"\"Setup test data.\"\"\"\ncls.sampling_size_unit = SamplingSizeUnitFactory(unit='cm')\n</code></pre>"},{"location":"developer/manual/occurrence/#django_project.occurrence.test_occurrence_models.SamplingSizeUnitTestCase.test_create_sampling_size_unit","title":"test_create_sampling_size_unit","text":"<pre><code>test_create_sampling_size_unit()\n</code></pre> <p>Test create sampling size unit.</p> Source code in <code>django_project/occurrence/test_occurrence_models.py</code> <pre><code>def test_create_sampling_size_unit(self):\n\"\"\"Test create sampling size unit.\"\"\"\nself.assertTrue(isinstance(self.sampling_size_unit, SamplingSizeUnit))\nself.assertEqual(SamplingSizeUnit.objects.count(), 1)\nself.assertEqual(self.sampling_size_unit.unit, 'cm')\n</code></pre>"},{"location":"developer/manual/occurrence/#django_project.occurrence.test_occurrence_models.SamplingSizeUnitTestCase.test_delete_sampling_size_unit","title":"test_delete_sampling_size_unit","text":"<pre><code>test_delete_sampling_size_unit()\n</code></pre> <p>Test delete sampling size unit.</p> Source code in <code>django_project/occurrence/test_occurrence_models.py</code> <pre><code>def test_delete_sampling_size_unit(self):\n\"\"\"Test delete sampling size unit.\"\"\"\nself.sampling_size_unit.delete()\nself.assertEqual(SamplingSizeUnit.objects.count(), 0)\n</code></pre>"},{"location":"developer/manual/occurrence/#django_project.occurrence.test_occurrence_models.SamplingSizeUnitTestCase.test_sampling_size_unit_unique_unit_constraint","title":"test_sampling_size_unit_unique_unit_constraint","text":"<pre><code>test_sampling_size_unit_unique_unit_constraint()\n</code></pre> <p>Testing unique values for the unit.</p> Source code in <code>django_project/occurrence/test_occurrence_models.py</code> <pre><code>def test_sampling_size_unit_unique_unit_constraint(self):\n\"\"\"Testing unique values for the unit.\"\"\"\nwith self.assertRaises(Exception) as raised:\nSamplingSizeUnitFactory(unit='mm')\nself.assertEqual(raised.exception, IntegrityError)\n</code></pre>"},{"location":"developer/manual/occurrence/#django_project.occurrence.test_occurrence_models.SamplingSizeUnitTestCase.test_update_sampling_size_unit","title":"test_update_sampling_size_unit","text":"<pre><code>test_update_sampling_size_unit()\n</code></pre> <p>Test update sampling size unit.</p> Source code in <code>django_project/occurrence/test_occurrence_models.py</code> <pre><code>def test_update_sampling_size_unit(self):\n\"\"\"Test update sampling size unit.\"\"\"\nself.sampling_size_unit.unit = 'mm'\nself.sampling_size_unit.save()\nself.assertEqual(SamplingSizeUnit.objects.get(id=self.sampling_size_unit.id).unit, 'mm')\n</code></pre>"},{"location":"developer/manual/occurrence/#django_project.occurrence.test_occurrence_models.SurveyMethodTestCase","title":"SurveyMethodTestCase","text":"<p>             Bases: <code>TestCase</code></p> <p>Survey method test case.</p>"},{"location":"developer/manual/occurrence/#django_project.occurrence.test_occurrence_models.SurveyMethodTestCase.setUpTestData","title":"setUpTestData  <code>classmethod</code>","text":"<pre><code>setUpTestData()\n</code></pre> <p>Setup test data.</p> Source code in <code>django_project/occurrence/test_occurrence_models.py</code> <pre><code>@classmethod\ndef setUpTestData(cls):\n\"\"\"Setup test data.\"\"\"\ncls.survey_method = SurveyMethodFactory()\n</code></pre>"},{"location":"developer/manual/occurrence/#django_project.occurrence.test_occurrence_models.SurveyMethodTestCase.test_create_survey_method","title":"test_create_survey_method","text":"<pre><code>test_create_survey_method()\n</code></pre> <p>Test create survey method.</p> Source code in <code>django_project/occurrence/test_occurrence_models.py</code> <pre><code>def test_create_survey_method(self):\n\"\"\"Test create survey method.\"\"\"\nself.assertTrue(\nisinstance(self.survey_method, SurveyMethod)\n)\nself.assertEqual(SurveyMethod.objects.count(), 1)\nself.assertEqual(self.survey_method.name, SurveyMethod.objects.get(id=self.survey_method.id).name)\n</code></pre>"},{"location":"developer/manual/occurrence/#django_project.occurrence.test_occurrence_models.SurveyMethodTestCase.test_delete_survey_method","title":"test_delete_survey_method","text":"<pre><code>test_delete_survey_method()\n</code></pre> <p>Test delete survey method.</p> Source code in <code>django_project/occurrence/test_occurrence_models.py</code> <pre><code>def test_delete_survey_method(self):\n\"\"\"Test delete survey method.\"\"\"\nself.survey_method.delete()\nself.assertEqual(SurveyMethod.objects.count(), 0)\n</code></pre>"},{"location":"developer/manual/occurrence/#django_project.occurrence.test_occurrence_models.SurveyMethodTestCase.test_survey_method_unique_name_constraint","title":"test_survey_method_unique_name_constraint","text":"<pre><code>test_survey_method_unique_name_constraint()\n</code></pre> <p>Test survey method unique name constraint.</p> Source code in <code>django_project/occurrence/test_occurrence_models.py</code> <pre><code>def test_survey_method_unique_name_constraint(self):\n\"\"\"Test survey method unique name constraint.\"\"\"\nwith self.assertRaises(Exception) as raised:\nSurveyMethodFactory(name='survey method 0')\nself.assertEqual(IntegrityError, type(raised.exception))\n</code></pre>"},{"location":"developer/manual/occurrence/#django_project.occurrence.test_occurrence_models.SurveyMethodTestCase.test_survey_method_unique_sort_id_constraint","title":"test_survey_method_unique_sort_id_constraint","text":"<pre><code>test_survey_method_unique_sort_id_constraint()\n</code></pre> <p>Test survey method unique sort id constraint.</p> Source code in <code>django_project/occurrence/test_occurrence_models.py</code> <pre><code>def test_survey_method_unique_sort_id_constraint(self):\n\"\"\"Test survey method unique sort id constraint.\"\"\"\nwith self.assertRaises(Exception) as raised:\nSurveyMethodFactory(sort_id=0)\nself.assertEqual(IntegrityError, type(raised.exception))\n</code></pre>"},{"location":"developer/manual/occurrence/#django_project.occurrence.test_occurrence_models.SurveyMethodTestCase.test_update_survey_method","title":"test_update_survey_method","text":"<pre><code>test_update_survey_method()\n</code></pre> <p>Test update survey method.</p> Source code in <code>django_project/occurrence/test_occurrence_models.py</code> <pre><code>def test_update_survey_method(self):\n\"\"\"Test update survey method.\"\"\"\nself.survey_method.name = 'survey method 1'\nself.survey_method.save()\nself.assertEqual(\nSurveyMethod.objects.get(id=self.survey_method.id).name,\n'survey method 1',\n)\n</code></pre>"},{"location":"developer/manual/population_data/","title":"Admin","text":"<p>Admin for population data package.</p>"},{"location":"developer/manual/population_data/#factories","title":"Factories","text":"<p>Test factories for population data package.</p>"},{"location":"developer/manual/population_data/#django_project.population_data.factories.AnnualPopulationAbstractFactory","title":"AnnualPopulationAbstractFactory","text":"<p>             Bases: <code>DjangoModelFactory</code></p> <p>Population count abstract factory.</p>"},{"location":"developer/manual/population_data/#django_project.population_data.factories.AnnualPopulationF","title":"AnnualPopulationF","text":"<p>             Bases: <code>AnnualPopulationAbstractFactory</code></p> <p>Population count factory.</p>"},{"location":"developer/manual/population_data/#django_project.population_data.factories.AnnualPopulationPerActivityFactory","title":"AnnualPopulationPerActivityFactory","text":"<p>             Bases: <code>AnnualPopulationAbstractFactory</code></p> <p>Population count per activity factory.</p>"},{"location":"developer/manual/population_data/#django_project.population_data.factories.CertaintyF","title":"CertaintyF","text":"<p>             Bases: <code>DjangoModelFactory</code></p> <p>Certainty factory.</p>"},{"location":"developer/manual/population_data/#django_project.population_data.factories.CertaintyF.Meta","title":"Meta","text":"<p>meta</p>"},{"location":"developer/manual/population_data/#django_project.population_data.factories.CountMethodFactory","title":"CountMethodFactory","text":"<p>             Bases: <code>DjangoModelFactory</code></p> <p>Count method factory.</p>"},{"location":"developer/manual/population_data/#django_project.population_data.factories.CountMethodFactory.Meta","title":"Meta","text":"<p>meta</p>"},{"location":"developer/manual/population_data/#django_project.population_data.factories.OpenCloseSystemF","title":"OpenCloseSystemF","text":"<p>             Bases: <code>DjangoModelFactory</code></p> <p>Open Close System factory.</p>"},{"location":"developer/manual/population_data/#django_project.population_data.factories.OpenCloseSystemF.Meta","title":"Meta","text":"<p>meta</p>"},{"location":"developer/manual/population_data/#django_project.population_data.factories.PopulationEstimateCategoryF","title":"PopulationEstimateCategoryF","text":"<p>             Bases: <code>DjangoModelFactory</code></p> <p>Population Status factory.</p>"},{"location":"developer/manual/population_data/#django_project.population_data.factories.PopulationEstimateCategoryF.Meta","title":"Meta","text":"<p>meta</p>"},{"location":"developer/manual/population_data/#django_project.population_data.factories.PopulationStatusF","title":"PopulationStatusF","text":"<p>             Bases: <code>DjangoModelFactory</code></p> <p>Population Status factory.</p>"},{"location":"developer/manual/population_data/#django_project.population_data.factories.PopulationStatusF.Meta","title":"Meta","text":"<p>meta</p>"},{"location":"developer/manual/population_data/#django_project.population_data.factories.SamplingEffortCoverageF","title":"SamplingEffortCoverageF","text":"<p>             Bases: <code>DjangoModelFactory</code></p> <p>SamplingEffortCoverage factory.</p>"},{"location":"developer/manual/population_data/#django_project.population_data.factories.SamplingEffortCoverageF.Meta","title":"Meta","text":"<p>meta</p>"},{"location":"developer/manual/population_data/#models","title":"Models","text":"<p>Models for population data package.</p>"},{"location":"developer/manual/population_data/#django_project.population_data.models.AnnualPopulation","title":"AnnualPopulation","text":"<p>             Bases: <code>AnnualPopulationAbstract</code></p> <p>Population count model.</p>"},{"location":"developer/manual/population_data/#django_project.population_data.models.AnnualPopulationAbstract","title":"AnnualPopulationAbstract","text":"<p>             Bases: <code>Model</code></p> <p>\"Annual Population model.</p>"},{"location":"developer/manual/population_data/#django_project.population_data.models.AnnualPopulationPerActivity","title":"AnnualPopulationPerActivity","text":"<p>             Bases: <code>AnnualPopulationAbstract</code></p> <p>Annual Population per activity model.</p>"},{"location":"developer/manual/population_data/#django_project.population_data.models.Certainty","title":"Certainty","text":"<p>             Bases: <code>Model</code></p> <p>Certainty model.</p>"},{"location":"developer/manual/population_data/#django_project.population_data.models.CountMethod","title":"CountMethod","text":"<p>             Bases: <code>Model</code></p> <p>Count method model.</p>"},{"location":"developer/manual/population_data/#django_project.population_data.models.OpenCloseSystem","title":"OpenCloseSystem","text":"<p>             Bases: <code>Model</code></p> <p>Open Close System model.</p>"},{"location":"developer/manual/population_data/#django_project.population_data.models.PopulationEstimateCategory","title":"PopulationEstimateCategory","text":"<p>             Bases: <code>Model</code></p> <p>Population Estimate Category model.</p>"},{"location":"developer/manual/population_data/#django_project.population_data.models.PopulationStatus","title":"PopulationStatus","text":"<p>             Bases: <code>Model</code></p> <p>Population status model.</p>"},{"location":"developer/manual/population_data/#django_project.population_data.models.SamplingEffortCoverage","title":"SamplingEffortCoverage","text":"<p>             Bases: <code>Model</code></p> <p>Sampling Effort Coverage model.</p>"},{"location":"developer/manual/population_data/#serializers","title":"Serializers","text":"<p>Serializers for population data package.</p>"},{"location":"developer/manual/population_data/#django_project.population_data.serializers.CountMethodSerializer","title":"CountMethodSerializer","text":"<p>             Bases: <code>ModelSerializer</code></p> <p>Count Method Serializer</p>"},{"location":"developer/manual/population_data/#django_project.population_data.serializers.OpenCloseSystemSerializer","title":"OpenCloseSystemSerializer","text":"<p>             Bases: <code>ModelSerializer</code></p> <p>OpenClose System Serializer</p>"},{"location":"developer/manual/population_data/#django_project.population_data.serializers.PopulationEstimateCategorySerializer","title":"PopulationEstimateCategorySerializer","text":"<p>             Bases: <code>ModelSerializer</code></p> <p>PopulationEstimateCategory Serializer</p>"},{"location":"developer/manual/population_data/#django_project.population_data.serializers.PopulationStatusSerializer","title":"PopulationStatusSerializer","text":"<p>             Bases: <code>ModelSerializer</code></p> <p>PopulationStatus Serializer</p>"},{"location":"developer/manual/population_data/#django_project.population_data.serializers.SamplingEffortCoverageSerializer","title":"SamplingEffortCoverageSerializer","text":"<p>             Bases: <code>ModelSerializer</code></p> <p>SamplingEffortCoverage Serializer</p>"},{"location":"developer/manual/population_data/#test-case","title":"Test Case","text":"<p>Test case for population data models.</p>"},{"location":"developer/manual/population_data/#django_project.population_data.test_population_data_models.AnnualPopulationPerActivityTestCase","title":"AnnualPopulationPerActivityTestCase","text":"<p>             Bases: <code>TestCase</code></p> <p>Population count test case.</p>"},{"location":"developer/manual/population_data/#django_project.population_data.test_population_data_models.AnnualPopulationPerActivityTestCase.setUpTestData","title":"setUpTestData  <code>classmethod</code>","text":"<pre><code>setUpTestData()\n</code></pre> <p>SetUpTestData for population count test case.</p> Source code in <code>django_project/population_data/test_population_data_models.py</code> <pre><code>@classmethod\ndef setUpTestData(cls):\n\"\"\"SetUpTestData for population count test case.\"\"\"\ntaxon = Taxon.objects.create(\nscientific_name='taxon_0',\ncommon_name_varbatim='taxon_0',\ncolour_variant=False,\ntaxon_rank=TaxonRankFactory(),\n)\nuser = User.objects.create_user(username='testuser', password='12345')\nowned_species = OwnedSpeciesFactory(taxon=taxon, user=user)\ncls.population_count = AnnualPopulationPerActivityFactory(\nowned_species=owned_species,\nintake_permit='1',\nofftake_permit='1'\n)\n</code></pre>"},{"location":"developer/manual/population_data/#django_project.population_data.test_population_data_models.AnnualPopulationPerActivityTestCase.test_create_population_count","title":"test_create_population_count","text":"<pre><code>test_create_population_count()\n</code></pre> <p>Test create population count.</p> Source code in <code>django_project/population_data/test_population_data_models.py</code> <pre><code>def test_create_population_count(self):\n\"\"\"Test create population count.\"\"\"\nself.assertTrue(\nisinstance(self.population_count, AnnualPopulationPerActivity)\n)\nself.assertTrue(\nAnnualPopulationPerActivity.objects.filter(\nid=self.population_count.id\n).exists()\n)\n</code></pre>"},{"location":"developer/manual/population_data/#django_project.population_data.test_population_data_models.AnnualPopulationPerActivityTestCase.test_delete_population_count","title":"test_delete_population_count","text":"<pre><code>test_delete_population_count()\n</code></pre> <p>Test delete population count.</p> Source code in <code>django_project/population_data/test_population_data_models.py</code> <pre><code>def test_delete_population_count(self):\n\"\"\"Test delete population count.\"\"\"\ninitial_count = AnnualPopulationPerActivity.objects.count()\nself.population_count.delete()\nwith self.assertRaises(AnnualPopulationPerActivity.DoesNotExist):\nAnnualPopulationPerActivity.objects.get(pk=self.population_count.pk)\nself.assertEqual(\nAnnualPopulationPerActivity.objects.count(),\ninitial_count - 1,\nmsg=\"The count of AnnualPopulationPerActivity\"\n\"instances did not decrease by 1 after deletion.\"\n)\n</code></pre>"},{"location":"developer/manual/population_data/#django_project.population_data.test_population_data_models.AnnualPopulationPerActivityTestCase.test_update_population_count","title":"test_update_population_count","text":"<pre><code>test_update_population_count()\n</code></pre> <p>Test update population count.</p> Source code in <code>django_project/population_data/test_population_data_models.py</code> <pre><code>def test_update_population_count(self):\n\"\"\"Test update population count.\"\"\"\nself.population_count.total = 100\nself.population_count.save()\nself.assertEqual(\nAnnualPopulationPerActivity.objects.get(year=self.population_count.year).total, 100\n)\n</code></pre>"},{"location":"developer/manual/population_data/#django_project.population_data.test_population_data_models.AnnualPopulationPerActivityTestCase.test_year_ownedspecies_activity_type_fields_unique_toghter_constraint","title":"test_year_ownedspecies_activity_type_fields_unique_toghter_constraint","text":"<pre><code>test_year_ownedspecies_activity_type_fields_unique_toghter_constraint()\n</code></pre> <p>Test year, ownedspecies and activity_type are unique togther.</p> Source code in <code>django_project/population_data/test_population_data_models.py</code> <pre><code>def test_year_ownedspecies_activity_type_fields_unique_toghter_constraint(self):\n\"\"\"Test year, ownedspecies and activity_type are unique togther.\"\"\"\nwith self.assertRaises(Exception) as raised:\nAnnualPopulationPerActivityFactory(\nowned_species=self.population_count.owned_species,\nyear=self.population_count.year,\nactivity_type=self.population_count.activity_type,\nintake_permit='1',\nofftake_permit='1'\n)\n</code></pre>"},{"location":"developer/manual/population_data/#django_project.population_data.test_population_data_models.CountMethodTestCase","title":"CountMethodTestCase","text":"<p>             Bases: <code>TestCase</code></p> <p>Count method test case.</p>"},{"location":"developer/manual/population_data/#django_project.population_data.test_population_data_models.CountMethodTestCase.setUpTestData","title":"setUpTestData  <code>classmethod</code>","text":"<pre><code>setUpTestData()\n</code></pre> <p>SetupTestData for count method test case.</p> Source code in <code>django_project/population_data/test_population_data_models.py</code> <pre><code>@classmethod\ndef setUpTestData(cls):\n\"\"\"SetupTestData for count method test case.\"\"\"\ncls.count_method = CountMethodFactory(\nname='count method-1'\n)\n</code></pre>"},{"location":"developer/manual/population_data/#django_project.population_data.test_population_data_models.CountMethodTestCase.test_count_method_unique_name_constraint","title":"test_count_method_unique_name_constraint","text":"<pre><code>test_count_method_unique_name_constraint()\n</code></pre> <p>Test count method unique name constraint.</p> Source code in <code>django_project/population_data/test_population_data_models.py</code> <pre><code>def test_count_method_unique_name_constraint(self):\n\"\"\"Test count method unique name constraint.\"\"\"\nwith self.assertRaises(Exception) as raised:\nCountMethodFactory(name='count method-2')\nself.assertEqual(raised.exception, IntegrityError)\n</code></pre>"},{"location":"developer/manual/population_data/#django_project.population_data.test_population_data_models.CountMethodTestCase.test_create_count_method","title":"test_create_count_method","text":"<pre><code>test_create_count_method()\n</code></pre> <p>Test create count method.</p> Source code in <code>django_project/population_data/test_population_data_models.py</code> <pre><code>def test_create_count_method(self):\n\"\"\"Test create count method.\"\"\"\nself.assertTrue(isinstance(self.count_method, CountMethod))\nself.assertEqual(CountMethod.objects.count(), 1)\nself.assertEqual(self.count_method.name, 'count method-1')\n</code></pre>"},{"location":"developer/manual/population_data/#django_project.population_data.test_population_data_models.CountMethodTestCase.test_delete_count_method","title":"test_delete_count_method","text":"<pre><code>test_delete_count_method()\n</code></pre> <p>Test delete count method.</p> Source code in <code>django_project/population_data/test_population_data_models.py</code> <pre><code>def test_delete_count_method(self):\n\"\"\"Test delete count method.\"\"\"\nself.count_method.delete()\nself.assertEqual(CountMethod.objects.count(), 0)\n</code></pre>"},{"location":"developer/manual/population_data/#django_project.population_data.test_population_data_models.CountMethodTestCase.test_update_count_method","title":"test_update_count_method","text":"<pre><code>test_update_count_method()\n</code></pre> <p>Test update count method.</p> Source code in <code>django_project/population_data/test_population_data_models.py</code> <pre><code>def test_update_count_method(self):\n\"\"\"Test update count method.\"\"\"\nself.count_method.name = 'count method-2'\nself.count_method.save()\nself.assertEqual(CountMethod.objects.get(id=self.count_method.id).name, 'count method-2')\n</code></pre>"},{"location":"developer/manual/population_data/#django_project.population_data.test_population_data_models.PopulationCountTestCase","title":"PopulationCountTestCase","text":"<p>             Bases: <code>TestCase</code></p> <p>Population count test case.</p>"},{"location":"developer/manual/population_data/#django_project.population_data.test_population_data_models.PopulationCountTestCase.setUpTestData","title":"setUpTestData  <code>classmethod</code>","text":"<pre><code>setUpTestData()\n</code></pre> <p>SetUpTestData for population count test case.</p> Source code in <code>django_project/population_data/test_population_data_models.py</code> <pre><code>@classmethod\ndef setUpTestData(cls):\n\"\"\"SetUpTestData for population count test case.\"\"\"\ntaxon = TaxonFactory.create(\nscientific_name='taxon_0',\ncommon_name_varbatim='taxon_0',\ncolour_variant=False,\ntaxon_rank=TaxonRankFactory(),\n)\nuser = User.objects.create_user(username='testuser', password='12345')\nowned_species = OwnedSpeciesFactory(taxon=taxon, user=user)\ncls.population_count = AnnualPopulationF(\nowned_species=owned_species,\ntotal = 120,\nadult_male=19,\nadult_female=100\n)\n</code></pre>"},{"location":"developer/manual/population_data/#django_project.population_data.test_population_data_models.PopulationCountTestCase.test_annual_population_total_constraint","title":"test_annual_population_total_constraint","text":"<pre><code>test_annual_population_total_constraint()\n</code></pre> <p>Test update population count.</p> Source code in <code>django_project/population_data/test_population_data_models.py</code> <pre><code>def test_annual_population_total_constraint(self):\n\"\"\"Test update population count.\"\"\"\nself.population_count.total = 110\nwith self.assertRaises(Exception) as raised:\nself.population_count.save()\n</code></pre>"},{"location":"developer/manual/population_data/#django_project.population_data.test_population_data_models.PopulationCountTestCase.test_create_population_count","title":"test_create_population_count","text":"<pre><code>test_create_population_count()\n</code></pre> <p>Test create population count.</p> Source code in <code>django_project/population_data/test_population_data_models.py</code> <pre><code>def test_create_population_count(self):\n\"\"\"Test create population count.\"\"\"\nself.assertTrue(\nisinstance(self.population_count, AnnualPopulation)\n)\nself.assertTrue(\nAnnualPopulation.objects.filter(\nid=self.population_count.id\n).exists()\n)\n</code></pre>"},{"location":"developer/manual/population_data/#django_project.population_data.test_population_data_models.PopulationCountTestCase.test_delete_population_count","title":"test_delete_population_count","text":"<pre><code>test_delete_population_count()\n</code></pre> <p>Test delete population count.</p> Source code in <code>django_project/population_data/test_population_data_models.py</code> <pre><code>def test_delete_population_count(self):\n\"\"\"Test delete population count.\"\"\"\nself.population_count.delete()\nself.assertFalse(\nAnnualPopulation.objects.filter(id=self.population_count.id).exists()\n)\n</code></pre>"},{"location":"developer/manual/population_data/#django_project.population_data.test_population_data_models.PopulationCountTestCase.test_update_population_count","title":"test_update_population_count","text":"<pre><code>test_update_population_count()\n</code></pre> <p>Test update population count.</p> Source code in <code>django_project/population_data/test_population_data_models.py</code> <pre><code>def test_update_population_count(self):\n\"\"\"Test update population count.\"\"\"\nself.population_count.total = 125\nself.population_count.save()\nself.assertEqual(\nAnnualPopulation.objects.get(year=self.population_count.year).total, 125\n)\n</code></pre>"},{"location":"developer/manual/population_data/#django_project.population_data.test_population_data_models.TestCertainty","title":"TestCertainty","text":"<p>             Bases: <code>TestCase</code></p> <p>Test for certainty model.</p>"},{"location":"developer/manual/population_data/#django_project.population_data.test_population_data_models.TestCertainty.setUp","title":"setUp","text":"<pre><code>setUp()\n</code></pre> <p>setup test data</p> Source code in <code>django_project/population_data/test_population_data_models.py</code> <pre><code>def setUp(self) -&gt; None:\n\"\"\"setup test data\"\"\"\nself.Certainty = CertaintyF(name='name', description='text')\n</code></pre>"},{"location":"developer/manual/population_data/#django_project.population_data.test_population_data_models.TestCertainty.test_create_certainty","title":"test_create_certainty","text":"<pre><code>test_create_certainty()\n</code></pre> <p>test create certainty.</p> Source code in <code>django_project/population_data/test_population_data_models.py</code> <pre><code>def test_create_certainty(self):\n\"\"\"test create certainty.\"\"\"\nself.assertEqual(self.Certainty.name, 'name')\nself.assertEqual(self.Certainty.description, 'text')\nself.assertEqual(Certainty.objects.count(), 1)\n</code></pre>"},{"location":"developer/manual/population_data/#django_project.population_data.test_population_data_models.TestCertainty.test_delete_certainty","title":"test_delete_certainty","text":"<pre><code>test_delete_certainty()\n</code></pre> <p>test delete certainty.</p> Source code in <code>django_project/population_data/test_population_data_models.py</code> <pre><code>def test_delete_certainty(self):\n\"\"\"test delete certainty.\"\"\"\nself.Certainty.delete()\nself.assertEqual(Certainty.objects.count(), 0)\n</code></pre>"},{"location":"developer/manual/population_data/#django_project.population_data.test_population_data_models.TestCertainty.test_update_Certainty","title":"test_update_Certainty","text":"<pre><code>test_update_Certainty()\n</code></pre> <p>test update certainty.</p> Source code in <code>django_project/population_data/test_population_data_models.py</code> <pre><code>def test_update_Certainty(self):\n\"\"\"test update certainty.\"\"\"\nself.Certainty.name = 'Certainty'\nself.Certainty.description = 'Certainty description'\nself.Certainty.save()\nself.assertEqual(self.Certainty.name, 'Certainty')\nself.assertEqual(self.Certainty.description, 'Certainty description')\n</code></pre>"},{"location":"developer/manual/population_data/#django_project.population_data.test_population_data_models.TestOpenCloseSystem","title":"TestOpenCloseSystem","text":"<p>             Bases: <code>TestCase</code></p> <p>Test for open close system model.</p>"},{"location":"developer/manual/population_data/#django_project.population_data.test_population_data_models.TestOpenCloseSystem.setUp","title":"setUp","text":"<pre><code>setUp()\n</code></pre> <p>setup test data</p> Source code in <code>django_project/population_data/test_population_data_models.py</code> <pre><code>def setUp(self) -&gt; None:\n\"\"\"setup test data\"\"\"\nself.open_close_sustem = OpenCloseSystemF(name='name')\n</code></pre>"},{"location":"developer/manual/population_data/#django_project.population_data.test_population_data_models.TestOpenCloseSystem.test_create_open_close_system","title":"test_create_open_close_system","text":"<pre><code>test_create_open_close_system()\n</code></pre> <p>test create open close system.</p> Source code in <code>django_project/population_data/test_population_data_models.py</code> <pre><code>def test_create_open_close_system(self):\n\"\"\"test create open close system.\"\"\"\nself.assertEqual(self.open_close_sustem.name, 'name')\nself.assertEqual(OpenCloseSystem.objects.count(), 1)\n</code></pre>"},{"location":"developer/manual/population_data/#django_project.population_data.test_population_data_models.TestOpenCloseSystem.test_delete_open_close_system","title":"test_delete_open_close_system","text":"<pre><code>test_delete_open_close_system()\n</code></pre> <p>test delete open close system.</p> Source code in <code>django_project/population_data/test_population_data_models.py</code> <pre><code>def test_delete_open_close_system(self):\n\"\"\"test delete open close system.\"\"\"\nself.open_close_sustem.delete()\nself.assertEqual(OpenCloseSystem.objects.count(), 0)\n</code></pre>"},{"location":"developer/manual/population_data/#django_project.population_data.test_population_data_models.TestOpenCloseSystem.test_update_open_close_system","title":"test_update_open_close_system","text":"<pre><code>test_update_open_close_system()\n</code></pre> <p>test update open close system.</p> Source code in <code>django_project/population_data/test_population_data_models.py</code> <pre><code>def test_update_open_close_system(self):\n\"\"\"test update open close system.\"\"\"\nself.open_close_sustem.name = 'OpenCloseSystem'\nself.open_close_sustem.save()\nself.assertEqual(self.open_close_sustem.name, 'OpenCloseSystem')\n</code></pre>"},{"location":"developer/manual/population_data/#django_project.population_data.test_population_data_models.TestPopulationEstimateCategory","title":"TestPopulationEstimateCategory","text":"<p>             Bases: <code>TestCase</code></p> <p>Test for population estimate category model.</p>"},{"location":"developer/manual/population_data/#django_project.population_data.test_population_data_models.TestPopulationEstimateCategory.setUp","title":"setUp","text":"<pre><code>setUp()\n</code></pre> <p>setup test data.</p> Source code in <code>django_project/population_data/test_population_data_models.py</code> <pre><code>def setUp(self) -&gt; None:\n\"\"\"setup test data.\"\"\"\nself.population_estimate_category = PopulationEstimateCategoryF(\nname='name'\n)\n</code></pre>"},{"location":"developer/manual/population_data/#django_project.population_data.test_population_data_models.TestPopulationEstimateCategory.test_create_population_estimate","title":"test_create_population_estimate","text":"<pre><code>test_create_population_estimate()\n</code></pre> <p>test create population estimate category.</p> Source code in <code>django_project/population_data/test_population_data_models.py</code> <pre><code>def test_create_population_estimate(self):\n\"\"\"test create population estimate category.\"\"\"\nself.assertEqual(self.population_estimate_category.name, 'name')\nself.assertEqual(str(self.population_estimate_category), 'name')\nself.assertEqual(PopulationEstimateCategory.objects.count(), 1)\n</code></pre>"},{"location":"developer/manual/population_data/#django_project.population_data.test_population_data_models.TestPopulationEstimateCategory.test_delete_population_estimate","title":"test_delete_population_estimate","text":"<pre><code>test_delete_population_estimate()\n</code></pre> <p>test delete population estimate category.</p> Source code in <code>django_project/population_data/test_population_data_models.py</code> <pre><code>def test_delete_population_estimate(self):\n\"\"\"test delete population estimate category.\"\"\"\nself.population_estimate_category.delete()\nself.assertEqual(PopulationEstimateCategory.objects.count(), 0)\n</code></pre>"},{"location":"developer/manual/population_data/#django_project.population_data.test_population_data_models.TestPopulationEstimateCategory.test_population_estimate_name_constraint","title":"test_population_estimate_name_constraint","text":"<pre><code>test_population_estimate_name_constraint()\n</code></pre> <p>Test population estimate category name contraint.</p> Source code in <code>django_project/population_data/test_population_data_models.py</code> <pre><code>def test_population_estimate_name_constraint(self):\n\"\"\"Test population estimate category name contraint.\"\"\"\nanother = PopulationEstimateCategoryF(name='Population estimate')\nself.assertEqual(PopulationEstimateCategory.objects.count(), 2)\nself.assertNotEqual(\nself.population_estimate_category.name,\nanother.name\n)\nwith self.assertRaises(Exception) as raised:\nPopulationEstimateCategoryF(name='name')\n</code></pre>"},{"location":"developer/manual/population_data/#django_project.population_data.test_population_data_models.TestPopulationEstimateCategory.test_update_population_estimate","title":"test_update_population_estimate","text":"<pre><code>test_update_population_estimate()\n</code></pre> <p>test update population estimate category.</p> Source code in <code>django_project/population_data/test_population_data_models.py</code> <pre><code>def test_update_population_estimate(self):\n\"\"\"test update population estimate category.\"\"\"\nself.population_estimate_category.name = 'PopulationEstimateCategory'\nself.population_estimate_category.save()\nself.assertEqual(\nself.population_estimate_category.name,\n'PopulationEstimateCategory'\n)\n</code></pre>"},{"location":"developer/manual/population_data/#django_project.population_data.test_population_data_models.TestPopulationSatatus","title":"TestPopulationSatatus","text":"<p>             Bases: <code>TestCase</code></p> <p>Test for population status model.</p>"},{"location":"developer/manual/population_data/#django_project.population_data.test_population_data_models.TestPopulationSatatus.setUp","title":"setUp","text":"<pre><code>setUp()\n</code></pre> <p>setup test data.</p> Source code in <code>django_project/population_data/test_population_data_models.py</code> <pre><code>def setUp(self) -&gt; None:\n\"\"\"setup test data.\"\"\"\nself.population_status = PopulationStatusF(\nname='name'\n)\n</code></pre>"},{"location":"developer/manual/population_data/#django_project.population_data.test_population_data_models.TestPopulationSatatus.test_create_population_status","title":"test_create_population_status","text":"<pre><code>test_create_population_status()\n</code></pre> <p>test create population status.</p> Source code in <code>django_project/population_data/test_population_data_models.py</code> <pre><code>def test_create_population_status(self):\n\"\"\"test create population status.\"\"\"\nself.assertEqual(self.population_status.name, 'name')\nself.assertEqual(str(self.population_status), 'name')\nself.assertEqual(PopulationStatus.objects.count(), 1)\n</code></pre>"},{"location":"developer/manual/population_data/#django_project.population_data.test_population_data_models.TestPopulationSatatus.test_delete_population_status","title":"test_delete_population_status","text":"<pre><code>test_delete_population_status()\n</code></pre> <p>test delete population status.</p> Source code in <code>django_project/population_data/test_population_data_models.py</code> <pre><code>def test_delete_population_status(self):\n\"\"\"test delete population status.\"\"\"\nself.population_status.delete()\nself.assertEqual(PopulationStatus.objects.count(), 0)\n</code></pre>"},{"location":"developer/manual/population_data/#django_project.population_data.test_population_data_models.TestPopulationSatatus.test_population_status_name_constraint","title":"test_population_status_name_constraint","text":"<pre><code>test_population_status_name_constraint()\n</code></pre> <p>Test population status name contraint.</p> Source code in <code>django_project/population_data/test_population_data_models.py</code> <pre><code>def test_population_status_name_constraint(self):\n\"\"\"Test population status name contraint.\"\"\"\nanother = PopulationStatusF(name='Population Status')\nself.assertEqual(PopulationStatus.objects.count(), 2)\nself.assertNotEqual(self.population_status.name, another.name)\nwith self.assertRaises(Exception) as raised:\nPopulationStatusF(name='name')\n</code></pre>"},{"location":"developer/manual/population_data/#django_project.population_data.test_population_data_models.TestPopulationSatatus.test_update_population_status","title":"test_update_population_status","text":"<pre><code>test_update_population_status()\n</code></pre> <p>test update population status.</p> Source code in <code>django_project/population_data/test_population_data_models.py</code> <pre><code>def test_update_population_status(self):\n\"\"\"test update population status.\"\"\"\nself.population_status.name = 'PopulationSatatus'\nself.population_status.save()\nself.assertEqual(\nself.population_status.name,\n'PopulationSatatus'\n)\n</code></pre>"},{"location":"developer/manual/population_data/#django_project.population_data.test_population_data_models.TestSamplingEffortCoverage","title":"TestSamplingEffortCoverage","text":"<p>             Bases: <code>TestCase</code></p> <p>Test for sampling effort coverage model.</p>"},{"location":"developer/manual/population_data/#django_project.population_data.test_population_data_models.TestSamplingEffortCoverage.setUp","title":"setUp","text":"<pre><code>setUp()\n</code></pre> <p>setup test data.</p> Source code in <code>django_project/population_data/test_population_data_models.py</code> <pre><code>def setUp(self) -&gt; None:\n\"\"\"setup test data.\"\"\"\nself.coverage = SamplingEffortCoverageF(\nname='name'\n)\n</code></pre>"},{"location":"developer/manual/population_data/#django_project.population_data.test_population_data_models.TestSamplingEffortCoverage.test_create_sampling_effort_cov","title":"test_create_sampling_effort_cov","text":"<pre><code>test_create_sampling_effort_cov()\n</code></pre> <p>test create sampling effort coverage.</p> Source code in <code>django_project/population_data/test_population_data_models.py</code> <pre><code>def test_create_sampling_effort_cov(self):\n\"\"\"test create sampling effort coverage.\"\"\"\nself.assertEqual(self.coverage.name, 'name')\nself.assertEqual(str(self.coverage), 'name')\nself.assertEqual(SamplingEffortCoverage.objects.count(), 1)\n</code></pre>"},{"location":"developer/manual/population_data/#django_project.population_data.test_population_data_models.TestSamplingEffortCoverage.test_delete_sampling_effort_cov","title":"test_delete_sampling_effort_cov","text":"<pre><code>test_delete_sampling_effort_cov()\n</code></pre> <p>test delete sampling effort coverage.</p> Source code in <code>django_project/population_data/test_population_data_models.py</code> <pre><code>def test_delete_sampling_effort_cov(self):\n\"\"\"test delete sampling effort coverage.\"\"\"\nself.coverage.delete()\nself.assertEqual(SamplingEffortCoverage.objects.count(), 0)\n</code></pre>"},{"location":"developer/manual/population_data/#django_project.population_data.test_population_data_models.TestSamplingEffortCoverage.test_sampling_effort_cov_name_constraint","title":"test_sampling_effort_cov_name_constraint","text":"<pre><code>test_sampling_effort_cov_name_constraint()\n</code></pre> <p>Test sampling effort coverage name contraint.</p> Source code in <code>django_project/population_data/test_population_data_models.py</code> <pre><code>def test_sampling_effort_cov_name_constraint(self):\n\"\"\"Test sampling effort coverage name contraint.\"\"\"\nanother = SamplingEffortCoverageF(name='Coverage2')\nself.assertEqual(SamplingEffortCoverage.objects.count(), 2)\nself.assertNotEqual(self.coverage.name, another.name)\nwith self.assertRaises(Exception) as raised:\nSamplingEffortCoverageF(name='name')\n</code></pre>"},{"location":"developer/manual/population_data/#django_project.population_data.test_population_data_models.TestSamplingEffortCoverage.test_update_sampling_effort_cov","title":"test_update_sampling_effort_cov","text":"<pre><code>test_update_sampling_effort_cov()\n</code></pre> <p>test update sampling effort coverage.</p> Source code in <code>django_project/population_data/test_population_data_models.py</code> <pre><code>def test_update_sampling_effort_cov(self):\n\"\"\"test update sampling effort coverage.\"\"\"\nself.coverage.name = 'Test1'\nself.coverage.save()\nself.assertEqual(\nself.coverage.name,\n'Test1'\n)\n</code></pre>"},{"location":"developer/manual/property/","title":"Admin","text":"<p>Admin for property package.</p>"},{"location":"developer/manual/property/#django_project.property.admin.ParcelAdmin","title":"ParcelAdmin","text":"<p>             Bases: <code>ModelAdmin</code></p> <p>Admin page for Parcel model.</p>"},{"location":"developer/manual/property/#django_project.property.admin.PropertyAdmin","title":"PropertyAdmin","text":"<p>             Bases: <code>ModelAdmin</code></p> <p>Admin page for Property model.</p>"},{"location":"developer/manual/property/#factories","title":"Factories","text":""},{"location":"developer/manual/property/#django_project.property.factories.ParcelFactory","title":"ParcelFactory","text":"<p>             Bases: <code>DjangoModelFactory</code></p> <p>Factory for Parcel.</p>"},{"location":"developer/manual/property/#django_project.property.factories.ParcelTypeFactory","title":"ParcelTypeFactory","text":"<p>             Bases: <code>DjangoModelFactory</code></p> <p>Factory for ParcelType.</p>"},{"location":"developer/manual/property/#django_project.property.factories.PropertyFactory","title":"PropertyFactory","text":"<p>             Bases: <code>DjangoModelFactory</code></p> <p>Property factory.</p>"},{"location":"developer/manual/property/#django_project.property.factories.PropertyTypeFactory","title":"PropertyTypeFactory","text":"<p>             Bases: <code>DjangoModelFactory</code></p> <p>Factory for PropertyType model.</p>"},{"location":"developer/manual/property/#django_project.property.factories.ProvinceFactory","title":"ProvinceFactory","text":"<p>             Bases: <code>DjangoModelFactory</code></p> <p>Factory for Province.</p>"},{"location":"developer/manual/property/#models","title":"Models","text":""},{"location":"developer/manual/property/#django_project.property.models.Parcel","title":"Parcel","text":"<p>             Bases: <code>Model</code></p> <p>Parcel model.</p>"},{"location":"developer/manual/property/#django_project.property.models.ParcelType","title":"ParcelType","text":"<p>             Bases: <code>Model</code></p> <p>Parcel type model.</p>"},{"location":"developer/manual/property/#django_project.property.models.Property","title":"Property","text":"<p>             Bases: <code>Model</code></p> <p>Property model.</p>"},{"location":"developer/manual/property/#test-case","title":"Test Case","text":""},{"location":"developer/manual/property/#django_project.property.test_property_models.ParcelTestCase","title":"ParcelTestCase","text":"<p>             Bases: <code>TestCase</code></p> <p>Parcel test case.</p>"},{"location":"developer/manual/property/#django_project.property.test_property_models.ParcelTestCase.test_create_parcel","title":"test_create_parcel","text":"<pre><code>test_create_parcel()\n</code></pre> <p>Test create parcel.</p> Source code in <code>django_project/property/test_property_models.py</code> <pre><code>def test_create_parcel(self):\n\"\"\"Test create parcel.\"\"\"\nself.assertTrue(isinstance(self.parcel, Parcel))\nself.assertEqual(Parcel.objects.count(), 1)\nself.assertEqual(self.parcel.sg_number, 'SG_0')\nself.assertEqual(self.parcel.farm_number, 0)\n</code></pre>"},{"location":"developer/manual/property/#django_project.property.test_property_models.ParcelTestCase.test_delete_parcel","title":"test_delete_parcel","text":"<pre><code>test_delete_parcel()\n</code></pre> <p>Test delete parcel.</p> Source code in <code>django_project/property/test_property_models.py</code> <pre><code>def test_delete_parcel(self):\n\"\"\"Test delete parcel.\"\"\"\nself.parcel.delete()\nself.assertEqual(Parcel.objects.count(), 0)\n</code></pre>"},{"location":"developer/manual/property/#django_project.property.test_property_models.ParcelTestCase.test_unique_parcel_sg_number_constraint","title":"test_unique_parcel_sg_number_constraint","text":"<pre><code>test_unique_parcel_sg_number_constraint()\n</code></pre> <p>Test unique parcel sg number constraint.</p> Source code in <code>django_project/property/test_property_models.py</code> <pre><code>def test_unique_parcel_sg_number_constraint(self):\n\"\"\"Test unique parcel sg number constraint.\"\"\"\nwith self.assertRaises(Exception) as raised:\nParcelFactory(sg_number='SG_1')\nself.assertEqual(IntegrityError, type(raised.exception))\n</code></pre>"},{"location":"developer/manual/property/#django_project.property.test_property_models.ParcelTestCase.test_update_parcel","title":"test_update_parcel","text":"<pre><code>test_update_parcel()\n</code></pre> <p>Test update parcel.</p> Source code in <code>django_project/property/test_property_models.py</code> <pre><code>def test_update_parcel(self):\n\"\"\"Test update parcel.\"\"\"\nself.parcel.sg_number = 'SG_1'\nself.parcel.save()\nself.assertEqual(Parcel.objects.get(id=self.parcel.id).sg_number, 'SG_1')\n</code></pre>"},{"location":"developer/manual/property/#django_project.property.test_property_models.ParcelTypeTestCase","title":"ParcelTypeTestCase","text":"<p>             Bases: <code>TestCase</code></p> <p>Parcel type test case</p>"},{"location":"developer/manual/property/#django_project.property.test_property_models.ParcelTypeTestCase.test_create_parcel_type","title":"test_create_parcel_type","text":"<pre><code>test_create_parcel_type()\n</code></pre> <p>Test create parcel types</p> Source code in <code>django_project/property/test_property_models.py</code> <pre><code>def test_create_parcel_type(self):\n\"\"\"Test create parcel types \"\"\"\nself.assertTrue(isinstance(self.parcel_type, ParcelType))\nself.assertEqual(ParcelType.objects.count(), 1)\n</code></pre>"},{"location":"developer/manual/property/#django_project.property.test_property_models.ParcelTypeTestCase.test_delete_parcel_type","title":"test_delete_parcel_type","text":"<pre><code>test_delete_parcel_type()\n</code></pre> <p>Test delete parcel type.</p> Source code in <code>django_project/property/test_property_models.py</code> <pre><code>def test_delete_parcel_type(self):\n\"\"\"Test delete parcel type.\"\"\"\nself.parcel_type.delete()\nself.assertEqual(ParcelType.objects.count(), 0)\n</code></pre>"},{"location":"developer/manual/property/#django_project.property.test_property_models.ParcelTypeTestCase.test_unique_parcel_type_name_constraint","title":"test_unique_parcel_type_name_constraint","text":"<pre><code>test_unique_parcel_type_name_constraint()\n</code></pre> <p>Test unique parcel type name constraint.</p> Source code in <code>django_project/property/test_property_models.py</code> <pre><code>def test_unique_parcel_type_name_constraint(self):\n\"\"\"Test unique parcel type name constraint.\"\"\"\nwith self.assertRaises(Exception) as raised:\nParcelTypeFactory(name='ParcelType_1')\nself.assertEqual(IntegrityError, type(raised.exception))\n</code></pre>"},{"location":"developer/manual/property/#django_project.property.test_property_models.ParcelTypeTestCase.test_update_parcel_type","title":"test_update_parcel_type","text":"<pre><code>test_update_parcel_type()\n</code></pre> <p>Test update parcel type.</p> Source code in <code>django_project/property/test_property_models.py</code> <pre><code>def test_update_parcel_type(self):\n\"\"\"Test update parcel type.\"\"\"\nself.parcel_type.name = 'ParcelType_1'\nself.parcel_type.save()\nself.assertEqual(ParcelType.objects.get(id=self.parcel_type.id).name, 'ParcelType_1')\n</code></pre>"},{"location":"developer/manual/property/#django_project.property.test_property_models.PropertyTestCase","title":"PropertyTestCase","text":"<p>             Bases: <code>TestCase</code></p> <p>Property test case.</p>"},{"location":"developer/manual/property/#django_project.property.test_property_models.PropertyTestCase.test_create_property","title":"test_create_property","text":"<pre><code>test_create_property()\n</code></pre> <p>Test creating property</p> Source code in <code>django_project/property/test_property_models.py</code> <pre><code>def test_create_property(self):\n\"\"\"Test creating property \"\"\"\nself.assertTrue(isinstance(self.property, Property))\nself.assertEqual(Property.objects.count(), 1)\nself.assertEqual(self.property.name, Property.objects.get(id=self.property.id).name)\n</code></pre>"},{"location":"developer/manual/property/#django_project.property.test_property_models.PropertyTestCase.test_delete_property","title":"test_delete_property","text":"<pre><code>test_delete_property()\n</code></pre> <p>Test delete property.</p> Source code in <code>django_project/property/test_property_models.py</code> <pre><code>def test_delete_property(self):\n\"\"\"Test delete property.\"\"\"\nself.property.delete()\nself.assertEqual(Property.objects.count(), 0)\n</code></pre>"},{"location":"developer/manual/property/#django_project.property.test_property_models.PropertyTestCase.test_update_property","title":"test_update_property","text":"<pre><code>test_update_property()\n</code></pre> <p>Test update property.</p> Source code in <code>django_project/property/test_property_models.py</code> <pre><code>def test_update_property(self):\n\"\"\"Test update property.\"\"\"\nself.property.name = 'Property_1'\nself.property.save()\nself.assertEqual(Property.objects.get(id=self.property.id).name, 'Property_1')\n</code></pre>"},{"location":"developer/manual/property/#django_project.property.test_property_models.PropertyTypeTest","title":"PropertyTypeTest","text":"<p>             Bases: <code>TestCase</code></p> <p>Propert type test case</p>"},{"location":"developer/manual/property/#django_project.property.test_property_models.PropertyTypeTest.test_create_property_type","title":"test_create_property_type","text":"<pre><code>test_create_property_type()\n</code></pre> <p>Test creating a new property type</p> Source code in <code>django_project/property/test_property_models.py</code> <pre><code>def test_create_property_type(self):\n\"\"\"Test creating a new property type\"\"\"\nself.assertTrue(\nisinstance(self.property_type, PropertyType)\n)\nself.assertEqual(PropertyType.objects.count(), 1)\nself.assertEqual(self.property_type.name, PropertyType.objects.get(id=self.property_type.id).name)\n</code></pre>"},{"location":"developer/manual/property/#django_project.property.test_property_models.PropertyTypeTest.test_delete_property_type","title":"test_delete_property_type","text":"<pre><code>test_delete_property_type()\n</code></pre> <p>Test deleting a property type</p> Source code in <code>django_project/property/test_property_models.py</code> <pre><code>def test_delete_property_type(self):\n\"\"\"Test deleting a property type\"\"\"\nself.property_type.delete()\nself.assertEqual(PropertyType.objects.count(), 0)\n</code></pre>"},{"location":"developer/manual/property/#django_project.property.test_property_models.PropertyTypeTest.test_property_type_unique_name_constraint","title":"test_property_type_unique_name_constraint","text":"<pre><code>test_property_type_unique_name_constraint()\n</code></pre> <p>Test property type unique name constraint</p> Source code in <code>django_project/property/test_property_models.py</code> <pre><code>def test_property_type_unique_name_constraint(self):\n\"\"\"Test property type unique name constraint\"\"\"\nwith self.assertRaises(Exception) as raised:\nPropertyTypeFactory(name='PropertyType 2')\nself.assertEqual(IntegrityError, type(raised.exception))\n</code></pre>"},{"location":"developer/manual/property/#django_project.property.test_property_models.PropertyTypeTest.test_update_property_type","title":"test_update_property_type","text":"<pre><code>test_update_property_type()\n</code></pre> <p>Test updating a property type</p> Source code in <code>django_project/property/test_property_models.py</code> <pre><code>def test_update_property_type(self):\n\"\"\"Test updating a property type\"\"\"\nself.property_type.name = 'PropertyType 2'\nself.property_type.save()\nself.assertEqual(\nPropertyType.objects.get(id=self.property_type.id).name,\n'PropertyType 2',\n)\n</code></pre>"},{"location":"developer/manual/property/#django_project.property.test_property_models.ProvinceTestCase","title":"ProvinceTestCase","text":"<p>             Bases: <code>TestCase</code></p> <p>Province test case</p>"},{"location":"developer/manual/property/#django_project.property.test_property_models.ProvinceTestCase.test_create_province","title":"test_create_province","text":"<pre><code>test_create_province()\n</code></pre> <p>Test create a province.</p> Source code in <code>django_project/property/test_property_models.py</code> <pre><code>def test_create_province(self):\n'Test create a province.'\nself.assertTrue(isinstance(self.province, Province))\nself.assertEqual(Province.objects.count(), 1)\nself.assertEqual(self.province.name, Province.objects.get(id=self.province.id).name)\n</code></pre>"},{"location":"developer/manual/property/#django_project.property.test_property_models.ProvinceTestCase.test_delete_province","title":"test_delete_province","text":"<pre><code>test_delete_province()\n</code></pre> <p>Test delete a province.</p> Source code in <code>django_project/property/test_property_models.py</code> <pre><code>def test_delete_province(self):\n'Test delete a province.'\nself.province.delete()\nself.assertEqual(Province.objects.count(), 0)\n</code></pre>"},{"location":"developer/manual/property/#django_project.property.test_property_models.ProvinceTestCase.test_unique_province_name_constraint","title":"test_unique_province_name_constraint","text":"<pre><code>test_unique_province_name_constraint()\n</code></pre> <p>Test unique province name constraint.</p> Source code in <code>django_project/property/test_property_models.py</code> <pre><code>def test_unique_province_name_constraint(self):\n'Test unique province name constraint.'\nwith self.assertRaises(Exception) as raised:\nProvinceFactory(name='Province 2')\nself.assertEqual(IntegrityError, type(raised.exception))\n</code></pre>"},{"location":"developer/manual/property/#django_project.property.test_property_models.ProvinceTestCase.test_update_province","title":"test_update_province","text":"<pre><code>test_update_province()\n</code></pre> <p>Test update a province.</p> Source code in <code>django_project/property/test_property_models.py</code> <pre><code>def test_update_province(self):\n'Test update a province.'\nself.province.name = 'Province 2'\nself.province.save()\nself.assertEqual(\nProvince.objects.get(id=self.province.id).name, 'Province 2'\n)\n</code></pre>"},{"location":"developer/manual/regulator_permit/","title":"Admin","text":"<p>Admin page for regulatory permit models.</p>"},{"location":"developer/manual/regulator_permit/#factories","title":"Factories","text":""},{"location":"developer/manual/regulator_permit/#django_project.regulatory_permit.factories.DataUsePermissionFactory","title":"DataUsePermissionFactory","text":"<p>             Bases: <code>DjangoModelFactory</code></p> <p>data use permission factory</p>"},{"location":"developer/manual/regulator_permit/#models","title":"Models","text":""},{"location":"developer/manual/regulator_permit/#django_project.regulatory_permit.models.DataUsePermission","title":"DataUsePermission","text":"<p>             Bases: <code>Model</code></p> <p>data use permission model</p>"},{"location":"developer/manual/regulator_permit/#test-case","title":"Test Case","text":""},{"location":"developer/manual/regulator_permit/#django_project.regulatory_permit.test_regulatory_permit_models.DataUsePermissionTestCase","title":"DataUsePermissionTestCase","text":"<p>             Bases: <code>TestCase</code></p> <p>test data use permission model</p>"},{"location":"developer/manual/regulator_permit/#django_project.regulatory_permit.test_regulatory_permit_models.DataUsePermissionTestCase.setUpTestData","title":"setUpTestData  <code>classmethod</code>","text":"<pre><code>setUpTestData()\n</code></pre> <p>setup test data</p> Source code in <code>django_project/regulatory_permit/test_regulatory_permit_models.py</code> <pre><code>@classmethod\ndef setUpTestData(cls):\n\"\"\"setup test data\"\"\"\ncls.data_use_permission = (\nregulatoryPermitFactories.DataUsePermissionFactory()\n)\n</code></pre>"},{"location":"developer/manual/regulator_permit/#django_project.regulatory_permit.test_regulatory_permit_models.DataUsePermissionTestCase.test_create_data_use_permission","title":"test_create_data_use_permission","text":"<pre><code>test_create_data_use_permission()\n</code></pre> <p>test creating use permission</p> Source code in <code>django_project/regulatory_permit/test_regulatory_permit_models.py</code> <pre><code>def test_create_data_use_permission(self):\n\"\"\"test creating use permission\"\"\"\nself.assertTrue(\nisinstance(\nself.data_use_permission,\nregulatoryPermitModels.DataUsePermission,\n)\n)\nself.assertEqual(\nregulatoryPermitModels.DataUsePermission.objects.count(), 1\n)\n</code></pre>"},{"location":"developer/manual/regulator_permit/#django_project.regulatory_permit.test_regulatory_permit_models.DataUsePermissionTestCase.test_delete_data_use_permission","title":"test_delete_data_use_permission","text":"<pre><code>test_delete_data_use_permission()\n</code></pre> <p>test deleting use permission</p> Source code in <code>django_project/regulatory_permit/test_regulatory_permit_models.py</code> <pre><code>def test_delete_data_use_permission(self):\n\"\"\"test deleting use permission\"\"\"\nself.data_use_permission.delete()\nself.assertEqual(\nregulatoryPermitModels.DataUsePermission.objects.count(), 0\n)\n</code></pre>"},{"location":"developer/manual/regulator_permit/#django_project.regulatory_permit.test_regulatory_permit_models.DataUsePermissionTestCase.test_unqiue_data_use_permission_name","title":"test_unqiue_data_use_permission_name","text":"<pre><code>test_unqiue_data_use_permission_name()\n</code></pre> <p>test unique name of use permission</p> Source code in <code>django_project/regulatory_permit/test_regulatory_permit_models.py</code> <pre><code>def test_unqiue_data_use_permission_name(self):\n\"\"\"test unique name of use permission\"\"\"\ntry:\n(\nregulatoryPermitModels.DataUsePermission.objects.create(\nname='data use permission 0',\ndescription='data use permission description 0',\n)\n)\nexcept Exception as e:\nself.assertTrue(isinstance(e, IntegrityError))\nreturn\n</code></pre>"},{"location":"developer/manual/regulator_permit/#django_project.regulatory_permit.test_regulatory_permit_models.DataUsePermissionTestCase.test_update_data_use_permission","title":"test_update_data_use_permission","text":"<pre><code>test_update_data_use_permission()\n</code></pre> <p>test updating use permission</p> Source code in <code>django_project/regulatory_permit/test_regulatory_permit_models.py</code> <pre><code>def test_update_data_use_permission(self):\n\"\"\"test updating use permission\"\"\"\nself.data_use_permission.name = 'Data Use Permission #1'\nself.data_use_permission.description = (\n'Data Use Permission Description #1'\n)\nself.data_use_permission.save()\nself.assertIn(\n'Data Use Permission',\nregulatoryPermitModels.DataUsePermission.objects.get(\nid=self.data_use_permission.id).name,\n)\nself.assertIn(\n'Data Use Permission Description',\nregulatoryPermitModels.DataUsePermission.objects.get(\nid=self.data_use_permission.id\n).description,\n)\n</code></pre>"},{"location":"developer/manual/sawps/","title":"SAWPS","text":""},{"location":"developer/manual/sawps/#django_project.sawps.password_validation.NumberValidator","title":"NumberValidator","text":"<p>             Bases: <code>object</code></p> <p>Checking if password contains a number character.</p>"},{"location":"developer/manual/sawps/#django_project.sawps.password_validation.NumberValidator.validate","title":"validate","text":"<pre><code>validate(password, user=None)\n</code></pre> <p>Check password.</p> <p>Parameters:</p> Name Type Description Default <code>password</code> <code>str</code> <p>Input password</p> required Source code in <code>django_project/sawps/password_validation.py</code> <pre><code>def validate(self, password, user=None):\n\"\"\"Check password.\n    :param\n    password: Input password\n    :type\n    password: str\n    \"\"\"\nif not re.findall(r'\\d', password):\nraise ValidationError(\n\"The password must contain a numeric character\",\ncode='password_no_number',\n)\n</code></pre>"},{"location":"developer/manual/sawps/#django_project.sawps.password_validation.SymbolValidator","title":"SymbolValidator","text":"<p>             Bases: <code>object</code></p> <p>Checking if password contains a special character.</p>"},{"location":"developer/manual/sawps/#django_project.sawps.password_validation.SymbolValidator.validate","title":"validate","text":"<pre><code>validate(password, user=None)\n</code></pre> <p>Check password.</p> <p>Parameters:</p> Name Type Description Default <code>password</code> <code>str</code> <p>Input password</p> required Source code in <code>django_project/sawps/password_validation.py</code> <pre><code>def validate(self, password, user=None):\n\"\"\"Check password.\n    :param\n    password: Input password\n    :type\n    password: str\n    \"\"\"\nif not re.findall(r'[()[\\]{}|\\\\`~!@#$%^&amp;*_\\-+=;:\\'\",&lt;&gt;./?]', password):\nraise ValidationError(\n\"The password must contain a special character.\",\ncode='password_no_symbol',\n)\n</code></pre>"},{"location":"developer/manual/sawps/#django_project.sawps.password_validation.UppercaseValidator","title":"UppercaseValidator","text":"<p>             Bases: <code>object</code></p> <p>Checking if password contains an uppercase letter.</p>"},{"location":"developer/manual/sawps/#django_project.sawps.password_validation.UppercaseValidator.validate","title":"validate","text":"<pre><code>validate(password, user=None)\n</code></pre> <p>Check password.</p> <p>Parameters:</p> Name Type Description Default <code>password</code> <code>str</code> <p>Input password</p> required Source code in <code>django_project/sawps/password_validation.py</code> <pre><code>def validate(self, password, user=None):\n\"\"\"Check password.\n    :param\n    password: Input password\n    :type\n    password: str\n    \"\"\"\nif not re.findall('[A-Z]', password):\nraise ValidationError(\n\"The password must contain an uppercase letter\",\ncode='password_no_upper',\n)\n</code></pre>"},{"location":"developer/manual/species/","title":"Admin","text":""},{"location":"developer/manual/species/#django_project.species.admin.TaxonAdmin","title":"TaxonAdmin","text":"<p>             Bases: <code>ModelAdmin</code></p> <p>Admin page for Taxon model</p>"},{"location":"developer/manual/species/#django_project.species.admin.clean_output_caches","title":"clean_output_caches","text":"<pre><code>clean_output_caches(modeladmin, request, queryset)\n</code></pre> <p>Clean statistical model output from taxons.</p> Source code in <code>django_project/species/admin.py</code> <pre><code>@admin.action(description='Clean output caches')\ndef clean_output_caches(modeladmin, request, queryset):\n\"\"\"Clean statistical model output from taxons.\"\"\"\nfrom frontend.utils.statistical_model import (\nclear_statistical_model_output_cache\n)\nfor taxon in queryset:\nclear_statistical_model_output_cache(taxon)\nmodeladmin.message_user(\nrequest,\n'Statistical model output cache has been cleared!',\nmessages.SUCCESS\n)\n</code></pre>"},{"location":"developer/manual/species/#factories","title":"Factories","text":""},{"location":"developer/manual/species/#django_project.species.factories.OwnedSpeciesFactory","title":"OwnedSpeciesFactory","text":"<p>             Bases: <code>DjangoModelFactory</code></p> <p>Owned species factory.</p>"},{"location":"developer/manual/species/#django_project.species.factories.TaxonF","title":"TaxonF","text":"<p>             Bases: <code>DjangoModelFactory</code></p> <p>Taxon model factory.</p>"},{"location":"developer/manual/species/#django_project.species.factories.TaxonRankFactory","title":"TaxonRankFactory","text":"<p>             Bases: <code>DjangoModelFactory</code></p> <p>taxon rank factory</p>"},{"location":"developer/manual/species/#django_project.species.factories.TaxonSurveyMethodF","title":"TaxonSurveyMethodF","text":"<p>             Bases: <code>DjangoModelFactory</code></p> <p>Taxon Survey Method factory.</p>"},{"location":"developer/manual/species/#forms","title":"Forms","text":"<p>Species forms.</p>"},{"location":"developer/manual/species/#django_project.species.forms.TaxonForm","title":"TaxonForm","text":"<p>             Bases: <code>ModelForm</code></p> <p>Taxon form.</p>"},{"location":"developer/manual/species/#models","title":"Models","text":"<p>Species models.</p>"},{"location":"developer/manual/species/#django_project.species.models.OwnedSpecies","title":"OwnedSpecies","text":"<p>             Bases: <code>Model</code></p> <p>Owned species mdoel.</p>"},{"location":"developer/manual/species/#django_project.species.models.Taxon","title":"Taxon","text":"<p>             Bases: <code>Model</code></p> <p>Taxon model.</p>"},{"location":"developer/manual/species/#django_project.species.models.TaxonRank","title":"TaxonRank","text":"<p>             Bases: <code>Model</code></p> <p>Taxon rank model.</p>"},{"location":"developer/manual/species/#django_project.species.models.TaxonSurveyMethod","title":"TaxonSurveyMethod","text":"<p>             Bases: <code>Model</code></p> <p>taxon survey methods</p>"},{"location":"developer/manual/species/#serializers","title":"Serializers","text":""},{"location":"developer/manual/species/#django_project.species.serializers.FrontPageTaxonSerializer","title":"FrontPageTaxonSerializer","text":"<p>             Bases: <code>ModelSerializer</code></p> <p>Display species data on FrontPage.</p>"},{"location":"developer/manual/species/#django_project.species.serializers.TaxonSerializer","title":"TaxonSerializer","text":"<p>             Bases: <code>ModelSerializer</code></p> <p>Species serializer</p>"},{"location":"developer/manual/species/#test-case","title":"Test Case","text":""},{"location":"developer/manual/species/#django_project.species.test_species_models.OwnedSpeciesTestCase","title":"OwnedSpeciesTestCase","text":"<p>             Bases: <code>TestCase</code></p> <p>Owned species test case.</p>"},{"location":"developer/manual/species/#django_project.species.test_species_models.OwnedSpeciesTestCase.setUpTestData","title":"setUpTestData  <code>classmethod</code>","text":"<pre><code>setUpTestData()\n</code></pre> <p>Set up test data for owned species test case.</p> Source code in <code>django_project/species/test_species_models.py</code> <pre><code>@classmethod\ndef setUpTestData(cls):\n\"\"\"Set up test data for owned species test case.\"\"\"\nuser = User.objects.create_user(username='testuser', password='12345')\ntaxon = Taxon.objects.create(\nscientific_name='taxon_0',\ncommon_name_varbatim='taxon_0',\ncolour_variant=False,\ntaxon_rank=TaxonRankFactory(),\n)\ncls.ownedSpecies = OwnedSpeciesFactory(taxon=taxon, user=user)\n</code></pre>"},{"location":"developer/manual/species/#django_project.species.test_species_models.OwnedSpeciesTestCase.test_create_owned_species","title":"test_create_owned_species","text":"<pre><code>test_create_owned_species()\n</code></pre> <p>Test create owned species.</p> Source code in <code>django_project/species/test_species_models.py</code> <pre><code>def test_create_owned_species(self):\n\"\"\"Test create owned species.\"\"\"\nself.assertTrue(isinstance(self.ownedSpecies, OwnedSpecies))\nself.assertEqual(OwnedSpecies.objects.count(), 1)\n</code></pre>"},{"location":"developer/manual/species/#django_project.species.test_species_models.OwnedSpeciesTestCase.test_delete_owned_species","title":"test_delete_owned_species","text":"<pre><code>test_delete_owned_species()\n</code></pre> <p>Test delete owned species.</p> Source code in <code>django_project/species/test_species_models.py</code> <pre><code>def test_delete_owned_species(self):\n\"\"\"Test delete owned species.\"\"\"\nself.ownedSpecies.delete()\nself.assertEqual(OwnedSpecies.objects.count(), 0)\n</code></pre>"},{"location":"developer/manual/species/#django_project.species.test_species_models.OwnedSpeciesTestCase.test_update_owned_species","title":"test_update_owned_species","text":"<pre><code>test_update_owned_species()\n</code></pre> <p>Test update owned species.</p> Source code in <code>django_project/species/test_species_models.py</code> <pre><code>def test_update_owned_species(self):\n\"\"\"Test update owned species.\"\"\"\nself.ownedSpecies.area_available_to_species = 45.67\nself.ownedSpecies.save()\nself.assertEqual(\nOwnedSpecies.objects.get(\nid=self.ownedSpecies.id).area_available_to_species,\n45.67\n)\n</code></pre>"},{"location":"developer/manual/species/#django_project.species.test_species_models.TaxonRankTestCase","title":"TaxonRankTestCase","text":"<p>             Bases: <code>TestCase</code></p> <p>Taxon rank test case.</p>"},{"location":"developer/manual/species/#django_project.species.test_species_models.TaxonRankTestCase.setUpTestData","title":"setUpTestData  <code>classmethod</code>","text":"<pre><code>setUpTestData()\n</code></pre> <p>Set up test data for taxon rank test case.</p> Source code in <code>django_project/species/test_species_models.py</code> <pre><code>@classmethod\ndef setUpTestData(cls):\n\"\"\"Set up test data for taxon rank test case.\"\"\"\ncls.taxonRank = TaxonRankFactory()\n</code></pre>"},{"location":"developer/manual/species/#django_project.species.test_species_models.TaxonRankTestCase.test_create_taxon_rank","title":"test_create_taxon_rank","text":"<pre><code>test_create_taxon_rank()\n</code></pre> <p>Test create taxon rank.</p> Source code in <code>django_project/species/test_species_models.py</code> <pre><code>def test_create_taxon_rank(self):\n\"\"\"Test create taxon rank.\"\"\"\nself.assertTrue(isinstance(self.taxonRank, TaxonRank))\nself.assertEqual(\nself.taxonRank.name,\nTaxonRank.objects.get(id=self.taxonRank.id).name\n)\n</code></pre>"},{"location":"developer/manual/species/#django_project.species.test_species_models.TaxonRankTestCase.test_delete_taxon_rank","title":"test_delete_taxon_rank","text":"<pre><code>test_delete_taxon_rank()\n</code></pre> <p>Test delete taxon rank.</p> Source code in <code>django_project/species/test_species_models.py</code> <pre><code>def test_delete_taxon_rank(self):\n\"\"\"Test delete taxon rank.\"\"\"\nself.taxonRank.delete()\nself.assertEqual(TaxonRank.objects.count(), 0)\n</code></pre>"},{"location":"developer/manual/species/#django_project.species.test_species_models.TaxonRankTestCase.test_unique_taxon_rank_name_constraint","title":"test_unique_taxon_rank_name_constraint","text":"<pre><code>test_unique_taxon_rank_name_constraint()\n</code></pre> <p>Test unique taxon rank name constraint.</p> Source code in <code>django_project/species/test_species_models.py</code> <pre><code>def test_unique_taxon_rank_name_constraint(self):\n\"\"\"Test unique taxon rank name constraint.\"\"\"\nwith self.assertRaises(Exception) as raised:\nTaxonRankFactory(name='taxon_rank_1')\nself.assertEqual(IntegrityError, type(raised.exception))\n</code></pre>"},{"location":"developer/manual/species/#django_project.species.test_species_models.TaxonRankTestCase.test_update_taxon_rank","title":"test_update_taxon_rank","text":"<pre><code>test_update_taxon_rank()\n</code></pre> <p>Test update taxon rank.</p> Source code in <code>django_project/species/test_species_models.py</code> <pre><code>def test_update_taxon_rank(self):\n\"\"\"Test update taxon rank.\"\"\"\nself.taxonRank.name = 'taxon_rank_1'\nself.taxonRank.save()\nself.assertEqual(\nTaxonRank.objects.get(id=self.taxonRank.id).name,\n'taxon_rank_1'\n)\n</code></pre>"},{"location":"developer/manual/species/#django_project.species.test_species_models.TaxonSurveyMethodTestCase","title":"TaxonSurveyMethodTestCase","text":"<p>             Bases: <code>TestCase</code></p> <p>Taxon survey method count test case.</p>"},{"location":"developer/manual/species/#django_project.species.test_species_models.TaxonSurveyMethodTestCase.setUpTestData","title":"setUpTestData  <code>classmethod</code>","text":"<pre><code>setUpTestData()\n</code></pre> <p>SetUpTestData for Taxon survey method count test case.</p> Source code in <code>django_project/species/test_species_models.py</code> <pre><code>@classmethod\ndef setUpTestData(cls):\n\"\"\"SetUpTestData for Taxon survey method count test case.\"\"\"\ncls.taxon = Taxon.objects.create(\nscientific_name='taxon_0',\ncommon_name_varbatim='taxon_0',\ncolour_variant=False,\ntaxon_rank=TaxonRankFactory(),\n)\ncls.survey_method = SurveyMethod.objects.create(\nname='Unknown',\n)\ncls.taxon_survey_method = TaxonSurveyMethodF(\ntaxon=cls.taxon,\nsurvey_method=cls.survey_method\n)\n</code></pre>"},{"location":"developer/manual/species/#django_project.species.test_species_models.TaxonSurveyMethodTestCase.test_create_taxon_survey_method","title":"test_create_taxon_survey_method","text":"<pre><code>test_create_taxon_survey_method()\n</code></pre> <p>Test create Taxon survey method count.</p> Source code in <code>django_project/species/test_species_models.py</code> <pre><code>def test_create_taxon_survey_method(self):\n\"\"\"Test create Taxon survey method count.\"\"\"\nself.assertTrue(\nisinstance(self.taxon_survey_method, TaxonSurveyMethod)\n)\nself.assertEqual(TaxonSurveyMethod.objects.count(), 1)\nself.assertEqual(\nTaxonSurveyMethod.objects.filter(\ntaxon__scientific_name=self.taxon.scientific_name\n).count(), 1\n)\nself.assertEqual(\nTaxonSurveyMethod.objects.filter(\nsurvey_method__name=self.survey_method.name\n).count(), 1\n)\n</code></pre>"},{"location":"developer/manual/species/#django_project.species.test_species_models.TaxonSurveyMethodTestCase.test_delete_taxon_survey_method","title":"test_delete_taxon_survey_method","text":"<pre><code>test_delete_taxon_survey_method()\n</code></pre> <p>Test delete Taxon survey method count.</p> Source code in <code>django_project/species/test_species_models.py</code> <pre><code>def test_delete_taxon_survey_method(self):\n\"\"\"Test delete Taxon survey method count.\"\"\"\nself.taxon.delete()\nself.assertEqual(TaxonSurveyMethod.objects.count(), 0)\n</code></pre>"},{"location":"developer/manual/species/#django_project.species.test_species_models.TaxonSurveyMethodTestCase.test_update_taxon_survey_method","title":"test_update_taxon_survey_method","text":"<pre><code>test_update_taxon_survey_method()\n</code></pre> <p>Test update Taxon survey method count.</p> Source code in <code>django_project/species/test_species_models.py</code> <pre><code>def test_update_taxon_survey_method(self):\n\"\"\"Test update Taxon survey method count.\"\"\"\ntaxon = TaxonFactory.create(\nscientific_name='taxon',\ncommon_name_varbatim='taxon_0',\ncolour_variant=False,\ntaxon_rank=TaxonRankFactory(),\n)\nself.taxon_survey_method.taxon = taxon\nself.taxon_survey_method.save()\nself.assertEqual(\nTaxonSurveyMethod.objects.filter(\ntaxon__scientific_name='taxon').count(),\n1\n)\n</code></pre>"},{"location":"developer/manual/species/#django_project.species.test_species_models.TaxonTestCase","title":"TaxonTestCase","text":"<p>             Bases: <code>TestCase</code></p> <p>Taxon model test case.</p>"},{"location":"developer/manual/species/#django_project.species.test_species_models.TaxonTestCase.setUpTestData","title":"setUpTestData  <code>classmethod</code>","text":"<pre><code>setUpTestData()\n</code></pre> <p>Taxon model test data.</p> Source code in <code>django_project/species/test_species_models.py</code> <pre><code>@classmethod\ndef setUpTestData(cls):\n\"\"\"Taxon model test data.\"\"\"\ncls.taxonRank = TaxonRankFactory.create(\nname='Species'\n)\ncls.taxon = TaxonFactory.create(\nscientific_name='taxon_0',\ncommon_name_varbatim='taxon_0',\ncolour_variant=False,\ntaxon_rank=cls.taxonRank,\nshow_on_front_page=False\n)\ncls.url = reverse('species')\n</code></pre>"},{"location":"developer/manual/species/#django_project.species.test_species_models.TaxonTestCase.test_create_taxon","title":"test_create_taxon","text":"<pre><code>test_create_taxon()\n</code></pre> <p>Test create taxon.</p> Source code in <code>django_project/species/test_species_models.py</code> <pre><code>def test_create_taxon(self):\n\"\"\"Test create taxon.\"\"\"\nself.assertTrue(isinstance(self.taxon, Taxon))\nself.assertEqual(Taxon.objects.count(), 1)\nself.assertEqual(\nself.taxon.scientific_name,\nTaxon.objects.get(id=self.taxon.id).scientific_name\n)\n</code></pre>"},{"location":"developer/manual/species/#django_project.species.test_species_models.TaxonTestCase.test_delete_taxon","title":"test_delete_taxon","text":"<pre><code>test_delete_taxon()\n</code></pre> <p>Test delete taxon.</p> Source code in <code>django_project/species/test_species_models.py</code> <pre><code>def test_delete_taxon(self):\n\"\"\"Test delete taxon.\"\"\"\nself.taxon.delete()\nself.assertEqual(Taxon.objects.count(), 0)\n\"\"\"Test delete taxon rank.\"\"\"\nself.taxonRank.delete()\nself.assertEqual(TaxonRank.objects.count(), 0)\n</code></pre>"},{"location":"developer/manual/species/#django_project.species.test_species_models.TaxonTestCase.test_get_taxon_frontpage_list","title":"test_get_taxon_frontpage_list","text":"<pre><code>test_get_taxon_frontpage_list()\n</code></pre> <p>Test fetch taxon list for frontpage.</p> Source code in <code>django_project/species/test_species_models.py</code> <pre><code>def test_get_taxon_frontpage_list(self):\n\"\"\"Test fetch taxon list for frontpage.\"\"\"\ntaxon = TaxonFactory.create(\nscientific_name='taxon_1',\ncommon_name_varbatim='taxon_1',\ncolour_variant=False,\ntaxon_rank=self.taxonRank,\nshow_on_front_page=True\n)\nproperty_1 = PropertyFactory.create()\nproperty_2 = PropertyFactory.create()\nclient = Client()\nresponse = client.get(reverse('species-front-page'))\nself.assertEqual(response.status_code, status.HTTP_200_OK)\nself.assertEqual(len(response.data), 1)\ntaxon_1 = [d for d in response.data if d['id'] == taxon.id]\nself.assertTrue(taxon_1)\nself.assertEqual(taxon_1[0]['total_population'], 0)\nself.assertEqual(taxon_1[0]['species_name'], taxon.scientific_name)\nuser_1 = User.objects.create_user(username='testuser_taxon_1', password='12345')\nowned_species_1 = OwnedSpeciesFactory(\ntaxon=taxon,\nuser=user_1,\nproperty=property_1,\narea_available_to_species=2\n)\nuser_2 = User.objects.create_user(username='testuser_taxon_2', password='12345')\nowned_species_2 = OwnedSpeciesFactory(\ntaxon=taxon,\nuser=user_2,\nproperty=property_2,\narea_available_to_species=1\n)\n# create two years of data\nAnnualPopulationF(owned_species=owned_species_1, year=2021, total=30,\nadult_male=10, adult_female=10)\nAnnualPopulationF(owned_species=owned_species_1, year=2022, total=35,\nadult_male=10, adult_female=10)\nAnnualPopulationF(owned_species=owned_species_2, year=2020, total=15,\nadult_male=10, adult_female=5)\nAnnualPopulationF(owned_species=owned_species_2, year=2022, total=22,\nadult_male=10, adult_female=10)\nresponse = client.get(reverse('species-front-page'))\nself.assertEqual(response.status_code, status.HTTP_200_OK)\nself.assertEqual(len(response.data), 1)\ntaxon_1 = [d for d in response.data if d['id'] == taxon.id]\nself.assertTrue(taxon_1)\nself.assertEqual(taxon_1[0]['total_population'], 57)\nself.assertEqual(taxon_1[0]['total_area'], 3)\n</code></pre>"},{"location":"developer/manual/species/#django_project.species.test_species_models.TaxonTestCase.test_get_taxon_list","title":"test_get_taxon_list","text":"<pre><code>test_get_taxon_list()\n</code></pre> <p>Taxon list API test</p> Source code in <code>django_project/species/test_species_models.py</code> <pre><code>def test_get_taxon_list(self):\n\"\"\"Taxon list API test\"\"\"\nuser = User.objects.create_user(\nusername='testuserd',\npassword='testpasswordd'\n)\nauth_headers = {\n'HTTP_AUTHORIZATION': 'Basic ' +\nbase64.b64encode(b'testuserd:testpasswordd').decode('ascii'),\n}\nclient = Client()\nresponse = client.get(self.url, **auth_headers)\nself.assertEqual(response.status_code, status.HTTP_200_OK)\nexpected_data = TaxonSerializer([self.taxon], many=True).data\nself.assertEqual(expected_data, response.data)\n</code></pre>"},{"location":"developer/manual/species/#django_project.species.test_species_models.TaxonTestCase.test_taxon_relation_to_self","title":"test_taxon_relation_to_self","text":"<pre><code>test_taxon_relation_to_self()\n</code></pre> <p>Test taxon relation to self.</p> Source code in <code>django_project/species/test_species_models.py</code> <pre><code>def test_taxon_relation_to_self(self):\n\"\"\"Test taxon relation to self.\"\"\"\nself.taxon2 = Taxon.objects.create(\nscientific_name='taxon_1',\ncommon_name_varbatim='taxon_1',\ncolour_variant=False,\ntaxon_rank=self.taxonRank,\nparent=self.taxon,\n)\nself.assertEqual(self.taxon2.parent, self.taxon)\n</code></pre>"},{"location":"developer/manual/species/#django_project.species.test_species_models.TaxonTestCase.test_taxon_unique_infraspecific_epithet_constraint","title":"test_taxon_unique_infraspecific_epithet_constraint","text":"<pre><code>test_taxon_unique_infraspecific_epithet_constraint()\n</code></pre> <p>Test taxon unique infraspecific epithet constraint.</p> Source code in <code>django_project/species/test_species_models.py</code> <pre><code>def test_taxon_unique_infraspecific_epithet_constraint(self):\n\"\"\"Test taxon unique infraspecific epithet constraint.\"\"\"\nTaxon.objects.create(\nscientific_name='taxon_2',\ncommon_name_varbatim='taxon_2',\ncolour_variant=False,\ninfraspecific_epithet='infra_2',\ntaxon_rank=self.taxonRank,\n)\nself.assertEqual(\nTaxon.objects.filter(infraspecific_epithet='infra_2').count(),\n1\n)\nwith self.assertRaises(Exception) as raised:\nTaxon.objects.create(\nscientific_name='taxon_0',\ncommon_name_varbatim='taxon_0',\ncolour_variant=False,\ninfraspecific_epithet='infra_1',\ntaxon_rank=self.taxonRank,\n)\n</code></pre>"},{"location":"developer/manual/species/#django_project.species.test_species_models.TaxonTestCase.test_taxon_unique_scientific_name_constraint","title":"test_taxon_unique_scientific_name_constraint","text":"<pre><code>test_taxon_unique_scientific_name_constraint()\n</code></pre> <p>Test taxon unique scientific name constraint.</p> Source code in <code>django_project/species/test_species_models.py</code> <pre><code>def test_taxon_unique_scientific_name_constraint(self):\n\"\"\"Test taxon unique scientific name constraint.\"\"\"\nwith self.assertRaises(Exception) as raised:\nTaxon.objects.create(\nscientific_name='taxon_1',\ncommon_name_varbatim='taxon_0',\ncolour_variant=False,\ntaxon_rank=self.taxonRank,\n)\nself.assertEqual(IntegrityError, type(raised.exception))\n</code></pre>"},{"location":"developer/manual/species/#django_project.species.test_species_models.TaxonTestCase.test_update_taxon","title":"test_update_taxon","text":"<pre><code>test_update_taxon()\n</code></pre> <p>Test update taxon objects.</p> Source code in <code>django_project/species/test_species_models.py</code> <pre><code>def test_update_taxon(self):\n\"\"\"Test update taxon objects.\"\"\"\nself.taxon.scientific_name = 'taxon_1'\nself.taxon.infraspecific_epithet = 'infra_1'\nself.taxon.save()\nself.assertEqual(\nTaxon.objects.get(id=self.taxon.id).scientific_name,\n'taxon_1'\n)\nself.assertEqual(\nTaxon.objects.get(id=self.taxon.id).infraspecific_epithet,\n'infra_1'\n)\n</code></pre>"},{"location":"developer/manual/stakeholder/","title":"Admin","text":""},{"location":"developer/manual/stakeholder/#factories","title":"Factories","text":""},{"location":"developer/manual/stakeholder/#django_project.stakeholder.factories.loginStatusFactory","title":"loginStatusFactory","text":"<p>             Bases: <code>DjangoModelFactory</code></p> <p>Factory class for login status models.</p>"},{"location":"developer/manual/stakeholder/#django_project.stakeholder.factories.organisationFactory","title":"organisationFactory","text":"<p>             Bases: <code>DjangoModelFactory</code></p> <p>Factory class for organisation model.</p>"},{"location":"developer/manual/stakeholder/#django_project.stakeholder.factories.organisationRepresentativeFactory","title":"organisationRepresentativeFactory","text":"<p>             Bases: <code>DjangoModelFactory</code></p> <p>Factory class for organisation representative model.</p>"},{"location":"developer/manual/stakeholder/#django_project.stakeholder.factories.organisationUserFactory","title":"organisationUserFactory","text":"<p>             Bases: <code>DjangoModelFactory</code></p> <p>Factory class for organisation user model.</p>"},{"location":"developer/manual/stakeholder/#django_project.stakeholder.factories.userFactory","title":"userFactory","text":"<p>             Bases: <code>DjangoModelFactory</code></p> <p>Factory class for user models.</p>"},{"location":"developer/manual/stakeholder/#django_project.stakeholder.factories.userLoginFactory","title":"userLoginFactory","text":"<p>             Bases: <code>DjangoModelFactory</code></p> <p>User login facfory class.</p>"},{"location":"developer/manual/stakeholder/#django_project.stakeholder.factories.userProfileFactory","title":"userProfileFactory","text":"<p>             Bases: <code>DjangoModelFactory</code></p> <p>Factory class for user profile model.</p>"},{"location":"developer/manual/stakeholder/#django_project.stakeholder.factories.userRoleTypeFactory","title":"userRoleTypeFactory","text":"<p>             Bases: <code>DjangoModelFactory</code></p> <p>Factory class for user role type models.</p>"},{"location":"developer/manual/stakeholder/#django_project.stakeholder.factories.userTitleFactory","title":"userTitleFactory","text":"<p>             Bases: <code>DjangoModelFactory</code></p> <p>Factory class for user title models.</p>"},{"location":"developer/manual/stakeholder/#models","title":"Models","text":""},{"location":"developer/manual/stakeholder/#django_project.stakeholder.models.LoginStatus","title":"LoginStatus","text":"<p>             Bases: <code>Model</code></p> <p>User login status model.</p>"},{"location":"developer/manual/stakeholder/#django_project.stakeholder.models.Organisation","title":"Organisation","text":"<p>             Bases: <code>Model</code></p> <p>Organisation model.</p>"},{"location":"developer/manual/stakeholder/#django_project.stakeholder.models.OrganisationInvites","title":"OrganisationInvites","text":"<p>             Bases: <code>Model</code></p> <p>OrganisationInvites model to store all invites</p>"},{"location":"developer/manual/stakeholder/#django_project.stakeholder.models.OrganisationPersonnel","title":"OrganisationPersonnel","text":"<p>             Bases: <code>Model</code></p> <p>Organisation personnel abstract model.</p>"},{"location":"developer/manual/stakeholder/#django_project.stakeholder.models.OrganisationRepresentative","title":"OrganisationRepresentative","text":"<p>             Bases: <code>OrganisationPersonnel</code></p> <p>Organisation representative model.</p>"},{"location":"developer/manual/stakeholder/#django_project.stakeholder.models.OrganisationUser","title":"OrganisationUser","text":"<p>             Bases: <code>OrganisationPersonnel</code></p> <p>Organisation user model.</p>"},{"location":"developer/manual/stakeholder/#django_project.stakeholder.models.Reminders","title":"Reminders","text":"<p>             Bases: <code>Model</code></p> <p>Reminders model to store all reminders</p>"},{"location":"developer/manual/stakeholder/#django_project.stakeholder.models.UserLogin","title":"UserLogin","text":"<p>             Bases: <code>Model</code></p> <p>User login model.</p>"},{"location":"developer/manual/stakeholder/#django_project.stakeholder.models.UserProfile","title":"UserProfile","text":"<p>             Bases: <code>Model</code></p> <p>Extend User model with one-to-one mapping.</p>"},{"location":"developer/manual/stakeholder/#django_project.stakeholder.models.UserRoleType","title":"UserRoleType","text":"<p>             Bases: <code>Model</code></p> <p>User role type (Base users, admins ..etc.) model.</p>"},{"location":"developer/manual/stakeholder/#django_project.stakeholder.models.UserTitle","title":"UserTitle","text":"<p>             Bases: <code>Model</code></p> <p>User title model.</p>"},{"location":"developer/manual/stakeholder/#test-case","title":"Test Case","text":""},{"location":"developer/manual/stakeholder/#django_project.stakeholder.test_stakeholder_models.LoginStatusTestCase","title":"LoginStatusTestCase","text":"<p>             Bases: <code>TestCase</code></p> <p>User login status test case.</p>"},{"location":"developer/manual/stakeholder/#django_project.stakeholder.test_stakeholder_models.LoginStatusTestCase.test_create_login_status","title":"test_create_login_status","text":"<pre><code>test_create_login_status()\n</code></pre> <p>Test creating login status.</p> Source code in <code>django_project/stakeholder/test_stakeholder_models.py</code> <pre><code>def test_create_login_status(self):\n\"\"\"Test creating login status.\"\"\"\nself.assertEqual(LoginStatus.objects.count(), 1)\nself.assertTrue(\nisinstance(self.loginStatus, LoginStatus)\n)\nself.assertTrue(self.loginStatus.name in ['logged in', 'logged out'])\n</code></pre>"},{"location":"developer/manual/stakeholder/#django_project.stakeholder.test_stakeholder_models.LoginStatusTestCase.test_delete_login_status","title":"test_delete_login_status","text":"<pre><code>test_delete_login_status()\n</code></pre> <p>Test deleting a login status.</p> Source code in <code>django_project/stakeholder/test_stakeholder_models.py</code> <pre><code>def test_delete_login_status(self):\n\"\"\"Test deleting a login status.\"\"\"\nself.loginStatus.delete()\nself.assertEqual(LoginStatus.objects.count(), 0)\n</code></pre>"},{"location":"developer/manual/stakeholder/#django_project.stakeholder.test_stakeholder_models.LoginStatusTestCase.test_update_login_status","title":"test_update_login_status","text":"<pre><code>test_update_login_status()\n</code></pre> <p>Test updating a login status.</p> Source code in <code>django_project/stakeholder/test_stakeholder_models.py</code> <pre><code>def test_update_login_status(self):\n\"\"\"Test updating a login status.\"\"\"\nself.loginStatus.name = 'logged in'\nloginStatus = LoginStatus.objects.get(\nid=self.loginStatus.id\n)\nself.assertTrue(loginStatus.name, 'logged in')\nself.loginStatus.name = 'logged out'\nloginStatus = LoginStatus.objects.get(\nid=self.loginStatus.id\n)\nself.assertTrue(loginStatus.name, 'logged out')\n</code></pre>"},{"location":"developer/manual/stakeholder/#django_project.stakeholder.test_stakeholder_models.OrganisationInvitesModelTest","title":"OrganisationInvitesModelTest","text":"<p>             Bases: <code>TestCase</code></p>"},{"location":"developer/manual/stakeholder/#django_project.stakeholder.test_stakeholder_models.OrganisationInvitesModelTest.test_create_organisation_invite","title":"test_create_organisation_invite","text":"<pre><code>test_create_organisation_invite()\n</code></pre> <p>Test create organisation invite.</p> Source code in <code>django_project/stakeholder/test_stakeholder_models.py</code> <pre><code>def test_create_organisation_invite(self):\n\"\"\"Test create organisation invite.\"\"\"\ninvite = OrganisationInvites.objects.create(\norganisation=self.organisation, email='test@kartoza.com')\nself.assertEqual(invite.organisation, self.organisation)\nself.assertEqual(invite.email, 'test@kartoza.com')\n</code></pre>"},{"location":"developer/manual/stakeholder/#django_project.stakeholder.test_stakeholder_models.OrganisationInvitesModelTest.test_delete_organisation_invite","title":"test_delete_organisation_invite","text":"<pre><code>test_delete_organisation_invite()\n</code></pre> <p>Test delete organisation invite.</p> Source code in <code>django_project/stakeholder/test_stakeholder_models.py</code> <pre><code>def test_delete_organisation_invite(self):\n\"\"\"Test delete organisation invite.\"\"\"\ninvite = OrganisationInvites.objects.create(\norganisation=self.organisation, email='test@kartoza.com')\ninvite.delete()\nself.assertFalse(\nOrganisationInvites.objects.filter(pk=invite.pk).exists())\n</code></pre>"},{"location":"developer/manual/stakeholder/#django_project.stakeholder.test_stakeholder_models.OrganisationInvitesModelTest.test_read_organisation_invite","title":"test_read_organisation_invite","text":"<pre><code>test_read_organisation_invite()\n</code></pre> <p>Test read organisation invite.</p> Source code in <code>django_project/stakeholder/test_stakeholder_models.py</code> <pre><code>def test_read_organisation_invite(self):\n\"\"\"Test read organisation invite.\"\"\"\ninvite = OrganisationInvites.objects.create(\norganisation=self.organisation, email='test@kartoza.com')\nsaved_invite = OrganisationInvites.objects.get(pk=invite.pk)\nself.assertEqual(saved_invite.organisation, self.organisation)\nself.assertEqual(saved_invite.email, 'test@kartoza.com')\n</code></pre>"},{"location":"developer/manual/stakeholder/#django_project.stakeholder.test_stakeholder_models.OrganisationInvitesModelTest.test_update_organisation_invite","title":"test_update_organisation_invite","text":"<pre><code>test_update_organisation_invite()\n</code></pre> <p>Test update organisation invite.</p> Source code in <code>django_project/stakeholder/test_stakeholder_models.py</code> <pre><code>def test_update_organisation_invite(self):\n\"\"\"Test update organisation invite.\"\"\"\ninvite = OrganisationInvites.objects.create(\norganisation=self.organisation, email='test@kartoza.com')\ninvite.organisation = self.organisation\ninvite.save()\nupdated_invite = OrganisationInvites.objects.get(pk=invite.pk)\nself.assertEqual(updated_invite.organisation, self.organisation)\n</code></pre>"},{"location":"developer/manual/stakeholder/#django_project.stakeholder.test_stakeholder_models.OrganizationRepresentativeTestCase","title":"OrganizationRepresentativeTestCase","text":"<p>             Bases: <code>TestCase</code></p> <p>Test case for organization representative.</p>"},{"location":"developer/manual/stakeholder/#django_project.stakeholder.test_stakeholder_models.OrganizationRepresentativeTestCase.setUpTestData","title":"setUpTestData  <code>classmethod</code>","text":"<pre><code>setUpTestData()\n</code></pre> <p>Setup test data for organisation representative model.</p> Source code in <code>django_project/stakeholder/test_stakeholder_models.py</code> <pre><code>@classmethod\ndef setUpTestData(cls):\n\"\"\"Setup test data for organisation representative model.\"\"\"\ncls.organizationRep = organisationRepresentativeFactory()\n</code></pre>"},{"location":"developer/manual/stakeholder/#django_project.stakeholder.test_stakeholder_models.OrganizationRepresentativeTestCase.test_create_organisation_user","title":"test_create_organisation_user","text":"<pre><code>test_create_organisation_user()\n</code></pre> <p>Test creating organisation representative.</p> Source code in <code>django_project/stakeholder/test_stakeholder_models.py</code> <pre><code>def test_create_organisation_user(self):\n\"\"\"Test creating organisation representative.\"\"\"\nself.assertEqual(OrganisationRepresentative.objects.count(), 1)\nself.assertTrue(\nisinstance(\nself.organizationRep,\nOrganisationRepresentative\n)\n)\n</code></pre>"},{"location":"developer/manual/stakeholder/#django_project.stakeholder.test_stakeholder_models.OrganizationRepresentativeTestCase.test_delete_organisation_user","title":"test_delete_organisation_user","text":"<pre><code>test_delete_organisation_user()\n</code></pre> <p>Test deleting organisation representative.</p> Source code in <code>django_project/stakeholder/test_stakeholder_models.py</code> <pre><code>def test_delete_organisation_user(self):\n\"\"\"Test deleting organisation representative.\"\"\"\nself.organizationRep.delete()\nself.assertEqual(OrganisationRepresentative.objects.count(), 0)\n</code></pre>"},{"location":"developer/manual/stakeholder/#django_project.stakeholder.test_stakeholder_models.OrganizationRepresentativeTestCase.test_update_organisation_user","title":"test_update_organisation_user","text":"<pre><code>test_update_organisation_user()\n</code></pre> <p>Test updating organisation representative.</p> Source code in <code>django_project/stakeholder/test_stakeholder_models.py</code> <pre><code>def test_update_organisation_user(self):\n\"\"\" Test updating organisation representative.\"\"\"\nself.organizationRep.user.username = 'test'\nself.organizationRep.user.save()\nself.assertEqual(\nself.organizationRep.user.username,\n'test'\n)\n</code></pre>"},{"location":"developer/manual/stakeholder/#django_project.stakeholder.test_stakeholder_models.OrganizationTestCase","title":"OrganizationTestCase","text":"<p>             Bases: <code>TestCase</code></p> <p>Organization test case.</p>"},{"location":"developer/manual/stakeholder/#django_project.stakeholder.test_stakeholder_models.OrganizationTestCase.test_create_organization","title":"test_create_organization","text":"<pre><code>test_create_organization()\n</code></pre> <p>Test creating organization.</p> Source code in <code>django_project/stakeholder/test_stakeholder_models.py</code> <pre><code>def test_create_organization(self):\n\"\"\"Test creating organization.\"\"\"\nself.assertEqual(Organisation.objects.count(), 1)\nself.assertTrue(isinstance(self.organization, Organisation))\nself.assertTrue(self.organization.name, Organisation.objects.get(\nid=self.organization.id).name)\n</code></pre>"},{"location":"developer/manual/stakeholder/#django_project.stakeholder.test_stakeholder_models.OrganizationTestCase.test_delete_organization","title":"test_delete_organization","text":"<pre><code>test_delete_organization()\n</code></pre> <p>Test deleting organization.</p> Source code in <code>django_project/stakeholder/test_stakeholder_models.py</code> <pre><code>def test_delete_organization(self):\n\"\"\"Test deleting organization.\"\"\"\nself.organization.delete()\nself.assertEqual(Organisation.objects.count(), 0)\n</code></pre>"},{"location":"developer/manual/stakeholder/#django_project.stakeholder.test_stakeholder_models.OrganizationTestCase.test_update_organization","title":"test_update_organization","text":"<pre><code>test_update_organization()\n</code></pre> <p>Test updating organization.</p> Source code in <code>django_project/stakeholder/test_stakeholder_models.py</code> <pre><code>def test_update_organization(self):\n\"\"\"Test updating organization.\"\"\"\nprovince, created = Province.objects.get_or_create(\nname=\"Limpopo\"\n)\nself.organization.name = 'test'\nself.organization.national = True\nself.organization.province = province\nself.organization.save()\nself.assertEqual(Organisation.objects.get(\nid=self.organization.id).name, 'test')\nself.assertEqual(Organisation.objects.filter(\nnational=True).count(), 1)\nself.assertEqual(Organisation.objects.filter(\nprovince__name=\"Limpopo\").count(), 1)\n</code></pre>"},{"location":"developer/manual/stakeholder/#django_project.stakeholder.test_stakeholder_models.OrganizationUserTestCase","title":"OrganizationUserTestCase","text":"<p>             Bases: <code>TestCase</code></p> <p>Test case for organization user.</p>"},{"location":"developer/manual/stakeholder/#django_project.stakeholder.test_stakeholder_models.OrganizationUserTestCase.setUpTestData","title":"setUpTestData  <code>classmethod</code>","text":"<pre><code>setUpTestData()\n</code></pre> <p>Setup test data for organisation user model.</p> Source code in <code>django_project/stakeholder/test_stakeholder_models.py</code> <pre><code>@classmethod\ndef setUpTestData(cls):\n\"\"\"Setup test data for organisation user model.\"\"\"\ncls.organizationUser = organisationUserFactory()\n</code></pre>"},{"location":"developer/manual/stakeholder/#django_project.stakeholder.test_stakeholder_models.OrganizationUserTestCase.test_create_organisation_user","title":"test_create_organisation_user","text":"<pre><code>test_create_organisation_user()\n</code></pre> <p>Test creating organisation user.</p> Source code in <code>django_project/stakeholder/test_stakeholder_models.py</code> <pre><code>def test_create_organisation_user(self):\n\"\"\"Test creating organisation user.\"\"\"\nself.assertEqual(OrganisationUser.objects.count(), 1)\nself.assertTrue(isinstance(self.organizationUser, OrganisationUser))\n</code></pre>"},{"location":"developer/manual/stakeholder/#django_project.stakeholder.test_stakeholder_models.OrganizationUserTestCase.test_delete_organisation_user","title":"test_delete_organisation_user","text":"<pre><code>test_delete_organisation_user()\n</code></pre> <p>Test deleting organisation user.</p> Source code in <code>django_project/stakeholder/test_stakeholder_models.py</code> <pre><code>def test_delete_organisation_user(self):\n\"\"\"Test deleting organisation user.\"\"\"\nself.organizationUser.delete()\nself.assertEqual(OrganisationUser.objects.count(), 0)\n</code></pre>"},{"location":"developer/manual/stakeholder/#django_project.stakeholder.test_stakeholder_models.OrganizationUserTestCase.test_update_organisation_user","title":"test_update_organisation_user","text":"<pre><code>test_update_organisation_user()\n</code></pre> <p>Test updating organisation user.</p> Source code in <code>django_project/stakeholder/test_stakeholder_models.py</code> <pre><code>def test_update_organisation_user(self):\n\"\"\" Test updating organisation user.\"\"\"\nself.organizationUser.user.username = 'test'\nself.organizationUser.user.save()\nself.assertEqual(\nself.organizationUser.user.username,\n'test'\n)\n</code></pre>"},{"location":"developer/manual/stakeholder/#django_project.stakeholder.test_stakeholder_models.TestUser","title":"TestUser","text":"<p>             Bases: <code>TestCase</code></p> <p>Test the main user model relation to the profie model.</p>"},{"location":"developer/manual/stakeholder/#django_project.stakeholder.test_stakeholder_models.TestUser.test_create_new_user_with_new_profile","title":"test_create_new_user_with_new_profile","text":"<pre><code>test_create_new_user_with_new_profile()\n</code></pre> <p>Test creating new user when new profile is created.</p> Source code in <code>django_project/stakeholder/test_stakeholder_models.py</code> <pre><code>def test_create_new_user_with_new_profile(self):\n\"\"\"Test creating new user when new profile is created.\"\"\"\nself.assertEqual(UserProfile.objects.count(), 1)\nself.assertEqual(\nUser.objects.count(), 2\n)  # Anon user is created by default\n</code></pre>"},{"location":"developer/manual/stakeholder/#django_project.stakeholder.test_stakeholder_models.TestUser.test_delete_role","title":"test_delete_role","text":"<pre><code>test_delete_role()\n</code></pre> <p>Test deleting user when a profile is deleted.</p> Source code in <code>django_project/stakeholder/test_stakeholder_models.py</code> <pre><code>def test_delete_role(self):\n\"\"\"Test deleting user when a profile is deleted.\"\"\"\nself.profileFactory.delete()\nself.assertEqual(User.objects.count(), 1)\n</code></pre>"},{"location":"developer/manual/stakeholder/#django_project.stakeholder.test_stakeholder_models.TestUser.test_update_user_profile","title":"test_update_user_profile","text":"<pre><code>test_update_user_profile()\n</code></pre> <p>Test updating user through profile.</p> Source code in <code>django_project/stakeholder/test_stakeholder_models.py</code> <pre><code>def test_update_user_profile(self):\n\"\"\"Test updating user through profile.\"\"\"\nself.profileFactory.user.username = 'test'\nself.profileFactory.user.first_name = 'test123'\nself.profileFactory.user.save()\nself.assertEqual(\nUser.objects.get(username='test').first_name, 'test123'\n)\n</code></pre>"},{"location":"developer/manual/stakeholder/#django_project.stakeholder.test_stakeholder_models.TestUserLogin","title":"TestUserLogin","text":"<p>             Bases: <code>TestCase</code></p> <p>\"User login testcase.</p>"},{"location":"developer/manual/stakeholder/#django_project.stakeholder.test_stakeholder_models.TestUserLogin.create_user_login","title":"create_user_login","text":"<pre><code>create_user_login()\n</code></pre> <p>Test creating new user login.</p> Source code in <code>django_project/stakeholder/test_stakeholder_models.py</code> <pre><code>def create_user_login(self):\n\"\"\"Test creating new user login.\"\"\"\nself.assertEqual(UserLogin.objects.count(), 1)\nself.assertEqual(User.objects.count(), 2)\n</code></pre>"},{"location":"developer/manual/stakeholder/#django_project.stakeholder.test_stakeholder_models.TestUserLogin.test_delete_user_login","title":"test_delete_user_login","text":"<pre><code>test_delete_user_login()\n</code></pre> <p>Test deleting user login.</p> Source code in <code>django_project/stakeholder/test_stakeholder_models.py</code> <pre><code>def test_delete_user_login(self):\n\"\"\"Test deleting user login.\"\"\"\nself.user_login.delete()\nself.assertEqual(UserLogin.objects.count(), 0)\nself.assertEqual(User.objects.count(), 2)\n</code></pre>"},{"location":"developer/manual/stakeholder/#django_project.stakeholder.test_stakeholder_models.TestUserLogin.test_update_user_login","title":"test_update_user_login","text":"<pre><code>test_update_user_login()\n</code></pre> <p>Test updating user login.</p> Source code in <code>django_project/stakeholder/test_stakeholder_models.py</code> <pre><code>def test_update_user_login(self):\n\"\"\"Test updating user login.\"\"\"\nself.user_login.login_status.name = 'logged out'\nself.user_login.login_status.save()\nself.assertEqual(\nUserLogin.objects.get(id=self.user_login.id).login_status.name,\n'logged out'\n)\n</code></pre>"},{"location":"developer/manual/stakeholder/#django_project.stakeholder.test_stakeholder_models.TestUserRoleType","title":"TestUserRoleType","text":"<p>             Bases: <code>TestCase</code></p> <p>Test user's role type model.</p>"},{"location":"developer/manual/stakeholder/#django_project.stakeholder.test_stakeholder_models.TestUserRoleType.test_create_new_role","title":"test_create_new_role","text":"<pre><code>test_create_new_role()\n</code></pre> <p>Test creating new role.</p> Source code in <code>django_project/stakeholder/test_stakeholder_models.py</code> <pre><code>def test_create_new_role(self):\n\"\"\"Test creating new role.\"\"\"\nself.assertEqual(UserRoleType.objects.count(), 1)\nself.assertTrue(\nself.UserRoleTypeFactory.name\nin ['base user', 'admin', 'super user']\n)\n</code></pre>"},{"location":"developer/manual/stakeholder/#django_project.stakeholder.test_stakeholder_models.TestUserRoleType.test_delete_role","title":"test_delete_role","text":"<pre><code>test_delete_role()\n</code></pre> <p>Test deleting new role.</p> Source code in <code>django_project/stakeholder/test_stakeholder_models.py</code> <pre><code>def test_delete_role(self):\n\"\"\"Test deleting new role.\"\"\"\nself.UserRoleTypeFactory.delete()\nself.assertEqual(UserRoleType.objects.count(), 0)\n</code></pre>"},{"location":"developer/manual/stakeholder/#django_project.stakeholder.test_stakeholder_models.TestUserRoleType.test_update_role","title":"test_update_role","text":"<pre><code>test_update_role()\n</code></pre> <p>Test updating a role.</p> Source code in <code>django_project/stakeholder/test_stakeholder_models.py</code> <pre><code>def test_update_role(self):\n\"\"\"Test updating a role.\"\"\"\nself.UserRoleTypeFactory.name = 'admin'\nself.UserRoleTypeFactory.save()\nUserRoleObject = UserRoleType.objects.get(\nid=self.UserRoleTypeFactory.id\n)\nself.assertEqual(UserRoleObject.name, 'admin')\n</code></pre>"},{"location":"developer/manual/stakeholder/#django_project.stakeholder.test_stakeholder_models.UserTitleTestCase","title":"UserTitleTestCase","text":"<p>             Bases: <code>TestCase</code></p> <p>User title test case.</p>"},{"location":"developer/manual/stakeholder/#django_project.stakeholder.test_stakeholder_models.UserTitleTestCase.test_create_new_title","title":"test_create_new_title","text":"<pre><code>test_create_new_title()\n</code></pre> <p>Test creating new title.</p> Source code in <code>django_project/stakeholder/test_stakeholder_models.py</code> <pre><code>def test_create_new_title(self):\n\"\"\"Test creating new title.\"\"\"\nself.assertEqual(UserTitle.objects.count(), 1)\nself.assertTrue(self.userTitle.name in ['mr', 'mrs', 'miss', 'dr'])\n</code></pre>"},{"location":"developer/manual/stakeholder/#django_project.stakeholder.test_stakeholder_models.UserTitleTestCase.test_delete_new_title","title":"test_delete_new_title","text":"<pre><code>test_delete_new_title()\n</code></pre> <p>Test deleting a title.</p> Source code in <code>django_project/stakeholder/test_stakeholder_models.py</code> <pre><code>def test_delete_new_title(self):\n\"\"\"Test deleting a title.\"\"\"\nself.userTitle.delete()\nself.assertEqual(UserTitle.objects.count(), 0)\n</code></pre>"},{"location":"developer/manual/stakeholder/#django_project.stakeholder.test_stakeholder_models.UserTitleTestCase.test_update_title","title":"test_update_title","text":"<pre><code>test_update_title()\n</code></pre> <p>Test updating a title.</p> Source code in <code>django_project/stakeholder/test_stakeholder_models.py</code> <pre><code>def test_update_title(self):\n\"\"\"Test updating a title.\"\"\"\nself.userTitle.name = 'mr'\nuserTitle = UserTitle.objects.get(id=self.userTitle.id)\nself.assertTrue(userTitle.name, 'mr')\n</code></pre>"},{"location":"devops/","title":"DevOps Documentation","text":"<p>This section contains all documentation relevant to DevOps procedures.</p> <p>The devops content is divided into three sections:</p> <ul> <li>The devops guide, which describes common workflows for deployment and management of running instances in a tutorial format.</li> <li>The devops manual, which provides links and references to deployment configuration files, frameworks and deployment systems used etc.</li> </ul>"},{"location":"devops/guide/","title":"DevOps Guide","text":""},{"location":"devops/manual/","title":"DevOps Documentation","text":""},{"location":"devops/manual/#containers-used","title":"Containers Used","text":""},{"location":"devops/manual/#sdlc","title":"SDLC","text":""},{"location":"devops/manual/#continuous-integration","title":"Continuous Integration","text":""},{"location":"devops/manual/#testing-deployments","title":"Testing Deployments","text":""},{"location":"devops/manual/#backend-orchestration","title":"Backend Orchestration","text":""},{"location":"devops/manual/#deployments","title":"Deployments","text":""},{"location":"devops/manual/#kubernetes","title":"Kubernetes","text":""},{"location":"user/","title":"For Users","text":"<p>This is the homepage for all user related documentation.</p> <p>The user content is divided into three sections:</p> <ul> <li>The quickstart tutorial, which aims to get you familiar with the basics of platform in around 5 minutes.</li> <li>The user guide, which describes common workflows in a tutorial format.</li> <li>The user manual, which describes each page of the user interface and what the various options on that page do.</li> </ul>"},{"location":"user/guide/","title":"SAWPS User Guide","text":""},{"location":"user/guide/#switching-between-light-and-dark-mode-on-the-map","title":"Switching between light and dark mode on the map","text":"<p>To switch to dark mode, simply go to your map and click on the little sun icon which is located next to the layers panel.</p> <p></p> <p>This will switch your map from light mode to dark mode. </p> <p>To change your map from dark mode to light mode, simply click on the crescent moon icon located next to the layers panel. </p>"},{"location":"user/guide/#creating-a-new-property-by-selecting-parcels","title":"Creating a new property by selecting parcels","text":"<p>There are various methods of creating a new property on the site. One of them uses a selection tool to allow you, as the user, to select the parcels you want to be a part of the property you are creating. To create a property using this method, go to \u2018Maps\u2019 and select \u2018 Data Upload\u2019.</p> <p></p> <p>Fill in the \u2018Property Information\u2019 form and then click on \u2018Save Property Information\u2019. Next, choose the \u2018Select\u2019 option and zoom in on the map to where your property is located.</p> <p></p> <p>Once you have located your property, select all of the relevant parcels. Once you are happy with your selection, click on the \u2018Save Boundary\u2019 button. If you want to deselect what you have selected, click \u2018Cancel\u2019 to clear everything and then \u2018Select\u2019 to start again or just click on the parcel again to deselect them individually.</p> <p></p>"},{"location":"user/guide/#the-online-form","title":"The online form","text":"<p>You will now be directed to Step 3. Select \u2018Update Property Boundary\u2019 to go back to Step 2. Select \u2018Online Form\u2019 to fill in all of the species and activity detail about the property.</p> <p></p> <p>The online form allows you to give Species Detail as well as Activity Detail about each property.</p> <p></p> <p></p> <p>Once you have filled in both sections of the form, you can review them and then submit the form or save the form as a draft and submit it at a later stage.</p> <p></p>"},{"location":"user/guide/#printing-your-map","title":"Printing your map","text":"<p>The print option on the map allows you to take a screenshot of whatever is present on your map canvas. To save this screenshot, click on the print icon which is located next to the layers panel.</p> <p></p> <p>Select your desired page size, orientation, image format and DPI and then click on the \u2018Generate\u2019 button.</p> <p></p> <p>Once you have selected your image settings, save the image to your local machine.</p> <p></p>"},{"location":"user/guide/#enabling-and-disabling-the-basemap","title":"Enabling and disabling the basemap","text":"<p>Once you are in the map, you have the option of enabling and disabling \u2018NGI Aerial Imagery\u2019. This basemap allows you to visualise the map using aerial imagery. By disabling this, the map will no longer have a basemap.</p> <p></p> <p></p>"},{"location":"user/guide/#the-filters-panel","title":"The Filters Panel","text":"<p>To apply filters to the data being displayed on your map, open the \u2018Filters\u2019 panel. This panel is interchangeable with the layers panel.</p> <p></p> <p>Here you will be able to filter by species, year and month. There are also spatial filters available in this panel. Here you can filter by population category, protected areas, activity, critical biodiversity areas and ecosystem type.</p> <p></p> <p>To use these filters simply check the boxes to enable them and uncheck the boxes to disable them.</p> <p></p> <p>The year filter works slightly differently from the rest. Simply drag the dots on the black line to choose which year(s) you want to show data for.</p> <p></p>"},{"location":"user/guide/#uploading-data","title":"Uploading data","text":"<p>The data upload function allows users to fill in an online form or upload a CSV file to the SAWPS platform to further enrich their data.</p>"},{"location":"user/guide/#how-to-upload-csv-data","title":"How to upload CSV data","text":"<p>Users must first download a template from the platform, which they populate with their own data.</p>"},{"location":"user/guide/#step-1","title":"Step 1","text":"<p>On the Map page</p> <p></p> <p>To begin, click on <code>DATA UPLOAD</code> 1\ufe0f\u20e3 then select the property name 2\ufe0f\u20e3.</p>"},{"location":"user/guide/#step-2","title":"Step 2","text":"<p>In this step, you have two choices to use the online form or to upload a CSV.</p> <p></p> <p>To upload a CSV, click on <code>UPLOAD CSV</code> 1\ufe0f\u20e3. A pop-up window 2\ufe0f\u20e3 will open, you can then browse and select the CSV file on your computer 3\ufe0f\u20e3. To cancel uploading you can click on the <code>cancel</code> button 4\ufe0f\u20e3.</p>"},{"location":"user/guide/#step-3","title":"Step 3","text":"<p>After selecting your CSV file, the system will check whether your file complies with the template.</p> <p></p> <p>An alert message 1\ufe0f\u20e3 is displayed in the case that the file is incorrect. You can close the pop-up by clicking on <code>Close</code> 2\ufe0f\u20e3.</p>"},{"location":"user/guide/#step-4","title":"Step 4","text":"<p>Once the system has checked the file you have selected, it will allow you to UPLOAD FILES if it's correct.</p> <p></p> <p>You can drag and drop files to be uploaded or click on <code>Browse</code> 1\ufe0f\u20e3 to select files from your file explorer. A chosen file will appear here 2\ufe0f\u20e3 when it is being uploaded. You can cancel uploading by clicking on the <code>cancel</code> button 3\ufe0f\u20e3. Once your files have finished uploading you can click on <code>Upload Files</code> 4\ufe0f\u20e3 to finish the process.</p> <p></p> <p>A success message 1\ufe0f\u20e3 is displayed when the download is complete. The file you selected shows here 2\ufe0f\u20e3. The pop-up window can be closed by clicking on <code>Close</code> 3\ufe0f\u20e3.</p>"},{"location":"user/guide/#two-factor-authentication-settings","title":"Two factor authentication settings","text":"<p>The Two factor authentication page handles the user\u2019s two factor authentication settings. The settings include:</p> <ul> <li>Backup tokens</li> <li>Two factor authentication devices</li> </ul> <p>Navigate to the 2FA tab 1\ufe0f\u20e3 under the profile page. This dropdown menu 2\ufe0f\u20e3 shows the current 2FA method that the user utilises to log on to the platform. Clicking this button 3\ufe0f\u20e3 will open a pop-up window, requiring the user to enter a new device's details before saving. This is the table 4\ufe0f\u20e3 that shows the current 2FA devices that the user utilises to log on to the platform. Clicking the <code>Delete Button</code> 5\ufe0f\u20e3 will open a pop-up window confirming that the user is sure that they want to remove the device before proceeding to removing it. Under the Recovery Options header 6\ufe0f\u20e3, there is a list of the backup tokens the user can use to log on to the platform in case they have lost their device. The <code>Generate backup tokens</code> button 7\ufe0f\u20e3 allows a user to to refresh their backup tokens as well as create new ones when they've just registered onto the platform.</p> <p></p>"},{"location":"user/guide/#adding-new-device","title":"Adding new device","text":"<p>When a user clicks on <code>Add Device</code>, a pop-up window appears. The pop-up contains the Device Name label 1\ufe0f\u20e3, which indicates the value that is required in the field below it, and the <code>Add button</code> 2\ufe0f\u20e3, which when clicked will save the new device.</p> <p></p> <p>Once the <code>Add button</code> has been clicked, the pop-up will change to display a QR Image Code Label 1\ufe0f\u20e3 ,indicating the success result when the device is added, and the QR Code 2\ufe0f\u20e3, which the user should scan with the authenticator app of their choice on their new device.</p> <p></p>"},{"location":"user/guide/#deleting-a-device","title":"Deleting a device","text":"<p>The <code>Cancel</code> button 1\ufe0f\u20e3 will prevent the device from being removed (This is in case the user isn't sure or clicked the icon by accident). The <code>Delete</code> button 2\ufe0f\u20e3 will remove the device from the platform meaning the user will no longer be able to login using that device.</p> <p></p>"},{"location":"user/guide/#forgot-password","title":"Forgot password","text":"<p>When the user has forgotten their password, they can use this feature to reset it. The steps involve:</p> <ul> <li>Providing the correct email for the user account.</li> <li>Clicking on the reset password link provided in their email.</li> <li>Resetting their password on the platform.</li> <li>Logging in with their new password.</li> </ul> <p>When a user clicks on the <code>Forgot Password</code> link 1\ufe0f\u20e3, they are redirected to the password reset page.</p> <p></p> <p>On the password reset page, there is Reset Password Label 1\ufe0f\u20e3. A user should enter their email address in the Email Field 2\ufe0f\u20e3, and then click the <code>Reset Password</code> button 3\ufe0f\u20e3 to send the reset password email and notify the user. If a user clicked the <code>Forgot Passwword</code> link by mistake they can click on the <code>Go back</code> link 4\ufe0f\u20e3.</p> <p></p> <p>After a user has clicked on the <code>Reset Password</code> button, the page updates to display a message 1\ufe0f\u20e3 containing instructions which the user should follow in order to be able to reset their password, and a <code>Go back</code> link 2\ufe0f\u20e3 which when clicked returns the user to the login page.</p> <p></p> <p>A user should receive an email containing further instructions on completing the reset password process and a <code>Password Reset</code> button which when clicked will redirect the user to the platform to complete resetting their password.</p> <p></p> <p>After a user clicks on the <code>Reset Password</code> button in the received email, they are redirected to the reset password page. The user should enter their password into the New Password field 1\ufe0f\u20e3 following the criteria set out in the list of Allowable Password characteristics 2\ufe0f\u20e3. The user should re-enter their password in the <code>New password confirmation</code> field 3\ufe0f\u20e3, to make sure they didn\u2019t make a mistake. Finally the user should click on the <code>Reset Password</code> button 4\ufe0f\u20e3 to finish setting the password the user provided as the new password for logging in.</p> <p></p> <p>If the password is reset without issues, the user will see a success message.</p> <p></p>"},{"location":"user/guide/#notifications","title":"Notifications","text":"<p>The notifications feature allows for the user to receive push notifications of the reminders they have set via the platform. When a notification comes in, a small bell icon 1\ufe0f\u20e3 appears on the user profile icon. A link for notifications 2\ufe0f\u20e3 becomes available in profile dropdown menu, this allows for the user to view the notifications from any page on the system. Clicking on the notification will lead the user to the notifications page where they can review more details about the notifications. On the profile pages a small notification badge 3\ufe0f\u20e3 appears showing the number of notifications the user has.</p> <p></p> <p>Under the profile section, a notifications tab 1\ufe0f\u20e3 is available. When the tab is clicked, the notification page appears. On the notifications page, users can search for specific notifications entering keywords for the notification and the title columns into the search box 2\ufe0f\u20e3. By clicking on the Filter box 3\ufe0f\u20e3, a user can refine the search to only return notifications containing the providing keywords specifically by the filter selected. Clicking on any notification 4\ufe0f\u20e3 will cause the pop-up with the notification's information to appear (example of pop-up below). When a user clicks on the <code>Delete</code> button 5\ufe0f\u20e3, a pop-up appears asking a user to confirm the deletion (example below). The user is able to choose the number of notifications they prefer to see on a page by changing the number here 6\ufe0f\u20e3 (The minimum is 5). In the bottom right, a user is able to see the current page they're own and, to navigate to previous and next pages using the navigation links 7\ufe0f\u20e3.</p> <p></p> <p>Example: Pop-up with the notification's information</p> <p></p> <p>Example: Delete notification pop-up</p> <p>A user will see a Delete Confirmation title 1\ufe0f\u20e3 explaining what the pop-up is. On the pop-up, user can decide to click on the <code>Delete</code> button 2\ufe0f\u20e3 to delete the reminder or click on the <code>Cancel</code> button to abort deletion.</p> <p></p> <p>Note: A user can delete their notifications and Organisation Managers can delete organisation notifications.</p>"},{"location":"user/guide/#organisation-page","title":"Organisation page","text":"<p>Every organisation can manage their organisation members via this page. The organisation page allows for the viewing of organisation members, inviting new members to the organisation (provided the user has the necessary permissions), deleting organisation members (provided the user has the necessary permissions), and searching to see if a member exists within an organisation.</p> <p>When the user clicks the dropdown icon 1\ufe0f\u20e3 next to their username and profile picture, a dropdown menu will appear. If a user clicks on the organisation under current organisation 2\ufe0f\u20e3, the page will redirect to that Organisation's page.</p> <p></p> <p>On the Organisation's page a user can see the organisation name 1\ufe0f\u20e3 which indicates to the user the current organization they are viewing. To add new members, a user (with necessary permissions) can click on the <code>Add People</code> button 2\ufe0f\u20e3 which will open a pop-up (example below) where a new member's information can be added. Underneath the Members heading 3\ufe0f\u20e3, a user can use the search box 4\ufe0f\u20e3 to find specific members within the organisation. Users can decided how many rows per page they would like to see by adjusting the rows per page 5\ufe0f\u20e3 (fewer rows displayed can be useful on smaller devices). A user can see which page of members they are on or click on the navigation links 6\ufe0f\u20e3 to change between pages. On the Invitations table 7\ufe0f\u20e3, a user can see the members that have been invited to the organisation and if the user has a status role, they can see if a new user has joined the organisation or not in the status column 8\ufe0f\u20e3.</p> <p></p> <p>The Add People pop-up contains an <code>Email address</code> field 1\ufe0f\u20e3 that the inviter needs to populate with the email address for the individual they wish to invite to the organization. The inviter also needs to specify if the individual they\u2019re inviting will have a manager or member role within the organization using the <code>Invite as</code> field 2\ufe0f\u20e3 and to set the new user's permissions using the <code>Permissions</code> field 3\ufe0f\u20e3. To finalise adding a new member, an inviting user needs to click on the <code>Invite</code> button 4\ufe0f\u20e3 to send the invitation to the individual being invited to the organisation.</p> <p></p> <p>A success message will show if the email has been sent.</p> <p></p> <p>In the Invitation Email received by the individual being invited to an organisation, they should click on the <code>Register</code> button 1\ufe0f\u20e3 to be redirected to the website to complete their registration.</p> <p></p> <p>Once redirected to the registration page, the user needs to fill in the form. Once the registration is complete and the user clicks on the <code>Register</code> button, they will then be able to login and see their new organisation under accessible organisations.</p> <p></p> <ul> <li>If the user is a new member on platform, they will be taken through the normal registration and added to the organisation.</li> <li>If the user is already registered on platform, they will just be registered on to the organisation they're being invited.</li> </ul>"},{"location":"user/guide/#request-organisation-feature","title":"Request organisation feature","text":"<p>When a user on the platform wishes to either have an organisation, or be added to one, they can request for one to be created or to be added to an existing one. The SANBI administrator will review the request and if they approve of it, they will create the organisation for the user, or add them to an existing organisation, and then notify them via email.</p> <p>To request to be added to an organisation, or have one created, a user needs to click on the profile menu dropdown and then click on the <code>Request Organisation</code> button 1\ufe0f\u20e3.</p> <p></p> <p>When the <code>Request Organisation</code> button is clicked, a pop-up window is will appear. On the pop-up, a user can specify the name/s of the organization they wish to have created in <code>Organization Name</code> field 1\ufe0f\u20e3 and add message providing a description of the organisation, etc. in the <code>Message to administrator</code> field 2\ufe0f\u20e3. Once the user has filled in the relevant fields, they can then click on the <code>Send</code> button 3\ufe0f\u20e3.</p> <p></p> <p>A confirmation will be returned to the user to let them know their invitation has been sent.</p> <p></p> <p>After these steps have been completed, the user will need to wait to receive feedback from the SANBI administrator.</p>"},{"location":"user/guide/#reminders-page","title":"Reminders page","text":"<p>The Reminders feature has a multiple functions including allowing an organisation to set a reminder for everyone within the organisation, a user to set a personal reminder, a reminder to be edited (to change its state from active, draft and passed or altering other details etc.), a reminder to be deleted, and to send the reminder via email while also notifying the user via the platform.</p> <p>Other functionalities on the Reminders Page are the ability to search for specific reminders, to filter reminders, and pagination. Organisations can view all reminders set by users who have the permissions to create reminders for all members of that specific organisation. Users are capable of viewing personal reminders.</p> <p>Under the profile section, there is a reminders tab 1\ufe0f\u20e3 which when clicked renders the reminders page. To add a reminder, a user needs to click on the <code>Add Reminder</code> button 2\ufe0f\u20e3 to open the form (example below) to populate for the reminder they intend to create. A user can type keywords in the search box 3\ufe0f\u20e3 to filter the reminder and the title columns. By changing the filter 4\ufe0f\u20e3, a user is able to refine the search to only return reminders containing the keywords specifically provided by the filter selected. Clicking on any reminder 5\ufe0f\u20e3 will cause a pop-up window (example below) for editing the reminder to appear. When a user clicks on the <code>Delete</code> button 6\ufe0f\u20e3, the delete reminder pop-up will appear (example below). The user is able to choose the number of notifications they prefer to see on a page by changing the number here 7\ufe0f\u20e3 (The minimum is 5). In the bottom right, a user is able to see the current page they're own and, to navigate to previous and next pages using the navigation links 8\ufe0f\u20e3.</p> <p></p> <p>On the Add Reminder reminder form the user can see the title 1\ufe0f\u20e3. They should set the date and time 2\ufe0f\u20e3 that the reminder should appear and then they should provide a description in the reminder field 3\ufe0f\u20e3. After adding a description, the user should add the reminder type 4\ufe0f\u20e3 and based on their user role within that specific organisation they can specify if the reminder is for all organisation members or it's a personal reminder. Finally the user should click on the <code>Add</code> button 5\ufe0f\u20e3 to create the reminder.</p> <p></p> <p>In the Edit Reminder pop-up window the user can change the reminder title 1\ufe0f\u20e3 and by changing the date and time 2\ufe0f\u20e3 the user can change when the reminder is scheduled. The user can then edit the description in the reminder field 3\ufe0f\u20e3 and change the reminder type 4\ufe0f\u20e3 and based on their user role within that specific organisation. The user is able to change the reminder status 5\ufe0f\u20e3: if it is set to active the reminder is still scheduled, if it is set to draft the reminder is on pause, and if it is set to passed the reminder will be moved to the notifications section but no email will be sent. When a user is finished making changes they can click on the <code>Save</code> button 6\ufe0f\u20e3 to save the changes made to the reminder.</p> <p></p> <p>The Delete Reminder pop-up is opened when a user clicks on the <code>Delete</code> button and prompts the user if they are sure of the actions they wish to take. The user will see the Delete Confirmation title 1\ufe0f\u20e3, and then they can choose to click on the <code>Delete</code> or <code>Cancel</code> buttons 2\ufe0f\u20e3 depending on their intentions with the reminder.</p> <p></p> <ul> <li>The user can delete their reminders.</li> <li>Organisation Managers can delete organisation reminders.</li> </ul>"},{"location":"user/manual/","title":"Screen by screen explanation of","text":"<p>Welcome to the SAWPS manual. This is a page by page guide of the site. Every button, every link and every part of the site is labeled and described in this section. For workflows and how to work with the site please see the user guide. </p>"},{"location":"user/manual/#widgets","title":"Widgets","text":""},{"location":"user/manual/#buttons","title":"Buttons","text":""},{"location":"user/manual/#all-ui-features","title":"All UI features","text":""},{"location":"user/manual/profile-page/","title":"SAWPS profile page","text":"<p>The Profile tab is the first tab on the profile configuration page. The page consists of the following components with the following functionality. </p> <p></p> <ol> <li>The profile tab - a tab that displays the user profile information</li> <li>Profile picture - an area that displays the uploaded profile image</li> <li>Upload profile picture link - Opens the upload profile picture popup (see profile picture popup)</li> <li>Update password button - Opens the update password form for the user to make a new password for the platform (see update password form)</li> <li>First name field - a text field for the user to add their first name which is saved to the database</li> <li>Last name field - a text field for the user to add their last name which is saved to the database</li> <li>Title dropdown - a drop-down for the user to select their title which is saved to the database</li> <li>Email address field - a text field for the user to add their email address which is saved to the database </li> <li>Update button - When clicked all changes made to the profile page field are saved to the database</li> </ol>"},{"location":"user/manual/profile-page/#profile-picture-popup","title":"Profile picture popup","text":"<p>The profile picture popup appears when the Upload profile picture link is clicked in the profile tab of the profile configuration page. </p> <p></p> <ol> <li>Popup title - showing what the popup is for</li> <li>Upload file button - goes to the system file browser for the user to select an image for the profile picture. </li> <li>Upload button - uploads the image to the platform associated with that user. </li> </ol>"},{"location":"user/manual/profile-page/#update-password-form","title":"Update Password Form","text":"<p>The update password form opens when the update password button is clicked on the profile tab in the profile configuration page.</p>"},{"location":"user/quickstart/","title":"SANBI SAWPS Quickstart","text":""},{"location":"user/quickstart/#accessing-the-platform","title":"Accessing the Platform","text":""},{"location":"user/quickstart/#registration-and-logging-in","title":"Registration and Logging In","text":""}]}